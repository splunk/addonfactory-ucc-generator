{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About UCC","text":"<p>Universal Configuration Console (UCC) is a framework that simplifies the process of add-on creation for developers. You can use UCC to generate UI-based Splunk add-ons. UCC includes UI, REST handlers, modular inputs, OAuth, and alert action templates.</p> <p>The UCC framework helps you to maintain consistency and a uniform look and feel across different add-ons. You can easily update and modify your add-ons.</p> <p>To work with UCC framework, you can also use Splunk Extension. It helps you to create, test, and debug the add-ons in a simple way. For more information, see Visual Studio Code Extension for Splunk.</p> <p>To see how UCC can be used in an add-on, see Example TA.</p>"},{"location":"#libraries","title":"Libraries","text":"<p>UCC-based add-ons are powered by the following Splunk libraries:</p> <ul> <li><code>solnlib</code>, see https://github.com/splunk/addonfactory-solutions-library-python</li> <li><code>splunktaucclib</code>, see https://github.com/splunk/addonfactory-ucc-library.</li> </ul> <p>For more information, see UCC-related libraries.</p> <p>Note: Some specific Python libraries (such as <code>google-cloud-bigquery</code>) use <code>.so</code> files to operate. <code>pip</code> installs OS-specific versions of those <code>.so</code> files, which makes it impossible to use such add-ons on a Windows machine because it was built for macOS.</p>"},{"location":"#what-ucc-generates","title":"What UCC generates","text":"<p>When you use UCC to create an add-on, the following elements are generated and stored in the appropriate folders:</p> <ul> <li>UI is stored in the <code>appserver</code> folder,</li> <li>Python REST handlers that support UI CRUD operations are stored in the <code>bin</code> folder,</li> <li>inputs and their helper modules. For more information, see Inputs and Helper modules,</li> <li>OpenAPI description documents are stored in the <code>appserver/static/openapi.json</code> file. For more information, see OpenAPI description document,</li> <li><code>.conf</code> files. For more information, see .conf files,</li> <li>Python requirements are installed in the <code>lib</code> folder,</li> <li>metadata files are stored in the <code>metadata</code> folder,</li> <li>the monitoring dashboard. For more information, see Dashboard,</li> <li>the necessary files defined for the alert action, if you defined the alert action in the <code>globalConfig</code> file. For more information, see Alert actions.</li> </ul> <p>UCC now provides support for <code>.conf-only-TA's</code>, ensuring the following elements are generated and stored in their respective directories:</p> <ul> <li><code>app.conf</code> is generated in the <code>default</code> directory.</li> <li>Metadata files are stored in the <code>metadata</code> folder.</li> <li>No Python or JavaScript files are created.</li> </ul> <p>You can extend your add-ons with the following files:</p> <ul> <li>to extend the UI, use custom codes. For more information, see Custom hook.</li> <li>to extend the build process, use the <code>additional_packaging.py</code> file. For more information, see additional_packaging.py file.</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#601-2025-09-30","title":"6.0.1 (2025-09-30)","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>include built UI files in the wheel package (#1929) (a9dea38)</li> </ul>"},{"location":"CHANGELOG/#600-2025-09-26","title":"6.0.0 (2025-09-26)","text":"<ul> <li>feat!: Trigger UCC 6 release (#1920) (939616f), closes #1920</li> </ul>"},{"location":"CHANGELOG/#breaking-changes","title":"BREAKING CHANGES","text":"<ul> <li>Trigger UCC 6 release</li> </ul>"},{"location":"CHANGELOG/#5700-2025-09-25","title":"5.70.0 (2025-09-25)","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>add  browser header for test case (#1889) (068cad6)</li> <li>generation of web.conf for endpoints mentioned in endpointUrl (#1884) (5522137)</li> <li>ui: show OAuth 2.0 entities on tabs other than \u201caccount\u201d (#1895) (8dee920)</li> <li>ui: use the correct OAuth2 url (#1899) (0f3effd)</li> </ul>"},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>add check for existence of python scripts in user-defined handler (#1908) (98c6d17)</li> <li>add support of transforming custom command (#1856) (286577e)</li> <li>allow users to exclude libs that should not be installed (#1915) (a096cf1)</li> <li>build ui from ucc-gen build (#1893) (1d0214e)</li> <li>custom command: test-ucc-ui as custom ui test command (#1834) (533fc6a)</li> <li>do not support auth_entity property in auth entities (#1879) (26b25e0)</li> <li>issue warning for source code having files generated by ucc (#1900) (6d06746)</li> </ul>"},{"location":"CHANGELOG/#5691-2025-08-05","title":"5.69.1 (2025-08-05)","text":""},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>searchbnf.conf issue (#1860) (58f62c3)</li> </ul>"},{"location":"CHANGELOG/#reverts","title":"Reverts","text":"<ul> <li>merging of .conf files (#1873) (1c93133), closes #1800 #1832</li> </ul>"},{"location":"CHANGELOG/#5690-2025-07-22","title":"5.69.0 (2025-07-22)","text":""},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>add self param to stream_events and validate_input at build-time (#1829) (5aa5e95)</li> </ul>"},{"location":"CHANGELOG/#5681-2025-07-17","title":"5.68.1 (2025-07-17)","text":""},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>path issue for default alert icon (#1839) (342ebb4)</li> </ul>"},{"location":"CHANGELOG/#5680-2025-07-15","title":"5.68.0 (2025-07-15)","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>do not generate openapi.json for .conf-only add-ons (#1742) (3133ea2)</li> <li>fix Jinja2 vulnerability for autoescape (#1790) (c0eefef)</li> </ul>"},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>add command to publish package (#1813) (277e80e)</li> <li>added footer component (#1796) (f7f7e1a)</li> <li>allow more custom oauth methods (#1817) (5bcc9aa)</li> <li>modify field on value: support regexp expresion (#1812) (3c9d575)</li> <li>oauth: allow different components (#1810) (b10160f)</li> <li>textarea: mask data when encrypted (#1805) (8ad5e52)</li> <li>ucc-gen validate command support (#1771) (f4c3e40)</li> <li>update recursive_overwrite method to merge .conf files (#1800) (4444c65)</li> </ul>"},{"location":"CHANGELOG/#5670-2025-06-17","title":"5.67.0 (2025-06-17)","text":""},{"location":"CHANGELOG/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>added \u2013ignore-requires-python flag for os-dependent (#1792) (b9b7347)</li> </ul>"},{"location":"CHANGELOG/#features_3","title":"Features","text":"<ul> <li>add multiline support for tabs (#1778) (7616bcb)</li> <li>added user-friendly storybook component (#1759) (5d04783)</li> <li>dashbaord: do not build dashboard files when no need (#1795) (fafac88)</li> </ul>"},{"location":"CHANGELOG/#5660-2025-06-03","title":"5.66.0 (2025-06-03)","text":""},{"location":"CHANGELOG/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>custom tab without entity error (#1718) (9c38fd4)</li> <li>handling of non external custom elements (#1766) (2342a05)</li> <li>remove support for interval and index type of entities for alerts (#1757) (49c04be)</li> <li>set host and port for proxy as required (#1755) (4bafe79)</li> <li>ui lib: do not copy files from lib while building (#1756) (3b433ee)</li> </ul>"},{"location":"CHANGELOG/#features_4","title":"Features","text":"<ul> <li>playground: api calls as success to enable internal data flow (#1731) (6170551)</li> </ul>"},{"location":"CHANGELOG/#5650-2025-05-15","title":"5.65.0 (2025-05-15)","text":""},{"location":"CHANGELOG/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Oauth Client Credentials: OpenAPI fix (#1748) (fe2eb86)</li> </ul>"},{"location":"CHANGELOG/#features_5","title":"Features","text":"<ul> <li>add ucc-gen-ui cli command (#1705) (d9c3210)</li> <li>base code for supporting custom search command  (#1693) (03cb0d2), closes #1694 #1695 #1697</li> <li>custom react component via context (#1706) (1a65cf0)</li> <li>update base.html if it is incorrect (#1750) (05066ca)</li> </ul>"},{"location":"CHANGELOG/#5640-2025-05-08","title":"5.64.0 (2025-05-08)","text":""},{"location":"CHANGELOG/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>OAuth error messages (#1727) (dbfc0d4)</li> <li>oauth_client_credentials: reflects state correctly on edit/config  (#1726) (c1dfe62)</li> <li>reauthenticate when an account is edited (#1725) (9cb9109)</li> </ul>"},{"location":"CHANGELOG/#features_6","title":"Features","text":"<ul> <li>add ucc-gen validate command (#1702) (c756d7c)</li> </ul>"},{"location":"CHANGELOG/#reverts_1","title":"Reverts","text":"<ul> <li>remove ucc-gen validate command support (#1728) (1d350e4), closes #1702</li> </ul>"},{"location":"CHANGELOG/#5630-2025-04-30","title":"5.63.0 (2025-04-30)","text":""},{"location":"CHANGELOG/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>change sed backup extension (#1710) (2167622)</li> <li>fixed defaultView error (#1714) (cf793c9)</li> </ul>"},{"location":"CHANGELOG/#features_7","title":"Features","text":"<ul> <li>add links to something went wrong (#1709) (0b33911)</li> <li>schema changes for OAuth 2.0 Client Credentials Grant (#1708) (c8c0fe3)</li> <li>Single Model handler with OAuth 2.0 Client Credentials support (#1715) (be70a87)</li> <li>support for OAuth2 Client Credentials Grant in RH template (#1707) (5fd7a6b)</li> </ul>"},{"location":"CHANGELOG/#5620-2025-04-17","title":"5.62.0 (2025-04-17)","text":""},{"location":"CHANGELOG/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>show input type in inputs page (#1688) (5626536)</li> </ul>"},{"location":"CHANGELOG/#features_8","title":"Features","text":"<ul> <li>add delimiter for checkboxtree and checkboxgroup (#1685) (1bef9fa)</li> <li>generate another .conf-file when conf parameter is used (#1608) (849351f)</li> <li>handle uncaught exception (#1681) (9a621be)</li> </ul>"},{"location":"CHANGELOG/#5610-2025-04-01","title":"5.61.0 (2025-04-01)","text":""},{"location":"CHANGELOG/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>checkboxgroup select all button selects disabled fields (#1636) (3434a37)</li> <li>import-from-aob: fixed incorrect merging and added app.manifest validations (#1670) (2dba52b)</li> </ul>"},{"location":"CHANGELOG/#features_9","title":"Features","text":"<ul> <li>build: \u2013ui-source-map deprecation notice (#1674) (13efe91)</li> <li>create globalConfig from app.manifest (#1669) (07a37c4)</li> <li>introduce GlobalConfig.from_app_manifest (#1661) (d5edd88)</li> </ul>"},{"location":"CHANGELOG/#5600-2025-03-18","title":"5.60.0 (2025-03-18)","text":""},{"location":"CHANGELOG/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>more info correctly expands (#1628) (6ead9b5)</li> <li>remove max length for checkboxgroup and checkboxtree label (#1620) (0e36a56)</li> </ul>"},{"location":"CHANGELOG/#features_10","title":"Features","text":"<ul> <li>skip help links in inputs.conf.spec (#1630) (ca88890)</li> <li>TextArea: remove clear button (#1635) (3abec93)</li> </ul>"},{"location":"CHANGELOG/#reverts_2","title":"Reverts","text":"<ul> <li>\u201cfeat: skip help links in inputs.conf.spec\u201d (#1632) (c67de92)</li> <li>remove stretched out icons (#1647) (7eb10df)</li> </ul>"},{"location":"CHANGELOG/#5590-2025-03-04","title":"5.59.0 (2025-03-04)","text":""},{"location":"CHANGELOG/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>validation: correct regexp validation for empty strings (#1592) (0759afe)</li> <li>validation: correctly display error in save validator fnc (#1602) (f1b1068)</li> <li>validation: correctly validate empty not required data (#1606) (7f8c08a)</li> </ul>"},{"location":"CHANGELOG/#features_11","title":"Features","text":"<ul> <li>modals: provide support for custom headers (#1572) (13aeae6)</li> </ul>"},{"location":"CHANGELOG/#5581-2025-02-20","title":"5.58.1 (2025-02-20)","text":""},{"location":"CHANGELOG/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>build if \u201cconf\u201d param specified for a configuration tab (#1590) (6b069ec)</li> </ul>"},{"location":"CHANGELOG/#5580-2025-02-18","title":"5.58.0 (2025-02-18)","text":""},{"location":"CHANGELOG/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>correctly display status in more info (#1576) (0deb79f)</li> <li>hideForPlatform: hide inputs when in groups menu (#1564) (3deefbb)</li> </ul>"},{"location":"CHANGELOG/#features_12","title":"Features","text":"<ul> <li>add default values of entities to inputs.conf (#1530) (d86342a)</li> <li>add support for custom REST handlers without UI in openapi.json (#1529) (e4b1f61)</li> <li>add support for custom REST handlers without UI in web.conf and restmap.conf (#1532) (09fe1e6)</li> <li>allow same service name across different inputs (#1413) (f121dd4), closes #1369</li> <li>helplink: links as part of longer text, new lines (#1561) (28263da)</li> <li>help: message with links and new lines (#1562) (88c41f0)</li> <li>make configuration page as optional (#1521) (0f67e30)</li> <li>provide support for .conf-only add-ons (#1546) (d814388)</li> </ul>"},{"location":"CHANGELOG/#5572-2025-02-14","title":"5.57.2 (2025-02-14)","text":""},{"location":"CHANGELOG/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>pass os-dependentLibraries.python_version as is to pip (0ba94bf)</li> <li>pass os-dependentLibraries.python_version as is to pip (#1578) (441e2fb)</li> </ul>"},{"location":"CHANGELOG/#5571-2025-02-04","title":"5.57.1 (2025-02-04)","text":""},{"location":"CHANGELOG/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>a11y: connect labels to inputs (#1542) (5335782)</li> <li>do not require calls of _reload endpoint (#1547) (a39c8c0)</li> </ul>"},{"location":"CHANGELOG/#5570-2025-01-22","title":"5.57.0 (2025-01-22)","text":""},{"location":"CHANGELOG/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>prevent unnecessary updates to the globalConfig file (#1535) (b541693), closes #1519</li> </ul>"},{"location":"CHANGELOG/#features_13","title":"Features","text":"<ul> <li>add CheckboxTree component (#1495) (1d55507)</li> <li>dashboard: zero line when no data found (#1480) (d1cad41)</li> </ul>"},{"location":"CHANGELOG/#reverts_3","title":"Reverts","text":"<ul> <li>\u201cci: rollback splunk-appinspect to 3.8.1\u201d (#1536) (0e97dfd), closes splunk/addonfactory-ucc-generator#1527</li> </ul>"},{"location":"CHANGELOG/#5560-2025-01-08","title":"5.56.0 (2025-01-08)","text":""},{"location":"CHANGELOG/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>rest handler template code for oauth (#1499) (78e5d7a)</li> </ul>"},{"location":"CHANGELOG/#features_14","title":"Features","text":"<ul> <li>add basic icons (#1498) (b07657d)</li> <li>add default validators (#1507) (cdd3f31)</li> <li>add option to disable inputs on creation (#1510) (df3c5a5)</li> <li>add proxy component (#1444) (2241363)</li> <li>do not add _uccVersion to the root globalConfig file (#1519) (0beab3b)</li> <li>schema: schema changes for custom REST endpoints (#1509) (451111a)</li> <li>support for Python 3.13 (#1517) (3020cfd)</li> </ul>"},{"location":"CHANGELOG/#5550-2024-12-10","title":"5.55.0 (2024-12-10)","text":""},{"location":"CHANGELOG/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>group elements use all functionalities (#1500) (01c88aa)</li> </ul>"},{"location":"CHANGELOG/#features_15","title":"Features","text":"<ul> <li>add author during init (#1483) (a7c36ff)</li> <li>modifyFieldsOnValue: enable field to modify itself (#1494) (3fd0501)</li> </ul>"},{"location":"CHANGELOG/#5540-2024-11-27","title":"5.54.0 (2024-11-27)","text":""},{"location":"CHANGELOG/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>allow packaging from 23.0 (#1484) (29accc4)</li> <li>display newest information in row more info section (#1445) (2b34c6b), closes #1410</li> <li>required star visibility when using modify prop (#1489) (e1fe2b0)</li> <li>support Windows when checking library version (#1482) (db17b5c)</li> </ul>"},{"location":"CHANGELOG/#features_16","title":"Features","text":"<ul> <li>add license during init command (#1475) (471294a)</li> <li>confirmation modal when activate/deactivate single input (#1421) (34c8ec2)</li> <li>do not create <code>__pycache__</code> in lib dir (#1469) (ad58e50)</li> <li>inputs: show input services status count (#1430) (2574451)</li> </ul>"},{"location":"CHANGELOG/#5532-2024-11-21","title":"5.53.2 (2024-11-21)","text":""},{"location":"CHANGELOG/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>api: cancelled requests don\u2019t emit user facing errors (#1472) (0970441)</li> </ul>"},{"location":"CHANGELOG/#5531-2024-11-18","title":"5.53.1 (2024-11-18)","text":""},{"location":"CHANGELOG/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>select: fetching options when some dependency is null (#1463) (feb9bdf)</li> </ul>"},{"location":"CHANGELOG/#5530-2024-11-13","title":"5.53.0 (2024-11-13)","text":""},{"location":"CHANGELOG/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>Dropdown: fix showing selected option when value is numeric (#1439) (9e7394a)</li> <li>generate oauth authentication fields for OpenAPI integration (#1425) (beb561b)</li> <li>table: custom mapping for values in Status column (#1451) (4721738)</li> </ul>"},{"location":"CHANGELOG/#features_17","title":"Features","text":"<ul> <li>add ability to provide custom pip flags (#1447) (718c897)</li> <li>add grouping to configuration page (#1432) (b94b228)</li> <li>deprecate .uccignore and upgrade additional_package (#1415) (f6dd96f)</li> </ul>"},{"location":"CHANGELOG/#5520-2024-10-30","title":"5.52.0 (2024-10-30)","text":""},{"location":"CHANGELOG/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>generate basic authentication fields for OpenAPI integration (#1407) (584b832)</li> <li>remove support for the \u201cenable\u201d action in table inputs (#1386) (26a4bb9)</li> </ul>"},{"location":"CHANGELOG/#features_18","title":"Features","text":"<ul> <li>print warning when entity does not have validators (#1409) (ad12cea)</li> <li>require splunktaucclib 6.4.0 during the build phase (#1412) (0d20269)</li> </ul>"},{"location":"CHANGELOG/#5511-2024-10-22","title":"5.51.1 (2024-10-22)","text":""},{"location":"CHANGELOG/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>CustomControl: change order of function parameters (#1392) (c3e82f9)</li> </ul>"},{"location":"CHANGELOG/#5510-2024-10-16","title":"5.51.0 (2024-10-16)","text":""},{"location":"CHANGELOG/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>follow SemVer guidelines for version in globalConfig (#1351) (199c05e)</li> </ul>"},{"location":"CHANGELOG/#features_19","title":"Features","text":"<ul> <li>allow validators for oauth fields (#1355) (ef3b6a9)</li> <li>hide elements for cloud or enterprise (#1364) (21aa28f)</li> <li>modal implementation for data ingestion table (#1244) (8246870)</li> <li>server side validation of name field based on globalConfig (#1362) (4e43c27)</li> <li>support CRON as interval (#1346) (8c5a981)</li> </ul>"},{"location":"CHANGELOG/#5501-2024-10-04","title":"5.50.1 (2024-10-04)","text":""},{"location":"CHANGELOG/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>use title for app conf (#1356) (adfd987)</li> </ul>"},{"location":"CHANGELOG/#5500-2024-10-02","title":"5.50.0 (2024-10-02)","text":""},{"location":"CHANGELOG/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>boolean values are converted to 1 and 0 only on configuration page (#1347) (d0d0c11)</li> <li>custom row loading on many tabs (#1336) (f124b5e)</li> <li>globalConfig: update name and rest root convention (#1335) (bdfa8c3), closes #1333</li> </ul>"},{"location":"CHANGELOG/#features_20","title":"Features","text":"<ul> <li>dashboard: add possibility to display CRITICAL log lvl in dashboard (#1337) (d937986)</li> <li>option for configuring is_visible from globalConfig.json (#1345) (04c80e3), closes #1334</li> <li>provide support for Python 3.9 for OS-dependent libraries (#1338) (5cfc889)</li> <li>restructure conf and spec file generation (#1328) (bc6a36b)</li> <li>restructure html file generation (#1311) (ed2c2bd)</li> <li>restructure xml file generation (#1312) (a171c8d)</li> </ul>"},{"location":"CHANGELOG/#5490-2024-08-21","title":"5.49.0 (2024-08-21)","text":""},{"location":"CHANGELOG/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>add basic textarea in alerts (50bd0e1)</li> <li>disallow alerts textarea to has option param (f7605df)</li> </ul>"},{"location":"CHANGELOG/#features_21","title":"Features","text":"<ul> <li>add basic textarea field to alerts (#1308) (cc1706f)</li> <li>add new index entity (#1313) (df77f51)</li> <li>add required as modifiable property (#1309) (a94cdc9)</li> <li>default value for custom mapping (#1304) (8c5a3a6), closes #1282</li> <li>use log_level in dashboard queries (#1289) (3fc86c3)</li> </ul>"},{"location":"CHANGELOG/#5482-2024-07-25","title":"5.48.2 (2024-07-25)","text":""},{"location":"CHANGELOG/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>inputs: fix parsing \u20180\u2019 as false for readonlyField and hideField (#1290) (ec676a1)</li> <li>NumberValidator: Number validators allows integer value (#1293) (dbd287c), closes #876</li> </ul>"},{"location":"CHANGELOG/#5481-2024-07-11","title":"5.48.1 (2024-07-11)","text":""},{"location":"CHANGELOG/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>schema for mapping custom api value (#1281) (571bef7)</li> </ul>"},{"location":"CHANGELOG/#5480-2024-07-10","title":"5.48.0 (2024-07-10)","text":""},{"location":"CHANGELOG/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>allow using globalConfig validator regardless of the default encoding (#1276) (480798f)</li> <li>correctly map truly and falsy values for inputs (#1270) (2b8c2c2)</li> </ul>"},{"location":"CHANGELOG/#features_22","title":"Features","text":"<ul> <li>theme: add dark theme support (#1257) (8bd5d33)</li> <li>inputs: add hidable or readonly inputs (#1258) (8c70476)</li> <li>remove placeholder option from globalConfig (#1256) (044c2d0)</li> <li>update add-on generated by ucc-gen init command (#1263) (76e8e52)</li> <li>select entity: allow custom mapping for values (#1265) (202f046)</li> </ul>"},{"location":"CHANGELOG/#5470-2024-06-25","title":"5.47.0 (2024-06-25)","text":""},{"location":"CHANGELOG/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>allow 2 blank lines in markdown (3832c3c)</li> </ul>"},{"location":"CHANGELOG/#features_23","title":"Features","text":"<ul> <li>custom_row: pass default row value to custom row component (#1218) (1fdebfa)</li> <li>dashboard: add custom filtering options for the license_usage file (#1247) (3e8d864)</li> <li>dashboard: add globalconfig configuration for custom dashboard tab name (#1239) (fce1df4)</li> </ul>"},{"location":"CHANGELOG/#5460-2024-06-13","title":"5.46.0 (2024-06-13)","text":""},{"location":"CHANGELOG/#bug-fixes_35","title":"Bug Fixes","text":"<ul> <li>oauth: set loglevel in oauth rh template to use log level set in add-on (#1227) (3b7b9e1)</li> </ul>"},{"location":"CHANGELOG/#features_24","title":"Features","text":"<ul> <li>allow developers to choose the default view (#1197) (21610e2), closes #1041</li> <li>configuration: display UCC version (#1221) (a63d8b3)</li> <li>dashboard: add error categories to chart and event table in the error panel (#1225) (cd2907a)</li> <li>dashboard: add resource monitoring tab and information about input status (#1209) (e8acfd9)</li> <li>globalConfig file passed through <code>--config</code> accepts only JSON or YAML formats (#1216) (f661475)</li> <li>sort table by visible text (#1205) (8561e0f)</li> </ul>"},{"location":"CHANGELOG/#5450-2024-05-28","title":"5.45.0 (2024-05-28)","text":""},{"location":"CHANGELOG/#bug-fixes_36","title":"Bug Fixes","text":"<ul> <li>explicitly pass required field (#1202) (a0ddbf8)</li> </ul>"},{"location":"CHANGELOG/#features_25","title":"Features","text":"<ul> <li>add built-in interval entity (#1179) (10ae8e3)</li> <li>add flag to add UI source map files during the build process (#1183) (6e4944b)</li> <li>Improve input helper module init scripts (#1204) (9abb12c)</li> </ul>"},{"location":"CHANGELOG/#5440-2024-05-14","title":"5.44.0 (2024-05-14)","text":""},{"location":"CHANGELOG/#bug-fixes_37","title":"Bug Fixes","text":"<ul> <li>alert: graceful handle for usage of activeResponse (#1185) (c43f38f)</li> <li>style: fix label overflow issue for \u2018OpenAPI.json\u2019 button in configuration page (#1181) (917f9c9)</li> </ul>"},{"location":"CHANGELOG/#features_26","title":"Features","text":"<ul> <li>auto-gen: notify users for existing features of UCC framework  (#1177) (305dbbd)</li> <li>file input component, supports base64 encoding (#1167) (46417c2)</li> <li>helper modules for modular inputs (#1126) (fde1a33), closes #331</li> <li>search: relocate button from dropdown to action column In input page (#1148) (696e5a9)</li> </ul>"},{"location":"CHANGELOG/#5430-2024-04-30","title":"5.43.0 (2024-04-30)","text":""},{"location":"CHANGELOG/#bug-fixes_38","title":"Bug Fixes","text":"<ul> <li>do not migrate a logging tab when defaultValue is not set (#1157) (5335f5b)</li> </ul>"},{"location":"CHANGELOG/#features_27","title":"Features","text":"<ul> <li>improve front for dashboard page (#1164) (efc904f)</li> </ul>"},{"location":"CHANGELOG/#5421-2024-04-22","title":"5.42.1 (2024-04-22)","text":""},{"location":"CHANGELOG/#bug-fixes_39","title":"Bug Fixes","text":"<ul> <li>dashboard: pin @splunk/react-ui version (#1158) (0e9a479)</li> </ul>"},{"location":"CHANGELOG/#5420-2024-04-19","title":"5.42.0 (2024-04-19)","text":""},{"location":"CHANGELOG/#bug-fixes_40","title":"Bug Fixes","text":"<ul> <li>add customScript for alert action (#1143) (12d8392)</li> <li>add schema version update for alert action (#1150) (94f3070)</li> <li>update idna to 3.7 (#1146) (ece8f65)</li> </ul>"},{"location":"CHANGELOG/#features_28","title":"Features","text":"<ul> <li>adaptiveResponse: add verbose details for AR alert action (#1135) (b19d678)</li> <li>add iconFileName for alert action (#1134) (5a76706), closes #1105</li> <li>CheckboxGroup: add support for required field (#1131) (e101aa3)</li> <li>create a playground for global config (#1144) (791a6dc)</li> <li>enhanced monitoring dashboard (#1125) (2d2b143)</li> </ul>"},{"location":"CHANGELOG/#5410-2024-04-02","title":"5.41.0 (2024-04-02)","text":""},{"location":"CHANGELOG/#bug-fixes_41","title":"Bug Fixes","text":"<ul> <li>storybook: fix errors related to uncaught network requests (#1117) (ee79967)</li> </ul>"},{"location":"CHANGELOG/#features_29","title":"Features","text":"<ul> <li>code: add custom validators for account configuration (#1115) (7e77067), closes #520</li> </ul>"},{"location":"CHANGELOG/#5400-2024-03-21","title":"5.40.0 (2024-03-21)","text":""},{"location":"CHANGELOG/#bug-fixes_42","title":"Bug Fixes","text":"<ul> <li>allow using only one Configuration tab (#1106) (f6a7fbd)</li> <li>custom value passed to component (#1104) (729f661)</li> </ul>"},{"location":"CHANGELOG/#features_30","title":"Features","text":"<ul> <li>logging component (#1107) (7a825cb)</li> <li>schema changes for LoggingTab (#1099) (afea13c)</li> </ul>"},{"location":"CHANGELOG/#5391-2024-03-05","title":"5.39.1 (2024-03-05)","text":""},{"location":"CHANGELOG/#bug-fixes_43","title":"Bug Fixes","text":"<ul> <li>modifyFieldsOnValue schema and tests (#1087) (4629aa1)</li> </ul>"},{"location":"CHANGELOG/#5390-2024-02-20","title":"5.39.0 (2024-02-20)","text":""},{"location":"CHANGELOG/#bug-fixes_44","title":"Bug Fixes","text":"<ul> <li>a11y: associate labels with inputs (#1055) (a880c45)</li> <li>Add page for proxy configuration (#1057) (a76c0c2)</li> <li>return back div wrapper that shifts layout (#1061) (c6a42c6), closes #1055</li> </ul>"},{"location":"CHANGELOG/#features_31","title":"Features","text":"<ul> <li>add async on save to entity page (#1080) (abe8f96)</li> <li>add possibility to use async onSave method (#1079) (7dd6640)</li> <li>ADDON-57381 hide implementation details from user-facing error messages (#987) (5467ed9)</li> <li>modify fields on value (#1066) (1cd25b5)</li> </ul>"},{"location":"CHANGELOG/#5380-2024-02-06","title":"5.38.0 (2024-02-06)","text":""},{"location":"CHANGELOG/#bug-fixes_45","title":"Bug Fixes","text":"<ul> <li>EntityModal: prevent Enter from submitting the form in Modal window (#1047) (b7f179a), closes #875</li> <li>OpenAPI schema generator fixes for when multiple inputs are defined (#1016) (332db43)</li> </ul>"},{"location":"CHANGELOG/#features_32","title":"Features","text":"<ul> <li>add UCC version to globalConfig (#984) (e1229b4)</li> <li>ADDON-67533 implement support for oauth autorize and token urls (#1009) (aada373)</li> <li>allow wildcards in .uccignore file (#1012) (04b847f), closes #1011</li> <li>change avg() to sum() in PANEL_EVENTS_INGESTED_BY_SOURCETYPE_TEMPLATE panel (#1028) (c738634)</li> <li>customizing version of pip in build, add legacy resolver as optional (#1035) (751990c)</li> <li>default warning hidden after any input (#1024) (d0d69ee)</li> </ul>"},{"location":"CHANGELOG/#5370-2024-01-31","title":"5.37.0 (2024-01-31)","text":""},{"location":"CHANGELOG/#features_33","title":"Features","text":"<ul> <li>checkboxGroup: correctly parsing values with spaces (#1034) (73358ee)</li> </ul>"},{"location":"CHANGELOG/#5362-2024-01-12","title":"5.36.2 (2024-01-12)","text":""},{"location":"CHANGELOG/#bug-fixes_46","title":"Bug Fixes","text":"<ul> <li>table and references (29e69bb)</li> </ul>"},{"location":"CHANGELOG/#5361-2024-01-12","title":"5.36.1 (2024-01-12)","text":""},{"location":"CHANGELOG/#bug-fixes_47","title":"Bug Fixes","text":"<ul> <li>update jinja2 to v3.1.3 to fix CVE (#1017) (25b652f)</li> </ul>"},{"location":"CHANGELOG/#5360-2024-01-10","title":"5.36.0 (2024-01-10)","text":""},{"location":"CHANGELOG/#bug-fixes_48","title":"Bug Fixes","text":"<ul> <li>enable for entities and add it for oauth (#964) (21bb7f8)</li> <li>no-compile missing from os-dependentLibraries packages (#999) (537d450)</li> <li>pass disabled props for radio bar component (#997) (a4eb6f9)</li> <li>typo in the error message (#1004) (312c8be)</li> <li>update axios along with follow redirect (#1003) (7bc5a35)</li> </ul>"},{"location":"CHANGELOG/#features_34","title":"Features","text":"<ul> <li>add support for custom dashboards (#979) (7fe3d58)</li> <li>ADDON-67093 add custom warning message for forms (#970) (64daa77)</li> <li>buildtime version check for os-dependentLibraries (#981) (cbe923d)</li> <li>custom sub description for pages - ADDON-67014 (#982) (b3a32c5)</li> <li>require variable only when displayed ADDON-67013 (#985) (6873164)</li> </ul>"},{"location":"CHANGELOG/#5351-2023-12-14","title":"5.35.1 (2023-12-14)","text":""},{"location":"CHANGELOG/#bug-fixes_49","title":"Bug Fixes","text":"<ul> <li>add missing colorama dependency (#973) (f17d47d)</li> <li>add missing colorama import (fbb71bd)</li> </ul>"},{"location":"CHANGELOG/#5350-2023-12-13","title":"5.35.0 (2023-12-13)","text":""},{"location":"CHANGELOG/#bug-fixes_50","title":"Bug Fixes","text":"<ul> <li>add tests and auth_access_token to schema (#969) (6e1e743)</li> </ul>"},{"location":"CHANGELOG/#features_35","title":"Features","text":"<ul> <li>add support for downloading os-dependent libraries (#963) (6cfb5a3)</li> <li>build commands produces detailed output of what happened (#927) (3fad1a2)</li> </ul>"},{"location":"CHANGELOG/#5341-2023-12-06","title":"5.34.1 (2023-12-06)","text":""},{"location":"CHANGELOG/#bug-fixes_51","title":"Bug Fixes","text":"<ul> <li>add control group wrapper max width to 750px (#966) (0213c45)</li> </ul>"},{"location":"CHANGELOG/#5340-2023-11-28","title":"5.34.0 (2023-11-28)","text":""},{"location":"CHANGELOG/#bug-fixes_52","title":"Bug Fixes","text":"<ul> <li>change location of openapi.json generated file (#958) (e0d38b7)</li> <li>globalConfig validator respects numbers in values in autoCompleteFields (#957) (1716494)</li> <li>revert to static width of modal (#955) (aec869f)</li> <li>update urllib3 (#922) (11ff4c6)</li> </ul>"},{"location":"CHANGELOG/#features_36","title":"Features","text":"<ul> <li>add optional label for helpLink component (#939) (e3a9b40)</li> <li>add support for disableonEdit in oauth (#953) (d948128)</li> <li>additional validations for the groups feature (#926) (29c1251)</li> <li>ADDON-64844 better spacing in modal (#935) (b385759)</li> <li>ADDON-65107 implement download button for openapi (#932) (f71d7ec)</li> <li>schema.json: make entity schemas more specific (#938) (24c667b)</li> </ul>"},{"location":"CHANGELOG/#5330-2023-11-14","title":"5.33.0 (2023-11-14)","text":""},{"location":"CHANGELOG/#features_37","title":"Features","text":"<ul> <li>release v5.33.0 (#942) (c5968d2), closes #906 #922 #916 #888</li> </ul>"},{"location":"CHANGELOG/#5320-2023-10-13","title":"5.32.0 (2023-10-13)","text":""},{"location":"CHANGELOG/#features_38","title":"Features","text":"<ul> <li>v5.32.0 release (#907) (f691ce0), closes #897 #898 #889 #899 #901 #895</li> </ul>"},{"location":"CHANGELOG/#5311-2023-10-06","title":"5.31.1 (2023-10-06)","text":""},{"location":"CHANGELOG/#bug-fixes_53","title":"Bug Fixes","text":"<ul> <li>include UCC UI into UCC during the release step (#891) (5207dca), closes #890 #890</li> </ul>"},{"location":"CHANGELOG/#5311-beta1-2023-10-06","title":"5.31.1-beta.1 (2023-10-06)","text":""},{"location":"CHANGELOG/#bug-fixes_54","title":"Bug Fixes","text":"<ul> <li>include UCC UI into UCC during the release step (#890) (76dd699)</li> </ul>"},{"location":"CHANGELOG/#5310-2023-10-05","title":"5.31.0 (2023-10-05)","text":"<p>It\u2019s a technical release to conclude the migration of UCC UI into this repository and we also happen to release 1 feature.</p>"},{"location":"CHANGELOG/#features_39","title":"Features","text":"<ul> <li>\u201cEnable all\u201d / \u201cDisable all\u201d buttons for Inputs page (https://github.com/splunk/addonfactory-ucc-base-ui/pull/437 nad https://github.com/splunk/addonfactory-ucc-base-ui/pull/443)</li> </ul>"},{"location":"CHANGELOG/#5300-2023-10-01","title":"5.30.0 (2023-10-01)","text":""},{"location":"CHANGELOG/#features_40","title":"Features","text":"<ul> <li>release v5.30.0 (#848) (fb93601), closes #846 #847 #849 #850</li> </ul>"},{"location":"CHANGELOG/#5290-2023-09-22","title":"5.29.0 (2023-09-22)","text":""},{"location":"CHANGELOG/#features_41","title":"Features","text":"<ul> <li>release v5.29.0 (#840) (c874f86), closes #835 #836 #838 #839</li> </ul>"},{"location":"CHANGELOG/#5286-2023-09-13","title":"5.28.6 (2023-09-13)","text":""},{"location":"CHANGELOG/#bug-fixes_55","title":"Bug Fixes","text":"<ul> <li>update UCC UI to v1.29.2 (#829) (bffdc74)</li> </ul>"},{"location":"CHANGELOG/#5285-2023-09-06","title":"5.28.5 (2023-09-06)","text":""},{"location":"CHANGELOG/#bug-fixes_56","title":"Bug Fixes","text":"<ul> <li>update pip upgrade command (#825) (b439296), closes #821</li> </ul>"},{"location":"CHANGELOG/#5284-2023-07-19","title":"5.28.4 (2023-07-19)","text":""},{"location":"CHANGELOG/#bug-fixes_57","title":"Bug Fixes","text":"<ul> <li>add-on without globalConfig file should not be visible (#811) (b2017f6)</li> </ul>"},{"location":"CHANGELOG/#5283-2023-07-17","title":"5.28.3 (2023-07-17)","text":""},{"location":"CHANGELOG/#bug-fixes_58","title":"Bug Fixes","text":"<ul> <li>resolve failing ucc-gen by pinning pip version (#809) (33676a9), closes #808</li> </ul>"},{"location":"CHANGELOG/#5282-2023-07-07","title":"5.28.2 (2023-07-07)","text":""},{"location":"CHANGELOG/#bug-fixes_59","title":"Bug Fixes","text":"<ul> <li>input.template should not render interval field (#799) (6375de1)</li> </ul>"},{"location":"CHANGELOG/#5281-2023-06-22","title":"5.28.1 (2023-06-22)","text":""},{"location":"CHANGELOG/#bug-fixes_60","title":"Bug Fixes","text":"<ul> <li>typo in UCC UI v1.28.0 (#791) (7bb4530)</li> </ul>"},{"location":"CHANGELOG/#5280-2023-06-22","title":"5.28.0 (2023-06-22)","text":""},{"location":"CHANGELOG/#features_42","title":"Features","text":"<ul> <li>added support for subTitle field in service (#790) (378f362)</li> </ul>"},{"location":"CHANGELOG/#5273-2023-06-06","title":"5.27.3 (2023-06-06)","text":""},{"location":"CHANGELOG/#bug-fixes_61","title":"Bug Fixes","text":"<ul> <li>change modular input template according to globalConfig file (#787) (24c8658)</li> </ul>"},{"location":"CHANGELOG/#5272-2023-06-02","title":"5.27.2 (2023-06-02)","text":""},{"location":"CHANGELOG/#bug-fixes_62","title":"Bug Fixes","text":"<ul> <li>update UCC UI to v1.27.1 (#785) (ce25019)</li> </ul>"},{"location":"CHANGELOG/#5271-2023-05-26","title":"5.27.1 (2023-05-26)","text":""},{"location":"CHANGELOG/#bug-fixes_63","title":"Bug Fixes","text":"<ul> <li>require requests 2.31.0 and urllib3 &lt; 2 (#783) (7f4e778)</li> </ul>"},{"location":"CHANGELOG/#5270-2023-05-17","title":"5.27.0 (2023-05-17)","text":""},{"location":"CHANGELOG/#features_43","title":"Features","text":"<ul> <li>release v5.27.0 (#765) (5b55833), closes #749 #750 #751 #752 #753 #754 /dev.splunk.com/enterprise/reference/packagingtoolkit/pkgtoolkitappmanifest/#JSON-schema-200 #755</li> </ul>"},{"location":"CHANGELOG/#5260-2023-05-02","title":"5.26.0 (2023-05-02)","text":""},{"location":"CHANGELOG/#features_44","title":"Features","text":"<ul> <li>create openapi such way that generated client code allows to update configuration and inputs (#740) (c412a60)</li> <li>GET methods and responses allow to get data (#742) (6fe35cd)</li> </ul>"},{"location":"CHANGELOG/#5250-2023-04-18","title":"5.25.0 (2023-04-18)","text":""},{"location":"CHANGELOG/#features_45","title":"Features","text":"<ul> <li>release v5.25.0 (#733) (6b3e649), closes #718 #719 #722 #723 #724 #726 #727 #725 #728 #734 #735</li> </ul>"},{"location":"CHANGELOG/#5240-2023-04-04","title":"5.24.0 (2023-04-04)","text":""},{"location":"CHANGELOG/#features_46","title":"Features","text":"<ul> <li>release v5.24.0 (#713) (e5bc2f1), closes #709 #710 #711 #712 #714</li> </ul>"},{"location":"CHANGELOG/#5232-2023-03-23","title":"5.23.2 (2023-03-23)","text":""},{"location":"CHANGELOG/#bug-fixes_64","title":"Bug Fixes","text":"<ul> <li>move mkdocs-material to dev dependency (#707) (504dbfa)</li> </ul>"},{"location":"CHANGELOG/#5231-2023-03-20","title":"5.23.1 (2023-03-20)","text":""},{"location":"CHANGELOG/#bug-fixes_65","title":"Bug Fixes","text":"<ul> <li>dropdownlist_splunk_search does not require options (#706) (ff9e50b)</li> </ul>"},{"location":"CHANGELOG/#5230-2023-03-20","title":"5.23.0 (2023-03-20)","text":""},{"location":"CHANGELOG/#features_47","title":"Features","text":"<ul> <li>release v5.23.0 (#705) (f8211f6), closes #699 #700 #703 #704 #702 #701</li> </ul>"},{"location":"CHANGELOG/#5220-2023-03-09","title":"5.22.0 (2023-03-09)","text":""},{"location":"CHANGELOG/#features_48","title":"Features","text":"<ul> <li>v5.22.0 release (#678) (9efc0c2), closes #662 #663 #664 #665 #666 #667 #668 #669 #670 #672 #673 #671 #674 #677 #679 #680 #681 #682 #683 #684 #685 #686 #688 #689 #687 #690 #691 #693 #694 #695 #692 #697</li> </ul>"},{"location":"CHANGELOG/#5210-2023-02-22","title":"5.21.0 (2023-02-22)","text":""},{"location":"CHANGELOG/#features_49","title":"Features","text":"<ul> <li>release v5.21.0 (#659) (fdd7164), closes #656 #658 #657 #650</li> </ul>"},{"location":"CHANGELOG/#5200-2023-02-13","title":"5.20.0 (2023-02-13)","text":""},{"location":"CHANGELOG/#features_50","title":"Features","text":"<ul> <li>release v5.20.0 (#634) (e2a389d), closes #624 #626 #615 #618 #612 #629 #632 #633</li> <li>trigger v5.20.0 release (#635) (d07f487)</li> </ul>"},{"location":"CHANGELOG/#5190-2023-01-03","title":"5.19.0 (2023-01-03)","text":""},{"location":"CHANGELOG/#features_51","title":"Features","text":"<ul> <li>release v5.19.0 (#601) (2dc1ae1), closes #593 #594 #595 /github.com/splunk/addonfactory-ucc-base-ui/blob/283d5abcf8f462ac10de876464bc1719fd19ff90/src/main/webapp/util/uccConfigurationValidators.js#L170-L184 #584</li> </ul>"},{"location":"CHANGELOG/#5180-2022-12-12","title":"5.18.0 (2022-12-12)","text":""},{"location":"CHANGELOG/#features_52","title":"Features","text":"<ul> <li>v5.18.0 release (#583) (312839e)</li> </ul>"},{"location":"CHANGELOG/#5171-2022-11-30","title":"5.17.1 (2022-11-30)","text":""},{"location":"CHANGELOG/#bug-fixes_66","title":"Bug Fixes","text":"<ul> <li>update UCC UI to v1.15.1 (#578) (173a8f2)</li> </ul>"},{"location":"CHANGELOG/#5170-2022-11-29","title":"5.17.0 (2022-11-29)","text":""},{"location":"CHANGELOG/#features_53","title":"Features","text":"<ul> <li>update UCC UI to 1.15.0 (#576) (a2788a2)</li> </ul>"},{"location":"CHANGELOG/#5161-2022-11-28","title":"5.16.1 (2022-11-28)","text":""},{"location":"CHANGELOG/#bug-fixes_67","title":"Bug Fixes","text":"<ul> <li>update UCC UI to 1.14.2 (#573) (20d2a5c)</li> </ul>"},{"location":"CHANGELOG/#5160-2022-11-23","title":"5.16.0 (2022-11-23)","text":""},{"location":"CHANGELOG/#features_54","title":"Features","text":"<ul> <li>update UCC UI to v1.14.1 (#563) (9d9cb86)</li> </ul>"},{"location":"CHANGELOG/#5151-2022-11-09","title":"5.15.1 (2022-11-09)","text":""},{"location":"CHANGELOG/#bug-fixes_68","title":"Bug Fixes","text":"<ul> <li>build add-on if config param is present (536634a)</li> </ul>"},{"location":"CHANGELOG/#5150-2022-11-07","title":"5.15.0 (2022-11-07)","text":""},{"location":"CHANGELOG/#features_55","title":"Features","text":"<ul> <li>add validation for the splunktaucclib to be included (#549) (b7eacb6)</li> </ul>"},{"location":"CHANGELOG/#5142-2022-11-02","title":"5.14.2 (2022-11-02)","text":""},{"location":"CHANGELOG/#bug-fixes_69","title":"Bug Fixes","text":"<ul> <li>update UCC UI to v1.12.4 (#546) (65da70b)</li> </ul>"},{"location":"CHANGELOG/#5141-2022-10-18","title":"5.14.1 (2022-10-18)","text":""},{"location":"CHANGELOG/#bug-fixes_70","title":"Bug Fixes","text":"<ul> <li>code: ADDON-56381 Using the latest version of UCC UI (#540) (d760a31)</li> </ul>"},{"location":"CHANGELOG/#5140-2022-10-18","title":"5.14.0 (2022-10-18)","text":""},{"location":"CHANGELOG/#features_56","title":"Features","text":"<ul> <li>added support for YAML file (#536) (10eebaa)</li> </ul>"},{"location":"CHANGELOG/#5130-2022-08-02","title":"5.13.0 (2022-08-02)","text":""},{"location":"CHANGELOG/#features_57","title":"Features","text":"<ul> <li>add \u2013python-binary-name flag to specify Python name to install libraries (#485) (bc46170)</li> </ul>"},{"location":"CHANGELOG/#5120-2022-07-08","title":"5.12.0 (2022-07-08)","text":""},{"location":"CHANGELOG/#features_58","title":"Features","text":"<ul> <li>new version of UCC UI (#479) (db72816)</li> </ul>"},{"location":"CHANGELOG/#5110-2022-07-08","title":"5.11.0 (2022-07-08)","text":""},{"location":"CHANGELOG/#features_59","title":"Features","text":"<ul> <li>add sc_admin to default.meta (#477) (4298fa3)</li> </ul>"},{"location":"CHANGELOG/#5104-2022-07-04","title":"5.10.4 (2022-07-04)","text":""},{"location":"CHANGELOG/#bug-fixes_71","title":"Bug Fixes","text":"<ul> <li>better exception handling when could not get the version from git tags (#476) (2aafc09)</li> </ul>"},{"location":"CHANGELOG/#5103-2022-07-03","title":"5.10.3 (2022-07-03)","text":""},{"location":"CHANGELOG/#bug-fixes_72","title":"Bug Fixes","text":"<ul> <li>no crash if metadata folder exists (#474) (03aa2ae)</li> </ul>"},{"location":"CHANGELOG/#5102-2022-02-01","title":"5.10.2 (2022-02-01)","text":""},{"location":"CHANGELOG/#bug-fixes_73","title":"Bug Fixes","text":"<ul> <li>update ucc ui version to 1.9.1 (#418) (822361c)</li> </ul>"},{"location":"CHANGELOG/#5101-2021-11-29","title":"5.10.1 (2021-11-29)","text":""},{"location":"CHANGELOG/#bug-fixes_74","title":"Bug Fixes","text":"<ul> <li>remove generation of <code>expose:_splunkd_data</code> stanza in web.conf (df6441e), closes #303</li> </ul>"},{"location":"CHANGELOG/#5100-2021-11-16","title":"5.10.0 (2021-11-16)","text":""},{"location":"CHANGELOG/#features_60","title":"Features","text":"<ul> <li>migrate to separate conf-parser library (2ab9fe9)</li> </ul>"},{"location":"CHANGELOG/#590-2021-10-04","title":"5.9.0 (2021-10-04)","text":""},{"location":"CHANGELOG/#features_61","title":"Features","text":"<ul> <li>trigger v5.9.0 release (a01259c)</li> </ul>"},{"location":"CHANGELOG/#582-2021-08-18","title":"5.8.2 (2021-08-18)","text":""},{"location":"CHANGELOG/#bug-fixes_75","title":"Bug Fixes","text":"<ul> <li>add icon_path to each modular alert conf (c6828b9)</li> </ul>"},{"location":"CHANGELOG/#581-2021-08-17","title":"5.8.1 (2021-08-17)","text":""},{"location":"CHANGELOG/#bug-fixes_76","title":"Bug Fixes","text":"<ul> <li>alert html generation (7dc8860)</li> </ul>"},{"location":"CHANGELOG/#580-2021-08-16","title":"5.8.0 (2021-08-16)","text":""},{"location":"CHANGELOG/#features_62","title":"Features","text":"<ul> <li>delete <code>apiVersion</code> from globalConfig.json and bump schemaVersion (6c22704)</li> </ul>"},{"location":"CHANGELOG/#570-2021-08-14","title":"5.7.0 (2021-08-14)","text":""},{"location":"CHANGELOG/#bug-fixes_77","title":"Bug Fixes","text":"<ul> <li>Dont remove jsonschema metadata files (539d8f6)</li> <li>release (185dd15)</li> </ul>"},{"location":"CHANGELOG/#features_63","title":"Features","text":"<ul> <li>generate metadata/default.meta (629b248)</li> <li>python: retain dist info files (7c8616a)</li> </ul>"},{"location":"CHANGELOG/#562-2021-08-10","title":"5.6.2 (2021-08-10)","text":""},{"location":"CHANGELOG/#bug-fixes_78","title":"Bug Fixes","text":"<ul> <li>dump dunamai to 1.5.5 version (6cc76bd)</li> </ul>"},{"location":"CHANGELOG/#561-2021-08-09","title":"5.6.1 (2021-08-09)","text":""},{"location":"CHANGELOG/#bug-fixes_79","title":"Bug Fixes","text":"<ul> <li>do not ignore UCC UI folder (25cec26)</li> </ul>"},{"location":"CHANGELOG/#560-2021-08-09","title":"5.6.0 (2021-08-09)","text":""},{"location":"CHANGELOG/#bug-fixes_80","title":"Bug Fixes","text":"<ul> <li>update ucc ui version to 1.8.4 (2daa655)</li> </ul>"},{"location":"CHANGELOG/#features_64","title":"Features","text":"<ul> <li>remove splunktaucclib (661eb64)</li> </ul>"},{"location":"CHANGELOG/#558-2021-07-27","title":"5.5.8 (2021-07-27)","text":""},{"location":"CHANGELOG/#bug-fixes_81","title":"Bug Fixes","text":"<ul> <li>splunktaucclib update (26eb068)</li> </ul>"},{"location":"CHANGELOG/#557-2021-07-26","title":"5.5.7 (2021-07-26)","text":""},{"location":"CHANGELOG/#bug-fixes_82","title":"Bug Fixes","text":"<ul> <li>remove non-valid Python code (b7adf48)</li> </ul>"},{"location":"CHANGELOG/#556-2021-07-20","title":"5.5.6 (2021-07-20)","text":""},{"location":"CHANGELOG/#bug-fixes_83","title":"Bug Fixes","text":"<ul> <li>deps: bump jinja2 from 2.11.3 to 3.0.1 (#274) (1a736af)</li> </ul>"},{"location":"CHANGELOG/#555-2021-07-19","title":"5.5.5 (2021-07-19)","text":""},{"location":"CHANGELOG/#bug-fixes_84","title":"Bug Fixes","text":"<ul> <li>TABConfigParser.remove_section() is not working read() (8c82a45)</li> <li>update ucc ui version to 1.8.3 (49a89d5)</li> </ul>"},{"location":"CHANGELOG/#553-2021-07-12","title":"5.5.3 (2021-07-12)","text":""},{"location":"CHANGELOG/#bug-fixes_85","title":"Bug Fixes","text":"<ul> <li>validate that a configuration tab with table has field \u201cname\u201d (#261) (234f1e9)</li> </ul>"},{"location":"CHANGELOG/#552-2021-07-07","title":"5.5.2 (2021-07-07)","text":""},{"location":"CHANGELOG/#bug-fixes_86","title":"Bug Fixes","text":"<ul> <li>issue with indent function (#257) (898fdb4)</li> </ul>"},{"location":"CHANGELOG/#551-2021-07-07","title":"5.5.1 (2021-07-07)","text":""},{"location":"CHANGELOG/#bug-fixes_87","title":"Bug Fixes","text":"<ul> <li>broken import after modular alert code generation (#255) (a3138ec)</li> <li>remove unnecessary dependencies (6bd263f)</li> <li>update ucc ui version (e3e5cba)</li> <li>update ucc ui version to 1.7.7 (1f82472)</li> <li>update ucc ui version to 1.8.2 (300ca6a)</li> <li>update ucc version to 1.7.6 (2e47cc3)</li> <li>update ucc version to 1.8.1 (d7fa1c6)</li> </ul>"},{"location":"CHANGELOG/#features_65","title":"Features","text":"<ul> <li>support app.manifest file with comments (70eb38e), closes /github.com/splunk/appinspect/blob/fabd1387cf41e087edd86fb7f28e2f9e69a1467c/splunk_appinspect/checks/check_support_and_installation_standards.py#L169-L180</li> <li>update ucc ui version (cf04fa7)</li> </ul>"},{"location":"CHANGELOG/#531-2021-06-15","title":"5.3.1 (2021-06-15)","text":""},{"location":"CHANGELOG/#bug-fixes_88","title":"Bug Fixes","text":"<ul> <li>remove splunktalib as not used (#231) (757c260)</li> </ul>"},{"location":"CHANGELOG/#530-2021-06-14","title":"5.3.0 (2021-06-14)","text":""},{"location":"CHANGELOG/#bug-fixes_89","title":"Bug Fixes","text":"<ul> <li>update Splunk libraries to latest versions (#229) (1bddfd6)</li> </ul>"},{"location":"CHANGELOG/#features_66","title":"Features","text":"<ul> <li>pip causing app inspect failures and NOTICE (#224) (d83b687)</li> </ul>"},{"location":"CHANGELOG/#521-2021-06-13","title":"5.2.1 (2021-06-13)","text":""},{"location":"CHANGELOG/#bug-fixes_90","title":"Bug Fixes","text":"<ul> <li>switch to slim docker image (7bde41c)</li> </ul>"},{"location":"CHANGELOG/#520-2021-06-12","title":"5.2.0 (2021-06-12)","text":""},{"location":"CHANGELOG/#features_67","title":"Features","text":"<ul> <li>drop support for py2/py3 compatible libraries (#225) (29fafad)</li> </ul>"},{"location":"CHANGELOG/#510-2021-06-09","title":"5.1.0 (2021-06-09)","text":""},{"location":"CHANGELOG/#features_68","title":"Features","text":"<ul> <li>Include notice file in distribution (#220) (fdfdf2b)</li> <li>ucc as a library (#218) (7f06c29)</li> <li>update ucc ui version (df8687e)</li> </ul>"},{"location":"CHANGELOG/#503-2021-06-08","title":"5.0.3 (2021-06-08)","text":""},{"location":"CHANGELOG/#bug-fixes_91","title":"Bug Fixes","text":"<ul> <li>include schema and notice file in pip package (7b67c81)</li> <li>include schema and notice file in pip package (92d0ad6)</li> <li>quick fix for ta-version argument (e26e8bf)</li> <li>Replace Circle CI with Github actions (aa07fcf)</li> <li>support for ta-version argument (710452a)</li> <li>ucc-gen to replace token for redirect.xml (1128842)</li> <li>use defusedxml instead of xml library (c3fdfc0)</li> </ul>"},{"location":"CHANGELOG/#500-develop1-2021-05-31","title":"5.0.0-develop.1 (2021-05-31)","text":""},{"location":"CHANGELOG/#bug-fixes_92","title":"Bug Fixes","text":"<ul> <li>consume schema.json from ucc ui (6069ce2)</li> <li>update ucc ui version (1cf1d59)</li> </ul>"},{"location":"CHANGELOG/#features_69","title":"Features","text":"<ul> <li>migrated to splunk-ui (aab1012)</li> <li>migrated to splunk-ui (42b9a20)</li> <li>update splunktaucclib to 4.2.0 (be831af)</li> </ul>"},{"location":"CHANGELOG/#breaking-changes_1","title":"BREAKING CHANGES","text":"<ul> <li>Migrate UI to SplunkUI framework</li> <li>Migrate UI to SplunkUI framework</li> </ul>"},{"location":"CHANGELOG/#440-2021-04-14","title":"4.4.0 (2021-04-14)","text":""},{"location":"CHANGELOG/#bug-fixes_93","title":"Bug Fixes","text":"<ul> <li>add interationalization to added changes (cf70a0f)</li> <li>add missing react-toast-notifications dep (88a1ce9)</li> <li>commented oauth realated logic from ucc-gen temporarily (6d08509)</li> <li>error handling and migrated to functional component (3e2d15d)</li> <li>error handling in errorboundary (b1ed49b)</li> <li>filter issue in table (86fffbe)</li> <li>initial default tab query param (2d4d7dd)</li> <li>internationalization fixes and code deduplication (b41f33d)</li> <li>make minor modifications for form submit on single page form (1501401)</li> <li>minor fixes and comments (be8dabd)</li> <li>refactored table header as separate component (0c386de)</li> <li>remove temporary test change for error boundary (baa54e7)</li> <li>removed multiple calls to endpoint in tab navigation for configuration page, addded conditional rendering of moreInfo based on globalConfig and fixed single input type dropdown filter (f1c2545)</li> <li>routing history with query params (9c5cc2f)</li> <li>title in input and configuration page templates (6328fdf)</li> <li>ucc_ui_lib: asynchronous state updates for status toggle button (4e63041)</li> <li>update ucc ui version (31ac853)</li> <li>update ucc ui version (8b077dc)</li> <li>update ucc ui version (b6dc8b4)</li> <li>update ucc ui version (e340376)</li> <li>use primitive type in useEffect for query param updates to reduce executions (a4a0542)</li> </ul>"},{"location":"CHANGELOG/#features_70","title":"Features","text":"<ul> <li>add page style dialog and its routing (a475235)</li> <li>Added button for create new input (979b058)</li> <li>added configuration page integration for table and single page form (b7a4d50)</li> <li>Added Create Input  button in input_page (b2b3562)</li> <li>Added custom cell feature in the table and fixed sorting issue (3711846)</li> <li>Added error modal component (bbde4cf)</li> <li>Added localization in titles (24f663b)</li> <li>Added parsing and validation functionality for globalConfig.json file (e690000)</li> <li>added routing for record and tab name (748ab74)</li> <li>Added schemaGenerator.py file (be0b945)</li> <li>Added table component with actions button (f550769)</li> <li>build: Move ucc-ui-lib to a new repo (71db6b1)</li> <li>Custom row feature implemented (308d847)</li> <li>Data flow using react context api (ddfaf41)</li> <li>Fixed issue (887f419)</li> <li>Fixed prop type validation issue (b0643e6)</li> <li>Fixed the delete model issue (71743ae)</li> <li>Fixed typo (9d5d0ee)</li> <li>Fixed typo (3ce2363)</li> <li>Fixed typo (668d2a5)</li> <li>Form design changes (3f34bfa)</li> <li>formatted file (ec3c0a6)</li> <li>Implemented filter functionality in the table component (4a77545)</li> <li>Implemented styled component (503aeb4)</li> <li>Pagination component implemented (ab41e36)</li> <li>Refactored table component (4206ce3)</li> <li>Removed commented code (bbdda12)</li> <li>Removed id from custom table (2afdc83)</li> <li>Removed key (f80499d)</li> <li>Removed log line (1f51cb4)</li> <li>Removed logs (6763ef9)</li> <li>Removed logs (36476ac)</li> <li>Removed patch file (ef065dc)</li> <li>Resolved comments (5a6088b)</li> <li>Set configuration page to default (6b7150a)</li> <li>update splunktaucclib to 4.2.0 (be831af)</li> <li>Update the way to store data in the context (8d11e7d)</li> <li>update ucc ui version (d562bea)</li> <li>Updated custom cell file (0479106)</li> <li>Updated file name (8640413)</li> <li>Used i18n in custom cell (06d0f02)</li> <li>validate JSON configuration before generating build (0c80d62)</li> </ul>"},{"location":"CHANGELOG/#440-2021-04-14_1","title":"4.4.0 (2021-04-14)","text":""},{"location":"CHANGELOG/#bug-fixes_94","title":"Bug Fixes","text":"<ul> <li>add interationalization to added changes (cf70a0f)</li> <li>add missing react-toast-notifications dep (88a1ce9)</li> <li>commented oauth realated logic from ucc-gen temporarily (6d08509)</li> <li>error handling and migrated to functional component (3e2d15d)</li> <li>error handling in errorboundary (b1ed49b)</li> <li>filter issue in table (86fffbe)</li> <li>initial default tab query param (2d4d7dd)</li> <li>internationalization fixes and code deduplication (b41f33d)</li> <li>make minor modifications for form submit on single page form (1501401)</li> <li>minor fixes and comments (be8dabd)</li> <li>refactored table header as separate component (0c386de)</li> <li>remove temporary test change for error boundary (baa54e7)</li> <li>removed multiple calls to endpoint in tab navigation for configuration page, addded conditional rendering of moreInfo based on globalConfig and fixed single input type dropdown filter (f1c2545)</li> <li>routing history with query params (9c5cc2f)</li> <li>title in input and configuration page templates (6328fdf)</li> <li>ucc_ui_lib: asynchronous state updates for status toggle button (4e63041)</li> <li>update ucc ui version (8b077dc)</li> <li>update ucc ui version (b6dc8b4)</li> <li>update ucc ui version (e340376)</li> <li>use primitive type in useEffect for query param updates to reduce executions (a4a0542)</li> </ul>"},{"location":"CHANGELOG/#features_71","title":"Features","text":"<ul> <li>add page style dialog and its routing (a475235)</li> <li>Added button for create new input (979b058)</li> <li>added configuration page integration for table and single page form (b7a4d50)</li> <li>Added Create Input  button in input_page (b2b3562)</li> <li>Added custom cell feature in the table and fixed sorting issue (3711846)</li> <li>Added error modal component (bbde4cf)</li> <li>Added localization in titles (24f663b)</li> <li>Added parsing and validation functionality for globalConfig.json file (e690000)</li> <li>added routing for record and tab name (748ab74)</li> <li>Added schemaGenerator.py file (be0b945)</li> <li>Added table component with actions button (f550769)</li> <li>build: Move ucc-ui-lib to a new repo (71db6b1)</li> <li>Custom row feature implemented (308d847)</li> <li>Data flow using react context api (ddfaf41)</li> <li>Fixed issue (887f419)</li> <li>Fixed prop type validation issue (b0643e6)</li> <li>Fixed the delete model issue (71743ae)</li> <li>Fixed typo (9d5d0ee)</li> <li>Fixed typo (3ce2363)</li> <li>Fixed typo (668d2a5)</li> <li>Form design changes (3f34bfa)</li> <li>formatted file (ec3c0a6)</li> <li>Implemented filter functionality in the table component (4a77545)</li> <li>Implemented styled component (503aeb4)</li> <li>Pagination component implemented (ab41e36)</li> <li>Refactored table component (4206ce3)</li> <li>Removed commented code (bbdda12)</li> <li>Removed id from custom table (2afdc83)</li> <li>Removed key (f80499d)</li> <li>Removed log line (1f51cb4)</li> <li>Removed logs (6763ef9)</li> <li>Removed logs (36476ac)</li> <li>Removed patch file (ef065dc)</li> <li>Resolved comments (5a6088b)</li> <li>Set configuration page to default (6b7150a)</li> <li>Update the way to store data in the context (8d11e7d)</li> <li>update ucc ui version (d562bea)</li> <li>Updated custom cell file (0479106)</li> <li>Updated file name (8640413)</li> <li>Used i18n in custom cell (06d0f02)</li> <li>validate JSON configuration before generating build (0c80d62)</li> </ul>"},{"location":"CHANGELOG/#440-2021-04-14_2","title":"4.4.0 (2021-04-14)","text":""},{"location":"CHANGELOG/#features_72","title":"Features","text":"<ul> <li>validate JSON configuration before generating build (0c80d62)</li> </ul>"},{"location":"CHANGELOG/#430-2021-04-06","title":"4.3.0 (2021-04-06)","text":""},{"location":"CHANGELOG/#bug-fixes_95","title":"Bug Fixes","text":"<ul> <li>added support for additional packaging (f9acc98)</li> <li>bump splunktaucclib to 4.0.13 (51a07f0)</li> <li>license: Correct License reference to Apache-2 (1996410)</li> <li>location of files was incorrect on commit (47d494d)</li> <li>Update CI to new standard (fe6b46b)</li> </ul>"},{"location":"CHANGELOG/#features_73","title":"Features","text":"<ul> <li>supporting the new version mechanism (1768138)</li> <li>version: Support develop versions (ea42e81)</li> </ul>"},{"location":"CHANGELOG/#419-b1-2020-11-13","title":"4.1.9-b.1 (2020-11-13)","text":""},{"location":"CHANGELOG/#418-b1-2020-11-13","title":"4.1.8-b.1 (2020-11-13)","text":""},{"location":"CHANGELOG/#416-a7-2020-11-09","title":"4.1.6-a.7 (2020-11-09)","text":""},{"location":"CHANGELOG/#411-b1-2020-10-08","title":"4.1.1-b.1 (2020-10-08)","text":""},{"location":"CHANGELOG/#411-a3-2020-10-08","title":"4.1.1-a.3 (2020-10-08)","text":""},{"location":"CHANGELOG/#411-a2-2020-10-08","title":"4.1.1-a.2 (2020-10-08)","text":""},{"location":"CHANGELOG/#411-a1-2020-10-08","title":"4.1.1-a.1 (2020-10-08)","text":""},{"location":"CHANGELOG/#405-a9-2020-09-23","title":"4.0.5-a.9 (2020-09-23)","text":""},{"location":"CHANGELOG/#405-a8-2020-09-22","title":"4.0.5-a.8 (2020-09-22)","text":""},{"location":"CHANGELOG/#405-a7-2020-09-22","title":"4.0.5-a.7 (2020-09-22)","text":""},{"location":"CHANGELOG/#reverts_4","title":"Reverts","text":"<ul> <li>Revert \u201cModified include in pyproject.toml with a glob\u201d (14304e3)</li> </ul>"},{"location":"CHANGELOG/#405-a5-2020-09-19","title":"4.0.5-a.5 (2020-09-19)","text":""},{"location":"CHANGELOG/#405-a2-2020-09-19","title":"4.0.5-a.2 (2020-09-19)","text":""},{"location":"CHANGELOG/#405-a1-2020-09-19","title":"4.0.5-a.1 (2020-09-19)","text":""},{"location":"CHANGELOG/#404-2020-09-17","title":"4.0.4 (2020-09-17)","text":""},{"location":"additional_packaging/","title":"<code>additional_packaging.py</code> file","text":"<p>To extend the build process, create a <code>additional_packaging.py</code> file in the root directory of your source code \u2014 that is, the same level where your package directory is located.</p> <p>This file should have either of the below two functions:</p> <ul> <li>the <code>cleanup_output_files</code> function, which accepts <code>output_path</code> (str), <code>add-on name</code> (str) as its arguments.</li> <li>the <code>additional_packaging</code> function, which accepts <code>add-on name</code> (str) as its only argument.</li> </ul> <p>First the <code>cleanup_output_files</code> function would be called from <code>ucc-gen</code> build process and then <code>additional_packaging</code> function.</p> <p>See the following example for proper usage:</p> <ul> <li>Build custom UI after <code>ucc-gen</code> finishes all its necessary steps.</li> <li>Use a workaround for a <code>ucc-gen</code> feature that has not been implemented.</li> </ul>"},{"location":"additional_packaging/#example","title":"Example","text":"<p>Below is an example of additional_packaging.py containing both the implementations of functions.</p> <pre><code>from os.path import sep, exists, dirname, realpath, join\nfrom os import remove, system, _exit, WEXITSTATUS\n\ndef additional_packaging(ta_name=None):\n    \"\"\"\n    `build-ui.sh` builds custom component present in source code and ships them in the output directory\n    \"\"\"\n    if exists(\n        join(dirname(realpath(__file__)), \"build-ui.sh\")\n    ):\n        system(\"chmod +x ./build-ui.sh\")\n        return_code = system(\"./build-ui.sh\")\n        if return_code != 0:\n            _exit(WEXITSTATUS(return_code))\n\ndef cleanup_output_files(output_path: str, ta_name: str) -&gt; None:\n    \"\"\"\n    prepare a list for the files to be deleted after the source code has been copied to output directory\n    :param output_path: The path provided in `--output` argument in ucc-gen command or the default output path.\n    :param ta_name: The add-on name which is passed as a part of `--addon-name` argument during `ucc-gen init` \n                    or present in app.manifest file of add-on.\n    \"\"\"\n    files_to_delete = []\n    files_to_delete.append(sep.join([output_path, ta_name, \"default\", \"redundant.conf\"]))\n    files_to_delete.append(sep.join([output_path, ta_name, \"bin\", \"template_modinput_layout.py\"]))\n    files_to_delete.append(sep.join([output_path, ta_name, \"bin\", \"example_one_input_one.py\"]))\n    files_to_delete.append(sep.join([output_path, ta_name, \"bin\", \"template_rest_handler_script.py\"]))\n    files_to_delete.append(sep.join([output_path, ta_name, \"bin\", \"file_does_not_exist.py\"]))\n    files_to_delete.append(sep.join([output_path, ta_name, \"default\", \"nav\", \"views\", \"file_copied_from_source_code.xml\"]))\n\n    for delete_file in files_to_delete:\n        try:\n            remove(delete_file)\n        except (FileNotFoundError):\n            # simply pass if the file doesn't exist\n            pass\n</code></pre>"},{"location":"commands/","title":"Commands","text":"<p>These are the commands that are available in UCC framework.</p>"},{"location":"commands/#ucc-gen-build","title":"<code>ucc-gen build</code>","text":"<p>The <code>ucc-gen build</code> command builds the add-on. As of now, running <code>ucc-gen</code> does the same thing as running <code>ucc-gen build</code>, but eventually calling <code>ucc-gen</code> without specifying a subcommand will be deprecated.</p> <p>It takes the following parameters:</p> <ul> <li><code>--source</code> - [optional] folder containing the <code>app.manifest</code> and app     source. The default is <code>package</code>.</li> <li><code>--config</code> - [optional] path to the configuration file. It defaults to     the globalConfig file in the parent directory of the source provided.     Only .json and .yaml files are accepted.</li> <li><code>--ta-version</code> - [optional] override current version of TA. The default     version is version specified in <code>globalConfig.json</code> or <code>globalConfig.yaml</code>.     A Splunkbase compatible version of SEMVER is used by default.</li> <li><code>-o</code> / <code>--output</code> - [optional] output folder to store the build add-on.    By default, it is saved in the <code>current directory/output</code> folder.     Absolute paths are accepted as well.</li> <li><code>--python-binary-name</code> - [optional] Python binary name to use when     installing Python libraries. The default is <code>python3</code>.</li> <li><code>-v</code> / <code>--verbose</code> - [optional] shows detailed information about     created/copied/modified/conflict files after build is complete.     This option is in the experimental mode. The default is <code>False</code>.</li> <li><code>--pip-version</code> - [optional] pip version that is used to install python libraries. The default is <code>latest</code>.</li> <li><code>--pip-legacy-resolver</code> - [optional] Use old pip dependency resolver by adding flag \u2018\u2013use-deprecated=legacy-resolver\u2019     to pip install command. The default is<code>False</code>.      NOTE: This flag is deprecated and will be removed from pip in the future.     Instead of using this flag, the correct solution would be to fix the packages your project depends on to work properly with the new resolver. Additionally, this flag is not compatible with pip version <code>23.2</code>. Use <code>23.2.1</code> instead.</li> <li> <p><code>--pip-custom-flag</code> - [optional] Additional flag(s) that will be added to the <code>pip install</code> command.     By default, all the following flags are added to the <code>pip install</code> command: <code>--no-compile</code>, <code>--prefer-binary</code> and <code>--ignore-installed</code>.     If <code>--pip-custom-flag</code> is specified these three arguments will be missing so if you still want them in your command add them to the <code>--pip-custom-flag</code> argument.</p> <p>Example:  <code>--pip-custom-flag=\"--no-compile --prefer-binary --ignore-installed --report path/to/report.json --progress-bar on\"</code></p> </li> <li> <p><code>--build-custom-ui</code> - [optional] Additional flag that will trigger build of custom UI repo (execute build script from <code>./ui</code> repository).</p> </li> </ul>"},{"location":"commands/#verbose-mode","title":"Verbose mode","text":"<p>The verbose mode is available for <code>v5.35.0</code> and later.</p> <p>Running <code>ucc-gen build -v</code> or <code>ucc-gen build --verbose</code> prints additional information about what was exactly created / copied / modified / conflicted after the build is complete. It does not scan the <code>lib</code> folder due to the nature of the folder.</p> <p>See the following description of what each state means:</p> <ul> <li><code>created</code>: the file is not in the original package and was created during the build process.</li> <li><code>copied</code>: the file is in the original package and was copied during the build process.</li> <li><code>modified</code>: the file is in the original package and was modified during the build process.</li> <li><code>conflict</code>: the file is in the original package and was copied during the build process, but may be generated by UCC itself, so incorrect usage can stop the add-on from working.</li> </ul>"},{"location":"commands/#ucc-gen-init","title":"<code>ucc-gen init</code>","text":"<p><code>ucc-gen init</code> initializes the add-on. This is available on <code>v5.19.0</code> and later. The <code>ucc-gen init</code> command initializes the add-on and bootstraps some code in the modular input which you, as a developer, can extend for your needs.</p> <p>Apart from standard files needed for the add-on, it also adds search head clustering files in the <code>default/server.conf</code> file and reload triggers in the <code>default/app.conf</code> file. Those files will be soon generated automatically by the <code>ucc-gen build</code> command itself. during the add-on development.</p> <p>It takes the following parameters:</p> <ul> <li><code>--addon-name</code> - [required] add-on name. See the     official naming convention guide.</li> <li><code>--addon-rest-root</code> - [optional] add-on REST root, defaults to <code>--addon-name</code> if not provided.</li> <li><code>--addon-display-name</code> - [required] add-on \u201cofficial\u201d name.</li> <li><code>--addon-input-name</code> - [required] name of the generated input.</li> <li><code>--addon-version</code> - [optional] version of the generated add-on, with <code>0.0.1</code> by default.</li> <li><code>--overwrite</code> - [optional] overwrites the already existing folder. By default, you can\u2019t generate a new add-on to an already existing folder.</li> <li><code>--add-license</code> - [optional] Adds license agreement such as Apache License 2.0, MIT License, or SPLUNK PRE-RELEASE SOFTWARE LICENSE AGREEMENT in your <code>package/LICENSES</code> directory. If not mentioned an empty License.txt will be generated.</li> <li><code>--include-author</code> - [optional] Allows you to specify the author of the add-on during initialization. The author\u2019s name will appear in <code>app.manifest</code> under <code>info -&gt; author -&gt; name</code> and in <code>app.conf</code> (after building your add-on) under <code>launcher -&gt; author</code> field.</li> </ul> <p>Note: The add-on will not build if the input for <code>--add-license</code> is not one of the following: <code>Apache License 2.0</code>, <code>MIT License</code>, or <code>SPLUNK PRE-RELEASE SOFTWARE LICENSE AGREEMENT</code>. If you want to keep another license in your add-on, place it in <code>package/LICENSES</code> directory and it will be shipped</p>"},{"location":"commands/#ucc-gen-import-from-aob","title":"<code>ucc-gen import-from-aob</code>","text":"<p>Import from AoB (Add-on Builder), from <code>v5.24.0</code> and later. It is in the experimental state as of now, meaning that running this command may not produce a 100% UCC compatible add-on, but we are going to work on future improvements for the script itself.</p> <p>Note: the <code>import-from-aob</code> command does not currently support Windows.</p> <p>The import functionality is based on the ucc_migration_test bash script. One of the ways you can use it is to download an AoB-based add-on from Splunkbase, unarchive the folder, and then use <code>ucc-gen import-from-aob --addon-name &lt;unarchived-folder-name&gt;</code>. Or you can run the same command against your locally developed add-on, but it should be exported from AoB.</p> <p>It accepts the following parameters:</p> <ul> <li><code>--addon-name</code> - [required] add-on name.</li> </ul>"},{"location":"commands/#ucc-gen-package","title":"<code>ucc-gen package</code>","text":"<p><code>ucc-gen package</code> can be used for <code>v5.30.0</code> and later. It packages the add-on so it can be installed. It mimics the basics of the <code>slim package</code> command. This command can be used for most of the simple cases.</p> <p>It does not support:</p> <ul> <li>the <code>.slimignore</code> file.</li> <li>the dependencies section.</li> </ul> <p>It accepts the following parameters:</p> <ul> <li><code>--path</code> - [required] path to the built add-on (should include the <code>app.manifest</code> file).</li> <li><code>-o</code> / <code>--output</code> - [optional] output folder to store the packaged add-on.     By default, it will be saved in the <code>current directory</code> folder.     It accepts absolute paths as well.</li> </ul>"},{"location":"commands/#ucc-gen-validate","title":"<code>ucc-gen validate</code>","text":"<p>The <code>ucc-gen validate</code> command is available starting from version <code>v5.68.0</code> and is used to validate Splunk apps and add-ons during development. It leverages <code>Splunk AppInspect</code> under the hood to ensure your add-on meets Splunk\u2019s standards and best practices.</p> <p>To use this command, you must have AppInspect installed on your system. You can install the required dependencies using the following command:</p> <ul> <li>pip install splunk-add-on-ucc-framework[validate]</li> </ul> <p>It accepts the following parameters:</p> <ul> <li><code>--addon-path</code> - [required] Specifies the path to the built add-on that you want to validate.</li> </ul>"},{"location":"commands/#ucc-gen-publish","title":"<code>ucc-gen publish</code>","text":"<p><code>ucc-gen publish</code> command is available starting from version <code>v5.68.0</code> and is used to upload a packaged add-on (.tar.gz) to Splunkbase. One of the main use case of this command is to automate the process of the add-on release through the workflow.</p> <p>It does not support:</p> <ul> <li>Updating the package file for the same version which was uploaded earlier</li> <li>Updating the metadata like <code>splunk_versions</code> and <code>cim_versions</code></li> </ul> <p>It accepts the following parameters:</p> <ul> <li><code>--app-id</code> - [required] Splunkbase numerical app id listed in the URL of the app details page.</li> <li><code>--package-path</code> - [required] path to the package file (.tar.gz) to be published (must be a valid UCC package).</li> <li><code>--splunk-versions</code> - [required] comma-separated list of supported Splunk versions (e.g. \u201c9.1,9.2\u201d).</li> <li><code>--cim-versions</code> - [required] comma-separated list of supported CIM versions (e.g. \u201c5.x,6.x\u201d).</li> <li><code>--username</code> - [required] Username of the splunkbase account.</li> <li><code>--password</code> - [required] Password of the splunkbase account.</li> <li><code>--make-visible</code> - [optional] flag to make the uploaded release publicly visible immediately upon successful validation.</li> </ul> <p>Caution: Packages uploaded with <code>--make-visible</code> flag cannot be deleted or updated later.</p> <p>Note: For any reason if the user wants to update the build package for particular version which was uploaded earlier, they\u2019ll have to delete the previously uploaded build first from the Splunkbase UI (This is only possible if the package was previously uploaded without <code>--make-visible</code> flag).</p>"},{"location":"contributing/","title":"Contributing Guidelines","text":"<p>We welcome contributions from the community! This guide will help you understand our contribution process and requirements.</p>"},{"location":"contributing/#development-guidelines","title":"Development guidelines","text":"<ol> <li>Small PRs (blogpost)</li> <li>When fixing a bug, include a test that reproduces the issue in the same pull request (the test should fail without your changes)</li> <li>If you are refactoring, ensure adequate test coverage exists for the target area. If coverage is insufficient, create tests in a separate pull request first. This approach provides a safety net for validating current behavior and simplifies code reviews.</li> <li>A feature should have unit, smoke and UI tests, if applicable</li> <li>It is encourage to record a demo of your change, or schedule a meeting for reviewers</li> </ol>"},{"location":"contributing/#build-and-test","title":"Build and Test","text":"<p>Prerequisites:</p> <ul> <li>Node.js\u00ae LTS version (download here)</li> <li>Yarn Classic (<code>npm install --global yarn</code>)</li> <li>Poetry 1.5.1. Installation guide</li> </ul> <p>If you are interested in contributing to the UI, the <code>ui</code> folder has a separate README.md.</p> <p>Script for building the backend, frontend, and spinning up the Docker container all at once:</p> <pre><code>./scripts/quick_start_ui.sh\n</code></pre> <p>Build the UI in the <code>ui/dist</code> folder and copy the files to the static folder of the UCC.</p> <pre><code>./scripts/build_ui.sh\n</code></pre> <p>Build a new local version of <code>ucc-gen</code>:</p> <pre><code>poetry build\n</code></pre>"},{"location":"contributing/#unit-tests","title":"Unit tests","text":"<pre><code>poetry run pytest tests/unit\n</code></pre>"},{"location":"contributing/#smoke-tests","title":"Smoke tests","text":"<pre><code>poetry run pytest tests/smoke\n</code></pre>"},{"location":"contributing/#checking-the-code-coverage","title":"Checking the code coverage","text":"<p>Use the pytest parameter <code>--cov</code> and <code>--cov-report</code>:</p> <pre><code>poetry run pytest tests/unit --cov splunk_add_on_ucc_framework --cov-report html\npoetry run pytest tests/smoke --cov splunk_add_on_ucc_framework --cov-report html\n</code></pre> <p>A report is created in <code>htmlcov/index.html</code>.</p>"},{"location":"contributing/#ui-validation","title":"UI validation","text":"<pre><code>cd ui\nyarn run test\ncd ..\n</code></pre>"},{"location":"contributing/#ui-tests","title":"UI tests","text":"<p>If you need to run UI tests for the PR, add a \u201crun-ui-tests\u201d label before the PR is created. UI tests will run automatically for any PR towards the <code>main</code> / <code>develop</code> branches, and on the <code>main</code> / <code>develop</code> branch as well.</p> <ol> <li> <p>With local version of ucc-gen, create a UCCExample add-on for the output directory:</p> <pre><code>poetry run ucc-gen build --source tests/testdata/test_addons/package_global_config_everything/package\n</code></pre> </li> <li> <p>Install docker, and run containerized Splunk Enterprise using script:</p> <pre><code>./scripts/run_splunk.sh\n</code></pre> </li> </ol> <p>There are mapped default Splunk ports to host. To use a different configuration, see docker-splunk. Remember to mount the output package to the Splunk apps directory.</p> <ol> <li> <p>Install any browser specific to this browser driver, such as chromedriver for Chrome.</p> </li> <li> <p>Run tests using the following command:</p> <pre><code>poetry run pytest tests/ui\n</code></pre> </li> </ol> <p>Default test parameters use Splunk connection details and credentials from the earlier step, and <code>chromedriver</code> is used as a default webdriver.    To use a different browser or Splunk configuration, set the proper parameters according to the smartx-ui-test-library documentation.</p>"},{"location":"contributing/#linting-and-type-checking","title":"Linting and Type-checking","text":"<p><code>ucc-gen</code> uses the <code>pre-commit</code> framework for linting and type-checking. Consult with <code>pre-commit</code> documentation about what is the best way to install the software.</p> <p>To run it locally:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#building-ta-with-the-local-version-of-ucc","title":"Building TA with the Local Version of UCC","text":"<p>UCC is a tool for Technology Add-ons (TAs), so it\u2019s important to test TA generation while developing UCC locally.</p>"},{"location":"contributing/#overview","title":"Overview","text":"<ol> <li>Install Dependencies for Your TA</li> <li>Build the TA Using Your Local UCC Version</li> <li>Package the TA into a .tar.gz file using <code>ucc-gen package</code></li> </ol>"},{"location":"contributing/#installing-ta-dependencies","title":"Installing TA Dependencies","text":"<p>The method for installing dependencies may vary among different TAs. Common approaches include running Poetry, but please refer to your TA\u2019s documentation for specific instructions.</p> <pre><code># These variables would be used in the further steps\nta_repo=/path/to/ta\nta_name=TA_Name_From_app.manifest\n\npoetry install --directory=$ta_repo\n\nmkdir -p $ta_repo/package/lib\n\n# Export dependencies to 'requirements.txt'\npoetry export --without-hashes -o $ta_repo/package/lib/requirements.txt --directory $ta_repo\n</code></pre> <p>Note: ucc-gen expects dependencies to be listed in <code>package/lib/requirements.txt</code>.</p>"},{"location":"contributing/#building-ta","title":"Building TA","text":"<pre><code>poetry run ucc-gen build --source $ta_repo/package\n</code></pre> <p>Ensure you specify the <code>package</code> folder, not the repository root. Monitor the build process for any errors.</p> <p>Caveat: The build command may run scripts from the TA repository that may not be tested if running from a non-TA repository. For example, <code>build-ui.sh</code> may use relative paths for building custom components. You might need to manually run the script and/or copy the files to the output directory of UCC.</p> <pre><code># in case if TA has custom UI components\nmkdir -p output/$ta_name/appserver/static/js/build\ncp -a $ta_repo/output/$ta_name/appserver/static/js/build/custom output/$ta_name/appserver/static/js/build\n</code></pre>"},{"location":"contributing/#packaging-ta","title":"Packaging TA","text":"<pre><code>poetry run ucc-gen package --path output/$ta_name\n</code></pre> <p>This command will generate a packaged TA (.tar.gz file) that you can install into Splunk.</p>"},{"location":"contributing/#documentation-changes","title":"Documentation changes","text":"<p>Documentation changes are also welcome!</p> <p>To verify changes locally:</p> <pre><code>poetry run mkdocs serve -a localhost:8001\n</code></pre>"},{"location":"contributing/#documentation-guidelines","title":"Documentation guidelines","text":"<ol> <li>Every feature should be covered in the documentation</li> <li>The documentation should be easy to understand</li> <li>At the end of developing a feature, an author is encouraged to manually check the steps of the documentation and see if the change and examples work as expected</li> </ol>"},{"location":"contributing/#issues-and-bug-reports","title":"Issues and bug reports","text":"<p>If you\u2019re seeing some unexpected behavior with <code>ucc-gen</code>, create an issue on GitHub. You can click on \u201cNew Issue\u201d and use the template provided.</p>"},{"location":"contributing/#pull-requests","title":"Pull requests","text":"<p>We love to see pull requests!</p>"},{"location":"contributing/#pr-title","title":"PR Title","text":"<p>We follow Conventional Commits for PR titles. The title format is crucial as we squash commits during merge, and this PR title will be used in the release notes (for feat and fix types). Here\u2019s a short TL;DR of the format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\nTypes:\n- feat: New feature (user facing)\n- fix: Bug fix (user facing)\n- docs: Documentation changes (user facing)\n- style: Code style changes (formatting, etc.)\n- refactor: Code changes that neither fix bugs nor add features\n- perf: Performance improvements\n- test: Adding or updating tests\n- chore: Maintenance tasks\n</code></pre> <p>Example: <code>feat(ui): add new input validation for text fields</code></p>"},{"location":"contributing/#pr-description","title":"PR Description","text":"<p>Includes:</p> <ul> <li>Motivation behind the changes (any reference to issues or user stories)</li> <li>High level description of code changes</li> <li>Description of changes in user experience if applicable.</li> <li>Screenshots for UI changes (before and after)</li> <li>Steps to reproduce the issue or test the new feature, if possible. This will speed up the review process.</li> </ul> <p>After submitting your PR, GitHub will automatically add relevant reviewers, and CI checks will run automatically.</p> <p>Note: <code>semgrep</code> and <code>fossa</code> checks might fail for external contributors. This is expected and will be handled by maintainers.</p>"},{"location":"contributing/#release-flow","title":"Release flow","text":"<p>The instructions below utilize the GitHub CLI tool, which you can install via HomeBrew:</p> <pre><code>brew install gh\ngh auth login\n</code></pre> <ul> <li>The default development branch is <code>develop</code>. Use this branch for creating pull requests (PRs) for your features, fixes, documentation updates, etc. PRs to the <code>develop</code> branch should be merged using the squash option on GitHub.</li> <li>When it\u2019s time for a release (handled by the UCC team), create a PR from <code>develop</code> to <code>main</code> using the following commands:</li> </ul> <pre><code>gh pr create --title \"chore: merge develop into main\" --body \"\" --head develop --base main\n# set automerge with merge commit to avoid accidentally squashing PR\ngh pr merge develop --auto --merge\n</code></pre> <ul> <li>Ensure CI passes and await team review.</li> <li>PR should be merged using merge commit option in GitHub (already included in the command)</li> <li>Releases are made automatically (both on GitHub and PyPI), and a bot will push a commit to <code>main</code> with all necessary changes  (i.e. like this)</li> <li>If necessary, update release notes and CHANGELOG.md accordingly to the content of the release.</li> <li>If any issue was solved by this release, remove waiting-for-release label from it and then close the issue.</li> <li>After the release, backport the bot\u2019s changes to the <code>develop</code> branch (i.e. #974):</li> </ul> <pre><code>gh pr create --title \"chore: merge main into develop\" --body \"\" --head main --base develop\n# set automerge with merge commit to avoid accidentally squashing PR\ngh pr merge main --auto --merge\n</code></pre> <ul> <li> <p>If a release encounters issues requiring a quick bug fix (handled by the UCC team):</p> <ul> <li>Create a PR to the main branch with the fix, including tests that reproduce and then fix the issue.</li> <li>Ensure CI passes and await team review.</li> <li>Merge the PR using the merge commit option on GitHub.</li> <li>Backport the bug fix PR to the develop branch.</li> </ul> </li> <li> <p>After release is done, announce it to community on slack channels:</p> <ul> <li>Internal UCC channel</li> <li>Splunk Usergroup UCC channel</li> </ul> </li> </ul>"},{"location":"custom_search_commands/","title":"Custom Search Command","text":"<p>Custom search commands are user-defined SPL (Splunk Search Processing Language) commands that enable users to add custom functionality to their Splunk searches.</p> <p>There are 4 types of Custom search commands:</p> <ul> <li>Generating</li> <li>Streaming</li> <li>Transforming</li> <li>Dataset processing</li> </ul> <p>Note: Eventing commands are being referred as Dataset processing commands reference.</p>"},{"location":"custom_search_commands/#generation-of-custom-search-command","title":"Generation of custom search command","text":"<p>A new tag has been introduced in globalConfig (same indent level as of <code>meta</code> tag) named <code>customSearchCommand</code> where you need to define the configuration for the custom search command.</p>"},{"location":"custom_search_commands/#minimal-definition","title":"Minimal definition","text":"<pre><code>\"customSearchCommand\": [\n    {\n        \"commandName\": \"mycommandname\",\n        \"fileName\": \"mycommandlogic.py\",\n        \"commandType\": \"generating\",\n        \"arguments\": [\n            {\n                \"name\": \"argument_name\",\n                \"validate\": {\n                    \"type\": \"Fieldname\"\n                },\n                \"required\": true\n            },\n            {\n                \"name\": \"argument_two\"\n            }\n        ]\n    }\n]\n</code></pre> <p>This configuration will generate a template Python file named <code>mycommandname.py</code>, which imports logic from the <code>mycommandlogic.py</code> file and automatically updates the <code>commands.conf</code> file as shown below:</p> <pre><code>[mycommandname]\nfilename = mycommandname.py\nchunked = true\npython.version = python3\n</code></pre> <p>NOTE:    If the file specified in the <code>fileName</code> field does not exist in the <code>&lt;YOUR_ADDON/bin&gt;</code> directory, the build will fail.</p>"},{"location":"custom_search_commands/#attributes-for-customsearchcommand-tag","title":"Attributes for <code>customSearchCommand</code> tag","text":"Property Type Description commandName* string Name of the custom search command fileName* string Name of the Python file which contains logic of custom search command commandType* string Specify type of custom search command. Three types of commands are allowed, <code>streaming</code>,<code>generating</code> and <code>dataset processing</code>. arguments* array[objects] Arguments which can be passed to custom search command. requiredSearchAssistant boolean Specifies whether search assistance is required for the custom search command. Default: false. usage string Defines the usage of custom search command. It can be one of <code>public</code>, <code>private</code> and <code>deprecated</code>. description string Provide description of the custom search command. syntax string Provide syntax for custom search command <p>To generate a custom search command, the following attributes must be defined in globalConfig: <code>commandName</code>, <code>commandType</code>, <code>fileName</code>, and <code>arguments</code>. Based on the provided commandType, UCC will generate a template Python file and integrate the user-defined logic into it.</p> <p>If <code>requiredSearchAssistant</code> is set to True, the <code>syntax</code>, <code>description</code>, and <code>usage</code> attributes are mandatory, as they are essential for generating <code>searchbnf.conf</code>. For more information about these attributes please refer to the searchbnf.conf docs</p> <p>NOTE:     The user-defined Python file must include specific functions based on the command type:</p> <ul> <li>For <code>Generating</code> command, the Python file must include a <code>generate</code> function.</li> <li>For <code>Streaming</code> command, the Python file must include a <code>stream</code> function.</li> <li>For <code>Dataset processing</code> command, the Python file must include a <code>transform</code> function.</li> </ul>"},{"location":"custom_search_commands/#arguments","title":"Arguments","text":"Property Type Description name* string Name of the argument defaultValue string/number Default value of the argument. required boolean Specify if the argument is required or not. validate object Specify validation for the argument. It can be any of <code>Integer</code>, <code>Float</code>, <code>Boolean</code>, <code>RegularExpression</code> or <code>FieldName</code>. <p>UCC currently supports five types of validations provided by <code>splunklib</code> library:</p> <ul> <li>IntegerValidator<ul> <li>you can optionally define <code>minimum</code> and <code>maximum</code> properties.</li> </ul> </li> <li>FloatValidator<ul> <li>you can optionally define <code>minimum</code> and <code>maximum</code> properties.</li> </ul> </li> <li>BooleanValidator<ul> <li>no additional properties required.</li> </ul> </li> <li>RegularExpressionValidator<ul> <li>no additional properties required.</li> </ul> </li> <li>FieldnameValidator<ul> <li>no additional properties required.</li> </ul> </li> </ul> <p>For more information, refer splunklib API docs</p> <p>For example:</p> <pre><code>\"arguments\": [\n    {\n        \"name\": \"count\",\n        \"required\": true,\n        \"validate\": {\n            \"type\": \"Integer\",\n            \"minimum\": 1,\n            \"maximum\": 10\n        },\n        \"default\": 5\n    },\n    {\n        \"name\": \"test\",\n        \"required\": true,\n        \"validate\": {\n            \"type\": \"Fieldname\"\n        }\n    },\n    {\n        \"name\": \"percent\",\n        \"validate\": {\n            \"type\": \"Float\",\n            \"minimum\": \"85.5\"\n        }\n\n    }\n]\n</code></pre>"},{"location":"custom_search_commands/#example","title":"Example","text":"<pre><code>{\n    \"meta\": {...}\n    \"customSearchCommand\": [\n        {\n            \"commandName\": \"generatetextcommand\",\n            \"fileName\": \"generatetext.py\",\n            \"commandType\": \"generating\",\n            \"requiredSearchAssistant\": true,\n            \"description\": \"This command generates COUNT occurrences of a TEXT string.\",\n            \"syntax\": \"generatetextcommand count=&lt;event_count&gt; text=&lt;string&gt;\",\n            \"usage\": \"public\",\n            \"arguments\": [\n                {\n                    \"name\": \"count\",\n                    \"required\": true,\n                    \"validate\": {\n                        \"type\": \"Integer\",\n                        \"minimum\": 5,\n                        \"maximum\": 10\n                    }\n                },\n                {\n                    \"name\": \"text\",\n                    \"required\": true\n                }\n            ]\n        },\n    ],\n    \"pages\": {...}\n}\n</code></pre> <p>Generated python file named <code>generatetextcommand.py</code>:</p> <pre><code>import sys\nimport import_declare_test\n\nfrom splunklib.searchcommands import \\\n    dispatch, GeneratingCommand, Configuration, Option, validators\nfrom generatetext import generate\n\n@Configuration()\nclass GeneratetextcommandCommand(GeneratingCommand):\n    \"\"\"\n\n    ##Syntax\n    generatetextcommand count=&lt;event_count&gt; text=&lt;string&gt;\n\n    ##Description\n    This command generates COUNT occurrences of a TEXT string.\n\n    \"\"\"\n    count = Option(name='count', require=True, validate=validators.Integer(minimum=5, maximum=10))\n    text = Option(name='text', require=True)\n\n    def generate(self):\n       return generate(self)\n\ndispatch(GeneratetextcommandCommand, sys.argv, sys.stdin, sys.stdout, __name__)\n</code></pre> <p>Generated stanza in <code>commands.conf</code> file</p> <pre><code>[generatetextcommand]\nfilename = generatetextcommand.py\nchunked = true\npython.version = python3\n</code></pre> <p>Generated stanza in <code>searchbnf.conf</code> file</p> <pre><code>[generatetextcommand]\nsyntax = generatetextcommand count=&lt;event_count&gt; text=&lt;string&gt;\ndescription = This command generates COUNT occurrences of a TEXT string.\nusage = public\n</code></pre>"},{"location":"custom_search_commands/#output","title":"Output","text":"<p>This is how search result looks like:</p> <p></p>"},{"location":"dashboard/","title":"Dashboard","text":""},{"location":"dashboard/#overview","title":"Overview","text":"<p>UCC introduces a monitoring dashboard page, which is available from v5.42.0.</p> <p>Page is fully based on the UDF framework (Unified Dashboard Framework) and Splunk UI components. More information can be found here.</p> <p>The dashboard page configuration is generated if the <code>ucc-gen init</code> command is used. The dashboard page is optional, you can delete it from configuration if you don\u2019t need it in your add-on.</p> <p>The dashboard page provides some additional information about the add-on operations to increase the visibility into what the add-on is actually doing under the hood.</p> <p>As of now, 4 pre-built panels are supported:</p> <ul> <li>Overview</li> <li>Data ingestion</li> <li>Errors in the add-on.</li> <li>Resource consumption.</li> </ul> <p>IMPORTANT:</p> <ul> <li>To fully use the panels available on the monitoring dashboard, use the <code>solnlib.log</code>\u2019s <code>events_ingested</code> function, to record events. Due to some changes in dashboard queries in UCC version 5.49.0, you must use <code>solnlib</code> in at least version 5.2.0.</li> <li>Sometimes, especially with a short data collection period, the first chart in the overview section may not display data when the all time period is selected. This is because the <code>join</code> function used to aggregate data volume and number of ingested events does not have a default span for the all time range. Over time, the problem should automatically disappear.</li> </ul> <p>The above <code>events_ingested</code> function takes 5 positional parameters which are:</p> <ul> <li><code>logger</code></li> <li><code>modular_input_name</code></li> <li><code>sourcetype</code></li> <li><code>n_events</code></li> <li><code>index</code></li> </ul> <p>and 2 optional named parameters:</p> <ul> <li><code>account</code></li> <li><code>host</code></li> <li><code>license_usage_source</code> (available from version 5.2)</li> </ul> <p>If you additionally provide <code>account</code> and <code>host</code> arguments - you will get a better visibility in your dashboard. Please note that as a <code>modular_input_name</code> you should pass the full input in the format: <code>demo_input://my_input_1</code>.</p> <p>If for your add-on <code>license usage</code> file writes data in a source format that doesn\u2019t fit the above, the <code>events_ingested</code> function in solnlib v5.2 has an additional, optional parameter <code>license_usage_source</code> that allows for proper data correlation between license usage and data written by the <code>events_ingested</code> function.</p> <p>Example of an <code>events_ingested</code> function:</p> <pre><code>from solnlib import log\n\n\nlog.events_ingested(\n    logger,\n    \"demo_input://my_input1\",\n    \"my_sourcetype\",\n    2,\n    \"my_index\",\n    account=\"my_account\"\n)\n</code></pre> <p>as a reference, you can check the input in the demo add-on described here.</p> <p>IMPORTANT: From version v5.46.0 the error section has been expanded to include a division into error categories. This solution is based on additional exception logging functions:</p> <ul> <li><code>log_connection_error</code></li> <li><code>log_configuration_error</code></li> <li><code>log_permission_error</code></li> <li><code>log_authentication_error</code></li> <li><code>log_server_error</code></li> </ul> <p>Above functions take 2 mandatory parameters:</p> <ul> <li><code>logger</code> - your add-on logger</li> <li><code>exc</code> - exception thrown</li> </ul> <p>and 3 optional parameters:</p> <ul> <li><code>full_msg</code> - if set to True, full traceback will be logged. Default: True</li> <li><code>msg_before</code> - custom message before exception traceback. Default: None</li> <li><code>msg_after</code> - custom message after exception traceback. Default: None</li> </ul> <p>Additionally, function <code>log_exception</code> has a new, mandatory parameter <code>exc_label</code> thanks to which you can log your own, non-standard types.</p> <p>All of the above is available in the <code>log</code> module of the <code>solnlib</code> library from version 5.0. Please make sure you are using this version of <code>solnlib</code> library if you want to take full advantage of the extended error panel.</p> <p>Example of a logging functions:</p> <pre><code>from solnlib import log\n\n...\nexcept MyCustomException as e:\n    log.log_exception(logger, e, \"my custom error\")\nexcept UnauthorisedError as e:\n    log.log_authentication_error(logger, e)\nexcept PermissionError as e:\n    log.log_permission_error(logger, e, msg_after=\"test after\")\nexcept ConnectionError as e:\n    log.log_connection_error(logger, e, msg_before=\"test before\", msg_after=\"test after\")\nexcept AddonConfigurationError as e:\n    log.log_configuration_error(logger, e, full_msg=False, msg_before=\"test before\")\nexcept ServiceServerError as e:\n    log.log_server_error(logger, e)\nexcept Exception as e:\n    log.log_exception(logger, e, \"Other\")\n</code></pre> <p>By default, the error section displays events logged with the ERROR level, but since version 5.50 UCC allows the user to define what level of logs should be displayed in this section. There are two levels to choose from:</p> <ul> <li>ERROR</li> <li>CRITICAL</li> </ul> <pre><code>        \"dashboard\": {\n            \"panels\": [\n                {\n                    \"name\": \"default\"\n                }\n            ],\n            \"settings\": {\n                \"error_panel_log_lvl\": [\n                    \"ERROR\",\n                    \"CRITICAL\"\n                ]\n            }\n        }\n</code></pre>"},{"location":"dashboard/#configuration","title":"Configuration","text":"<p>To be able to add a monitoring dashboard page to an existing add-on, you need to adjust your globalConfig file and include a new \u201cdashboard\u201d page there. See the following example:</p> <pre><code>{\n    \"pages\": {\n        \"configuration\": {\n            \"tabs\": [\n                ...\n            ],\n            \"title\": \"Configuration\",\n            \"description\": \"Set up your add-on\"\n        },\n        \"inputs\": {\n            \"services\": [\n                ...\n            ],\n            \"title\": \"Inputs\",\n            \"description\": \"Manage your data inputs\",\n            \"table\": {\n                ...\n            }\n        },\n        \"dashboard\": {\n            \"panels\": [\n                {\n                    \"name\": \"default\"\n                }\n            ]\n        }\n    },\n    \"meta\": {\n      ...\n    }\n}\n</code></pre>"},{"location":"dashboard/#migration-path","title":"Migration path","text":"<p>Default, XML-based dashboard will be migrated during the build process. All the necessary changes will be made automatically.</p>"},{"location":"dashboard/#custom-components","title":"Custom components","text":"<p>UCC also supports adding your own components to the dashboard. To do this, create a custom_dashboard.json file in the add-on\u2019s root directory (at the same level as globalConfig.json).</p> <p>This definition json file must be created according to the UDF framework standards described here</p> <p>custom_dashboard.json location:</p> <pre><code>&lt;TA&gt;\n \u251c\u2500\u2500 package\n ...\n \u251c\u2500\u2500 custom_dashboard.json\n \u251c\u2500\u2500 globalConfig.json\n ...\n</code></pre> <p>Sample custom_dashboard.json structure:</p> <pre><code>{\n  \"visualizations\": {\n    \"custom_dashboard_main_label\": {\n      \"type\": \"splunk.markdown\",\n      \"options\": {\n        \"markdown\": \"# My custom dashboard\",\n        \"fontSize\": \"extraLarge\"\n      }\n    },\n    \"custom_addon_version_label\": {\n      \"type\": \"splunk.markdown\",\n      \"options\": {\n        \"markdown\": \"# Add-on version:\",\n        \"fontSize\": \"large\"\n      }\n    },\n    \"custom_addon_version\": {\n      \"type\": \"splunk.singlevalue\",\n      \"options\": {\n        \"majorFontSize\": 34,\n        \"backgroundColor\": \"transparent\"\n      },\n      \"dataSources\": {\n        \"primary\": \"custom_addon_version_ds\"\n      }\n    },\n    \"custom_events_ingested_label\": {\n      \"type\": \"splunk.markdown\",\n      \"options\": {\n        \"markdown\": \"# Events ingested by sourcetype:\",\n        \"fontSize\": \"default\"\n      }\n    },\n    \"custom_events_ingested\": {\n      \"type\": \"splunk.line\",\n      \"options\": {\n        \"xAxisVisibility\": \"hide\",\n        \"seriesColors\": [\n          \"#A870EF\"\n        ],\n        \"yAxisTitleText\": \"Events ingested\"\n      },\n      \"title\": \"Events ingested by sourcetype\",\n      \"dataSources\": {\n        \"primary\": \"custom_events_ingested_ds\"\n      }\n    }\n  },\n  \"dataSources\": {\n    \"custom_addon_version_ds\": {\n      \"type\": \"ds.search\",\n      \"options\": {\n        \"query\": \"| rest services/apps/local/demo_addon_for_splunk splunk_server=local | fields version\"\n      }\n    },\n    \"custom_events_ingested_ds\": {\n      \"type\": \"ds.search\",\n      \"options\": {\n        \"query\": \"index=_internal source=*demo_addon* action=events_ingested\\n| timechart sum(n_events) by sourcetype_ingested\",\n        \"queryParameters\": {\n          \"earliest\": \"$events_ingested_time.earliest$\",\n          \"latest\": \"$events_ingested_time.latest$\"\n        }\n      }\n    }\n  },\n  \"inputs\": {\n    \"custom_events_ingested_input\": {\n      \"options\": {\n        \"defaultValue\": \"-7d,now\",\n        \"token\": \"events_ingested_time\"\n      },\n      \"title\": \"Time\",\n      \"type\": \"input.timerange\"\n    }\n  },\n  \"layout\": {\n    \"type\": \"grid\",\n    \"globalInputs\": [\n      \"custom_events_ingested_input\"\n    ],\n    \"structure\": [\n      {\n        \"item\": \"custom_dashboard_main_label\",\n        \"position\": {\n          \"x\": 20,\n          \"y\": 500,\n          \"w\": 300,\n          \"h\": 50\n        }\n      },\n      {\n        \"item\": \"custom_addon_version_label\",\n        \"position\": {\n          \"x\": 20,\n          \"y\": 530,\n          \"w\": 100,\n          \"h\": 50\n        }\n      },\n      {\n        \"item\": \"custom_addon_version\",\n        \"position\": {\n          \"x\": 80,\n          \"y\": 515,\n          \"w\": 100,\n          \"h\": 50\n        }\n      },\n      {\n        \"item\": \"custom_events_ingested_label\",\n        \"position\": {\n          \"x\": 20,\n          \"y\": 550,\n          \"w\": 100,\n          \"h\": 50\n        }\n      },\n      {\n        \"item\": \"custom_events_ingested\",\n        \"position\": {\n          \"x\": 20,\n          \"y\": 580,\n          \"w\": 600,\n          \"h\": 150\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>Next, you have to add the custom panel to your dashboard page in globalConfig.json.</p> <pre><code>{\n...\n        \"dashboard\": {\n            \"panels\": [\n                {\n                    \"name\": \"default\"\n                },\n                {\n                    \"name\": \"custom\"\n                }\n            ]\n        }\n...\n}\n</code></pre> <p>By default, the custom dashboard will be added as an additional tab under the overview section called <code>Custom</code>.</p> <p></p> <p>If you would like to change the tab name from Custom to any other value, you can do it in the <code>globalConfig.json</code>. Global config, from UCC version v5.47.0, has an additional <code>settings</code> parameter for the dashboard section. To change the name of a custom tab, add the <code>custom_tab_name</code> attribute in the <code>settings</code>.</p> <pre><code>{\n...\n        \"dashboard\": {\n            \"panels\": [\n                {\n                    \"name\": \"custom\"\n                }\n            ],\n            \"settings\": {\n                \"custom_tab_name\": \"My custom tab name\"\n            }\n        },\n...\n}\n</code></pre> <p></p> <p>It is possible to enable only a custom panel. To do this, remove the \u201cdefault\u201d element from globalConfig.json.</p> <pre><code>{\n...\n        \"dashboard\": {\n            \"panels\": [\n                {\n                    \"name\": \"custom\"\n                }\n            ]\n        }\n...\n}\n</code></pre>"},{"location":"dashboard/#data-volume","title":"Data volume","text":"<p>To obtain information on data volume usage, the monitoring dashboard uses logs saved in the <code>license_usage.log</code> file. By default, data filtering for a specific add-on is based on the <code>source</code> (s) and names of individual inputs. e.g.</p> <p><code>...source=*license_usage.log type=Usage (s IN (demo_addon_release_2*,my_input_2*))...</code></p> <p>If data is saved in your add-on with different, non-standard values or if filtering logs using the source is not possible, UCC v5.47 offers the ability to define how the search engine should find data regarding a given add-on. To do this, you need to add the <code>custom_license_usage</code> parameter in globalconfig in the dashboard -&gt; settings section. This parameter takes 2 mandatory items:</p> <ul> <li><code>determine_by</code> -&gt; is used to determine the filtering basis. It can take one of 4 possible arguments: (\u201csource\u201d, \u201csourcetype\u201d, \u201chost\u201d, \u201cindex\u201d).</li> <li><code>search_condition</code> -&gt; list of strings type parameter where you can provide elements that will be used to filter events in the license usage file.</li> </ul> <p>e.g. of globalConfig.json:</p> <pre><code>{\n...\n        \"dashboard\": {\n            \"panels\": [\n                {\n                    \"name\": \"custom\"\n                }\n            ],\n            \"settings\": {\n                \"custom_license_usage\": {\n                    \"determine_by\": \"sourcetype\",\n                    \"search_condition\": [\n                        \"*addon123*\",\n                        \"my_custom_condition*\"\n                    ]\n                }\n            }\n        },\n...\n}\n</code></pre> <p>the above configuration will create the following filter query: <code>...source=*license_usage.log type=Usage (st IN (\"*addon123*\",\"my_custom_condition*\"))...</code></p> <p>Note:</p> <ul> <li>In the Data Ingestion table, the first column displays the <code>View by</code> options list. When you click on any row in this column, a modal opens, showing detailed information such as <code>Data volume</code> and the <code>Number of events</code> over time, visualized in charts. The modal allows you to adjust the options via a dropdown to view data for different View by options. This enables dynamic exploration of data trends for various selected inputs.</li> </ul>"},{"location":"dot_conf_files/","title":".conf files","text":"<p><code>ucc-gen build</code> generates the following <code>.conf</code> files in the <code>default</code> directory. If any of the <code>.conf</code> files are present in the source directory, <code>ucc-gen</code> copies that file to the output folder. The only exception is the <code>app.conf</code> file.</p> <p>For most of the use cases, the generated configuration is sufficient. If you need to adjust the file that is generated, contact Splunk with a feature request. Alternatively, create a file in the <code>default</code> location, so it will accepted without being generated.</p>"},{"location":"dot_conf_files/#appconf","title":"<code>app.conf</code>","text":"<p><code>ucc-gen</code> merges the file present in the <code>default</code> folder with some additional information generated during the build time. But if you don\u2019t need anything specific generated, you don\u2019t need to have <code>app.conf</code> in the source folder.</p> <p>app.conf uses the <code>app.manifest</code> file to determine the add-on description, the add-on name, the add-on title, and the add-on author (taking the first one if multiple are defined). Make sure that your <code>app.manifest</code> is up-to-date, so <code>app.conf</code> will have all relevant information.</p> <p>Also the <code>triggers</code> stanza is created by the <code>ucc-gen build</code> command. <code>ucc-gen build</code> determines what the <code>.conf</code> files are used in the add-on and generates the relevant key-value pairs.</p>"},{"location":"dot_conf_files/#inputsconf","title":"<code>inputs.conf</code>","text":"<p><code>ucc-gen</code> generates a stanza for every input defined in the <code>globalConfig</code> file and sets <code>python.version</code> to <code>python3</code>.</p>"},{"location":"dot_conf_files/#serverconf","title":"<code>server.conf</code>","text":"<p><code>ucc-gen</code> generates the <code>shclustering</code> stanza. This stanza determines which <code>.conf</code> files are used in the add-on and generates the relevant key-value pairs.</p>"},{"location":"dot_conf_files/#webconf","title":"<code>web.conf</code>","text":"<p><code>ucc-gen</code> generates information about the exposed endpoints from the add-on.</p>"},{"location":"dot_conf_files/#restmapconf","title":"<code>restmap.conf</code>","text":"<p><code>ucc-gen</code> generates information about the configuration of every endpoint.</p>"},{"location":"generated_files/","title":"UCC framework generated files","text":"<p>The following table describes the files generated by UCC framework.</p> File Name File Location File Description app.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>app.conf</code> with the details mentioned in globalConfig[meta] inputs.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>inputs.conf</code> and <code>inputs.conf.spec</code> file for the services mentioned in globalConfig server.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>server.conf</code> for the custom conf files created as per configurations in globalConfig restmap.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>restmap.conf</code> for the custom REST handlers that are generated based on configs from globalConfig web.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>web.conf</code> to expose the endpoints generated in <code>restmap.conf</code> which is generated based on configurations from globalConfig. alert_actions.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>alert_actions.conf</code> and <code>alert_actions.conf.spec</code> file for the custom alert actions defined in globalConfig eventtypes.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>eventtypes.conf</code> file if the sourcetype is mentioned in Adaptive Response of custom alert action in globalConfig tags.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>tags.conf</code> file based on the <code>eventtypes.conf</code> created for custom alert actions. commands.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>commands.conf</code> for custom commands provided in the globalConfig. searchbnf.conf output/&lt;YOUR_ADDON_NAME&gt;/default Generates <code>searchbnf.conf</code> for custom search commands provided in the globalConfig. _account.conf output/&lt;YOUR_ADDON_NAME&gt;/README Generates <code>&lt;YOUR_ADDON_NAME&gt;_account.conf.spec</code> file for the configuration mentioned in globalConfig _settings.conf output/&lt;YOUR_ADDON_NAME&gt;/README Generates <code>&lt;YOUR_ADDON_NAME&gt;_settings.conf.spec</code> file for the Proxy, Logging or Custom Tab mentioned in globalConfig configuration.xml output/&lt;YOUR_ADDON_NAME&gt;/default/data/ui/views Generates configuration.xml file in <code>default/data/ui/views/</code> folder if configuration is defined in globalConfig. dashboard.xml output/&lt;YOUR_ADDON_NAME&gt;/default/data/ui/views Generates dashboard.xml file based on dashboard configuration present in globalConfig, in <code>default/data/ui/views</code> folder. default.xml output/&lt;YOUR_ADDON_NAME&gt;/default/data/ui/nav Generates default.xml file based on configs present in globalConfig, in <code>default/data/ui/nav</code> folder. inputs.xml output/&lt;YOUR_ADDON_NAME&gt;/default/data/ui/views Generates inputs.xml based on inputs configuration present in globalConfig, in <code>default/data/ui/views/inputs.xml</code> folder _redirect.xml output/&lt;YOUR_ADDON_NAME&gt;/default/data/ui/views Generates ta_name_redirect.xml file, if oauth is mentioned in globalConfig, in <code>default/data/ui/views/</code> folder. _.html output/&lt;YOUR_ADDON_NAME&gt;/default/data/ui/alerts Generates <code>alert_name.html</code> file based on alerts configuration present in globalConfig, in <code>default/data/ui/alerts</code> folder. _.py output/&lt;YOUR_ADDON_NAME&gt;/bin Generates Python files for custom search commands provided in the globalConfig. globalConfig.json &lt;source_dir&gt; Generates globalConfig.json file in the source code if globalConfig is not present in source directory at build time."},{"location":"metadata/","title":"Metadata","text":"<p>Metadata contains general information about add-on build.</p>"},{"location":"metadata/#metadata-properties","title":"Metadata Properties","text":"Property Type Description displayName* string Name displayed for end user. name* string Name used for API endpoints and all code references separating endpoints from any other app. Please refer to app.conf/[package]/id for more details. restRoot* string String used to create API endpoints, allows alphanumeric and <code>-</code> characters. apiVersion string [Deprecated] Version of used API. version* string Version of the add-on. schemaVersion string Version of JSON schema used in build process. _uccVersion string Version of UCC used during build process. Set by UCC itself. hideUCCVersion boolean Hide the label \u2018Made with UCC\u2019 on the Configuration page. checkForUpdates boolean Ability to configure <code>app.conf-&gt;package.check_for_updates</code> from globalConfig file. Default <code>true</code>. defaultView string Define which view should be loaded on TA load. One of <code>\"inputs\"</code>, <code>\"configuration\"</code>, <code>\"dashboard\"</code> or <code>\"search\"</code>. Default <code>configuration</code>. os-dependentLibraries array This feature allows you to download and unpack libraries with appropriate binaries for the indicated operating system during the build process. supported_themes array This feature is allows you provide the themes supported by your add-on. Supported values: <code>light</code>, <code>dark</code>. No default. isVisible boolean This option allows you to create apps which are not visible by default by setting isVisible=false. Default: true if globalConfig file exists in the repository, else false. showFooter boolean This option allows you to display the footer component on every page of add-on. Default: true if globalConfig file exists in the repository, else false."},{"location":"openapi/","title":"OpenAPI description document","text":"<p>OpenAPI\u2019s description document is generated using the <code>ucc-gen</code> command. There has to be defined, valid <code>globalConfig.json</code> and <code>app.manifest</code> to have the document (<code>appserver/static/openapi.json</code> file) generated.</p>"},{"location":"openapi/#how-to-find-the-document","title":"How to find the document?","text":"<p>Once <code>ucc-gen</code> command is executed, OpenAPI description document is located in the <code>appserver/static</code> output subdirectory.</p> <p>One way to download it is through the button displayed on the top right corner of the configuration page.</p> <p></p> <p>When add-on is installed to Splunk instance, it is exposed via web and management interface, so is available under following addresses accordingly:</p> <ul> <li>[protocol]://[domain]:[port]/en-GB/static/app/[appname]/openapi.json</li> </ul> <p>(eg. http://localhost:8000/en-GB/static/app/Splunk_TA_cisco_meraki/openapi.json)</p> <p>See the following resources for more information on working with the Splunk REST API (for example, how to authenticate):</p> <ul> <li>REST API User Manual</li> <li>REST API Tutorials</li> </ul>"},{"location":"openapi/#where-can-it-be-used","title":"Where can it be used?","text":"<p>The OpenAPI Description document can be used to create:</p> <ul> <li>interactive documentation that generates simple curl requests to all documented endpoints (check this section for the relevant instructions).</li> <li>automation that uses the simple requests to create more complex solutions such as:<ul> <li>orchestration</li> <li>mass load or migration</li> <li>automated tests.</li> </ul> </li> </ul> <p>Check swagger or other tools for more possibilities.</p>"},{"location":"openapi/#how-to-get-curl-commands-and-use-them","title":"How to get curl commands and use them?","text":""},{"location":"openapi/#prerequisites","title":"Prerequisites","text":"<ul> <li>docker running</li> <li>Splunk with your add-on installed</li> </ul>"},{"location":"openapi/#instructions","title":"Instructions","text":"<ol> <li> <p>Open https://editor.swagger.io/    - Alternatively, you can run your own instance of Swagger Editor by running the following command in terminal:</p> <pre><code>docker run -p 8081:8080 swaggerapi/swagger-editor\n</code></pre> <p>Then go to: http://localhost:8081/</p> </li> <li> <p>Load the OpenAPI description document (File &gt; Import file)</p> </li> <li>Check domain and port values for your Splunk instance and Authorize</li> <li>Select method-path pair (eg. GET - /splunk_ta_snow_settings/logging ) and \u201cTry it out\u201d</li> <li>Define parameters and \u201cExecute\u201d</li> <li>Copy curl value, paste to your terminal, ADD <code>-k</code> PARAMETER, and run</li> </ol> <p>See Swagger Editor documentation for questions related to the tool.</p>"},{"location":"openapi/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>SSL certificate problem</li> </ul> <p>Make sure you added <code>-k</code> parameter to the curl command.</p> <ul> <li>Unauthorized</li> </ul> <p>Make sure you clicked the Authorize button, gave the username and password, and then clicked Authorize.</p>"},{"location":"openapi/#how-do-you-generate-python-client-and-then-use-it","title":"How do you generate Python client and then use it?","text":""},{"location":"openapi/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Docker running</li> <li>Python installed</li> <li>Splunk with your add-on installed</li> </ul>"},{"location":"openapi/#instruction","title":"Instruction","text":"<ol> <li>Go to the directory where you downloaded <code>openapi.json</code> file</li> <li> <p>Run the following command: <code>docker run --rm -v ${PWD}:/local openapitools/openapi-generator-cli generate -i /local/openapi.json -g python -o /local/restapi_client</code></p> <ul> <li>make sure <code>openapi.json</code> is in the current directory</li> <li>you can generate clients for other languages as well - run</li> </ul> <p><code>docker run --rm openapitools/openapi-generator-cli generate list</code></p> <p>to see the list of supported languages</p> </li> <li> <p>The client should appear in <code>restapi_client</code>. Open that directory (<code>cd restapi_client</code>)</p> </li> <li>Install the client (<code>pip install .</code>)</li> <li>See <code>README.md</code> for an example of usage</li> </ol>"},{"location":"openapi/#troubleshooting_1","title":"Troubleshooting","text":"<p>In case of an SSL error (e.g. when connecting to localhost), you can disable verification:</p> <pre><code>configuration = openapi_client.Configuration(\n    host = \"https://localhost:8089/servicesNS/-/addon-name\",\n    username = \"user\",\n    password = \"pass\",\n)\n\nconfiguration.verify_ssl = False\n</code></pre> <p>This option should only be used when connecting to a non-prod Splunk instance.</p>"},{"location":"quickstart/","title":"Getting started","text":"<p>Install the UCC framework and start building your first add-on. Then you can build new add-ons from the existing ones.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>Make sure that the following software is installed on your machine:</p> <ul> <li>Python 3.9 or later</li> <li>Git</li> </ul> <p>Note: Git is used to generate the add-on version from the Git tags. Alternatively, you can use the <code>--ta-version</code> parameter and specify the version by yourself.</p>"},{"location":"quickstart/#install","title":"Install","text":""},{"location":"quickstart/#create-and-activate-the-virtual-environment","title":"Create and activate the virtual environment","text":"<p>Depending on which operating system you use, follow one of the procedures:</p>"},{"location":"quickstart/#windows","title":"Windows","text":"<p>Set up the Python virtual environment:</p> <pre><code>python3 -m venv .venv\n</code></pre> <p>If you use cmd.exe, activate the virtual environment with the following command:</p> <pre><code>.venv\\Scripts\\activate.bat\n</code></pre> <p>If you use PowerShell, activate the virtual environment with the following command:</p> <pre><code>.venv\\Scripts\\activate.ps1\n</code></pre>"},{"location":"quickstart/#macos-linux","title":"macOS, Linux","text":"<p>Set up and activate the Python virtual environment:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre>"},{"location":"quickstart/#install-ucc-package","title":"Install UCC package","text":"<p>Install UCC package, it is available on PyPI, see https://pypi.org/project/splunk-add-on-ucc-framework/.</p> <pre><code>pip install splunk-add-on-ucc-framework\n</code></pre>"},{"location":"quickstart/#create-a-new-add-on","title":"Create a new add-on","text":""},{"location":"quickstart/#initialize-a-new-add-on","title":"Initialize a new add-on","text":"<pre><code>ucc-gen init --addon-name \"demo_addon_for_splunk\" --addon-display-name \"Demo Add-on for Splunk\" --addon-input-name demo_input\n</code></pre> <p>For more information about the add-ons naming convention, see Naming conventions for apps and add-ons in Splunkbase</p> <p>The new add-on is located in the <code>demo_addon_for_splunk</code> folder.</p>"},{"location":"quickstart/#build-the-add-on","title":"Build the add-on","text":"<pre><code>ucc-gen build --source demo_addon_for_splunk/package --ta-version 1.0.0\n</code></pre>"},{"location":"quickstart/#package-the-add-on","title":"Package the add-on","text":"<pre><code>ucc-gen package --path output/demo_addon_for_splunk\n</code></pre> <p>The archive is created on the same level as your <code>globalConfig.json</code> file.</p> <p>For more information regarding commands, see Commands.</p>"},{"location":"quickstart/#install-the-add-on","title":"Install the add-on","text":"<p>Go to your Splunk app instance and install this add-on using the generated archive.</p> <p>After you check that the add-on was loaded correctly and all the basic operations are working, you can extend the functionality of the input by copying and pasting the automatically generated modular inputs file into the <code>package/bin</code> folder. The generated inputs use the Splunk SDK for Python. See https://github.com/splunk/splunk-sdk-python.</p> <p>After you update the modular input code, you can run <code>ucc-gen</code> again, and then <code>ucc-gen</code> uses updated modular inputs from <code>package/bin</code> instead of generating new ones.</p>"},{"location":"table/","title":"Table","text":"<p>This is a common feature that is used to display the account and input stanzas on the Inputs and Configuration pages, respectively.</p> <p>Tables include many built-in features such as sorting, filtering, and pagination.</p>"},{"location":"table/#properties","title":"Properties","text":"<ul> <li><code>header</code>* (Array Objects) specifies the list of columns in the table.<ul> <li><code>field</code>* is he name of the field where the column data will be displayed.</li> <li><code>label</code>* is the title of the column.</li> <li>mapping is used to map field values to more meaningful values.</li> <li>customCell is used to modify the default cell values.</li> </ul> </li> <li><code>actions</code>* (Array) specifies  what type of action can be performed on the stanza. The supported types are <code>edit</code>, <code>clone</code>, and <code>delete</code>.</li> <li><code>moreInfo</code> (Array Objects) specifies the list of fields that will be displayed in row form when the user clicks the Row Expand button.<ul> <li><code>field</code> is used to dispaly the data in a column.</li> <li><code>label</code> is the title of the column.</li> <li>mapping is used to map field values to more meaningful values.</li> </ul> </li> <li>customRow can be used to customise the moreInfo Component.</li> </ul>"},{"location":"table/#list-of-built-in-table-fields-for-modular-input","title":"List of built-in table fields for Modular Input","text":"<p>If your add-on has multiple modular inputs and you want to show the input type of each one, use the following in-built field:</p> Field Name description serviceName It indicates the name of the Input service to be displayed in the table, for example, \u201cexample_input_one\u201d. serviceTitle It indicates the title of the Input service to be displayed in the table, for example, \u201cExample Input One\u201d."},{"location":"table/#usage","title":"Usage","text":"<pre><code>\"table\": {\n    \"header\": [\n        {\n            \"label\": \"Name\",\n            \"field\": \"name\"\n        },\n        {\n            \"label\": \"Account\",\n            \"field\": \"account\"\n        },\n        {\n            \"label\": \"Input Type\",\n            \"field\": \"serviceTitle\"\n        },\n        {\n            \"label\": \"Input Service\",\n            \"field\": \"serviceName\"\n        },\n        {\n            \"label\": \"Status\",\n            \"field\": \"disabled\"\n        }\n    ],\n    \"moreInfo\": [\n        {\n            \"label\": \"Name\",\n            \"field\": \"name\"\n        },\n        {\n            \"label\": \"Interval\",\n            \"field\": \"interval\"\n        },\n        {\n            \"label\": \"Index\",\n            \"field\": \"index\"\n        },\n        {\n            \"label\": \"Status\",\n            \"field\": \"disabled\",\n            \"mapping\": {\n                \"true\": \"Disabled\",\n                \"false\": \"Enabled\"\n            }\n        },\n        {\n            \"label\": \"Example Account\",\n            \"field\": \"account\"\n        }\n    ],\n    \"actions\": [\"edit\", \"delete\", \"clone\"]\n}\n</code></pre>"},{"location":"table/#output","title":"Output","text":"<p>This is how it looks in the UI:</p> <p></p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting","title":"General troubleshooting","text":"<p>To be able to troubleshoot the Python part of the add-on, you can use <code>remote_pdb</code>. This can be used for the local development when you have locally installed the Splunk instance and add-on there.</p> <p>Steps to set up:</p> <ul> <li>Put this file in the <code>bin</code> folder</li> <li>Put this line, (<code>import remote_pdb; remote_pdb.RemotePdb(host=\"0.0.0.0\", port=4444).set_trace()</code>), before the line that needs troubleshooting.</li> <li>Go to the console and run <code>telnet 127.0.0.1 4444</code>. It will open a <code>pdb</code> console, where you can start troubleshooting. Refer to the <code>pdb</code> documentation for the available commands.</li> </ul>"},{"location":"troubleshooting/#splunk-calls-your-modular-input-only-once","title":"Splunk calls your modular input only once","text":"<p>If Splunk calls your modular input only once, however, you are specifying an interval within, it should call your script. Check the <code>use_single_instance</code> variable in the <code>get_scheme</code> method of your modular input class. It should be set to False so that Splunk can schedule the input accordingly.</p> <p>Search for \u201cindex=_internal ExecProcessor\u201d and look for \u201cinterval: run once\u201d near your script name in order to understand that Splunk does not schedule your modular input script.</p>"},{"location":"troubleshooting/#modulenotfounderror-no-module-named-library-name","title":"ModuleNotFoundError: No module named \u2018&lt;library-name&gt;\u2018","text":"<p>If you see this message in Splunk when your modular input is being run, it means that Splunk could not find a library that you are trying to import.</p> <p>It can be because:</p> <ul> <li>there is no such library in the <code>package/lib</code> folder. Check your <code>package/lib/requirements.txt</code> file to make sure that you have it as part of the requirements.</li> <li>there is no <code>import import_declare_test</code> at the top of your modular input file. Add the mentioned import to the top of your modular input file.</li> </ul>"},{"location":"troubleshooting/#urllib3-2","title":"urllib3 &gt;= 2","text":"<p>If you are getting an error (in <code>splunkd.log</code>)</p> <pre><code>ImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with OpenSSL 1.0.2k-fips  26 Jan 2017.\nSee: https://github.com/urllib3/urllib3/issues/2168\n</code></pre> <p>when your modular input is running, you need to use <code>urllib3 &lt; 2</code> in your <code>requirements.txt</code> file.</p>"},{"location":"troubleshooting/#compare-add-ons-generated-by-2-different-versions-of-the-ucc-gen-build","title":"Compare add-ons generated by 2 different versions of the <code>ucc-gen build</code>","text":"<p><code>scripts</code> folder has a script, <code>compare_different_ucc_versions_output.sh</code>, which can be used to compare the output of the add-on built by two different versions of the <code>ucc-gen build</code> command.</p> <p>To run it, copy the script to the add-on folder, and then read the instructions in the script itself. If it does not work for your particular case, feel free to adjust it yourself, or file a feature request for us to improve something.</p>"},{"location":"troubleshooting/#something-went-wrong","title":"Something went wrong","text":"<p>During the creation of the add-on, an error, such as incorrect import, unhandled exception etc., can be made in the code of modinput scripts. When the add-on is built, this error is not caught and a package can be installed in Splunk without any problems. However, when you try to enter the add-on page, you will see the message presented above. As this message is not clear, it is not helpful in finding the root cause of the problem.</p> <p>Fortunately, most errors are logged in Splunk on the internal indexes. One of these indexes is <code>_internal</code>.</p> <p>First, search the <code>_internal</code> index for the word <code>ERROR</code> or <code>stderr</code>. Usually the source of these logs is the <code>splunkd</code> process, so it can be used to pre-filter data.</p> <p><code>index = _internal source=*splunkd* ERROR</code> or <code>index = _internal source=*splunkd* stderr</code></p> <p>In the case of small infrastructures, this simple query can return information you need.</p> <p>When the instances are large and they have many applications, each of them can have errors. In addition, some errors are recorded only once when the add-on is installed, so it can be difficult to determine the correct time range.</p> <p>In this case, you can narrow your search to a specific add-on. This may not be easy because no unique parameter is logged that would easily filter out data for a specific add-on. However, you can use the <code>scheme</code> parameter, which is directly correlated with the names of inputs in the add-on.</p> <p>The example of a logged error: </p> <p>Schema logs the input name with a colon at the end, so use an asterisk after entering the name:</p> <pre><code>index = _internal source=*splunkd* \n(\n   (component=ModularInputs stderr)\n   OR component=ExecProcessor (scheme IN (example_input_one*, example_input_two*, example_input_three_abc*))\n) ```Inputs scripts errors```\nOR component=\"PersistentScript\" ```Configuration scripts errors```\n</code></pre> <p>Or you can use a shortened version, using the wildcard mechanic:</p> <pre><code>index = _internal source=*splunkd* \n(\n   (component=ModularInputs stderr)\n   OR component=ExecProcessor (scheme IN (*example_input*))\n) ```Inputs scripts errors```\nOR component=\"PersistentScript\" ```Configuration scripts errors```\n</code></pre> <p>Since in this example we are talking about errors coming from the modular input scripts, another filtering factor, the <code>ModularInputs</code> component, is added. The <code>ExecProcessor</code> component is also included. It is responsible for running and managing scripts.</p>"},{"location":"ucc_related_libraries/","title":"UCC-related libraries","text":"<p>There are two UCC-related libraries:</p> <ul> <li><code>solnlib</code></li> <li><code>splunktaucclib</code></li> </ul>"},{"location":"ucc_related_libraries/#solnlib","title":"<code>solnlib</code>","text":"<p><code>solnlib</code> contains a number of functions and classes that can be used during add-on development. The documentation can be found here.</p> <p>Commonly used modules are:</p> <ul> <li><code>log</code> is for file-based logging to the <code>$SPLUNK_HOME/var/log/splunk</code> folder.</li> <li><code>modular_input.checkpointers</code> contains classes to manage checkpoints.</li> </ul> <p>See the following example of code that can be used to get a logger for a specific add-on:</p> <pre><code>import logging\n\nfrom solnlib import log\n\n\ndef logger_for_input(input_name: str) -&gt; logging.Logger:\n    return log.Logs().get_logger(f\"&lt;add-on name&gt;_{input_name}\")\n</code></pre>"},{"location":"ucc_related_libraries/#splunktaucclib","title":"<code>splunktaucclib</code>","text":"<p><code>splunktaucclib</code> powers the backend of the add-on.</p>"},{"location":"ui_tests_alert_actions_page/","title":"Alert Action Page","text":""},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions","title":"<code>TestAlertActions</code>","text":"<p>         Bases: <code>UccTester</code></p> Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>class TestAlertActions(UccTester):\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.alert\n    def test_action_in_list(self, ucc_smartx_selenium_helper):\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_entity.open()\n        alert_page.alert_entity.add_action_dropdown.wait_for_values()\n        self.assert_util(\n            \"Test Alert\",\n            alert_page.alert_entity.add_action_dropdown.get_value_list,\n            \"in\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.alert\n    def test_dropdown_list(self, ucc_smartx_selenium_helper):\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_entity.open()\n        alert_page.alert_entity.add_action_dropdown.wait_for_values()\n        alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n        self.assert_util(\n            alert_page.action_entity.table_list.list_of_values, [\"Incident\", \"Problem\"]\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.alert\n    def test_account_functionality(\n        self, ucc_smartx_selenium_helper, add_delete_account\n    ):\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_entity.open()\n        alert_page.alert_entity.add_action_dropdown.wait_for_values()\n        alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n        alert_page.action_entity.account.select(\"TestAccount\")\n        alert_page.action_entity.account.wait_for_values()\n        self.assert_util(alert_page.action_entity.account.get_value, \"TestAccount\")\n        alert_page.action_entity.account.cancel_selected_value()\n        alert_page.action_entity.account.wait_for_values()\n        self.assert_util(\n            alert_page.action_entity.account.get_value, \"TestAccount\", \"!=\"\n        )\n        self.assert_util(\n            \"TestAccount\", alert_page.action_entity.account.list_of_values, \"in\"\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.alert\n    def test_checkbox(self, ucc_smartx_selenium_helper):\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_entity.open()\n        alert_page.alert_entity.add_action_dropdown.wait_for_values()\n        alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n        alert_page.action_entity.all_incident.toggle()\n        self.assert_util(alert_page.action_entity.all_incident.is_checked, True)\n        alert_page.action_entity.all_incident.toggle()\n        self.assert_util(alert_page.action_entity.all_incident.is_checked, False)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.alert\n    def test_single_select(self, ucc_smartx_selenium_helper):\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_entity.open()\n        alert_page.alert_entity.add_action_dropdown.wait_for_values()\n        alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n        self.assert_util(\n            alert_page.action_entity.table_list.list_of_values, [\"Incident\", \"Problem\"]\n        )\n        alert_page.action_entity.table_list.select(\"Problem\")\n        self.assert_util(alert_page.action_entity.table_list.get_value, \"Problem\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.alert\n    @pytest.mark.flaky(reruns=5, reruns_delay=5)\n    def test_toggle(self, ucc_smartx_selenium_helper):\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_entity.open()\n        alert_page.alert_entity.add_action_dropdown.wait_for_values()\n        alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n        alert_page.action_entity.action.select(\"Delete\")\n        assert alert_page.action_entity.action.get_value() == \"delete\"\n        alert_page.action_entity.action.select(\"Update\")\n        assert alert_page.action_entity.action.get_value() == \"update\"\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.sanity_test\n    @pytest.mark.alert\n    def test_alert_action_save(\n        self, ucc_smartx_selenium_helper, _clean_alert, add_delete_account\n    ):\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_entity.open()\n        alert_page.alert_entity.add_action_dropdown.wait_for_values()\n\n        # Add Alert Configs\n        alert_page.alert_entity.name.set_value(\"test_alert\")\n        alert_page.alert_entity.search.set_value(\"| search index=_internal\" + \"\\ue007\")\n\n        # Open Action\n        alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n        # Add Action Configs\n        alert_page.action_entity.name.set_value(\"test_action\")\n        alert_page.action_entity.all_incident.toggle()\n        alert_page.action_entity.action.select(\"Delete\")\n        alert_page.action_entity.account.select(\"TestAccount\")\n        alert_page.alert_entity.save()\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_table.wait_for_rows_to_appear()\n        assert \"test_alert\" in alert_page.alert_table.get_column_values(\"name\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.alert\n    def test_alert_help_text_entity(self, ucc_smartx_selenium_helper):\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_entity.open()\n        alert_page.alert_entity.add_action_dropdown.wait_for_values()\n        alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n        self.assert_util(\n            alert_page.action_entity.name.get_help_text, \"Please enter your name\"\n        )\n        self.assert_util(\n            alert_page.action_entity.all_incident.get_help_text,\n            \"Tick if you want to update all incidents/problems\",\n        )\n        self.assert_util(\n            alert_page.action_entity.table_list.get_help_text, \"Please select the table\"\n        )\n        self.assert_util(\n            alert_page.action_entity.action.get_help_text,\n            \"Select the action you want to perform\",\n        )\n        self.assert_util(\n            alert_page.action_entity.account.get_help_text,\n            \"Select the account from the dropdown\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.alert\n    def test_alert_action_label_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the alert field labels\"\"\"\n        alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n        alert_page.alert_entity.open()\n        alert_page.alert_entity.add_action_dropdown.wait_for_values()\n        alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n        self.assert_util(alert_page.action_entity.name.get_input_label, \"Name *\")\n        self.assert_util(\n            alert_page.action_entity.table_list.get_input_label, \"Table List\"\n        )\n        self.assert_util(alert_page.action_entity.action.get_input_label, \"Action:\")\n        self.assert_util(\n            alert_page.action_entity.account.get_input_label, \"Select Account *\"\n        )\n</code></pre>"},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions.test_account_functionality","title":"<code>test_account_functionality(ucc_smartx_selenium_helper, add_delete_account)</code>","text":"Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.alert\ndef test_account_functionality(\n    self, ucc_smartx_selenium_helper, add_delete_account\n):\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_entity.open()\n    alert_page.alert_entity.add_action_dropdown.wait_for_values()\n    alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n    alert_page.action_entity.account.select(\"TestAccount\")\n    alert_page.action_entity.account.wait_for_values()\n    self.assert_util(alert_page.action_entity.account.get_value, \"TestAccount\")\n    alert_page.action_entity.account.cancel_selected_value()\n    alert_page.action_entity.account.wait_for_values()\n    self.assert_util(\n        alert_page.action_entity.account.get_value, \"TestAccount\", \"!=\"\n    )\n    self.assert_util(\n        \"TestAccount\", alert_page.action_entity.account.list_of_values, \"in\"\n    )\n</code></pre>"},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions.test_action_in_list","title":"<code>test_action_in_list(ucc_smartx_selenium_helper)</code>","text":"Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.alert\ndef test_action_in_list(self, ucc_smartx_selenium_helper):\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_entity.open()\n    alert_page.alert_entity.add_action_dropdown.wait_for_values()\n    self.assert_util(\n        \"Test Alert\",\n        alert_page.alert_entity.add_action_dropdown.get_value_list,\n        \"in\",\n    )\n</code></pre>"},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions.test_alert_action_label_entity","title":"<code>test_alert_action_label_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the alert field labels</p> Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.alert\ndef test_alert_action_label_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the alert field labels\"\"\"\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_entity.open()\n    alert_page.alert_entity.add_action_dropdown.wait_for_values()\n    alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n    self.assert_util(alert_page.action_entity.name.get_input_label, \"Name *\")\n    self.assert_util(\n        alert_page.action_entity.table_list.get_input_label, \"Table List\"\n    )\n    self.assert_util(alert_page.action_entity.action.get_input_label, \"Action:\")\n    self.assert_util(\n        alert_page.action_entity.account.get_input_label, \"Select Account *\"\n    )\n</code></pre>"},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions.test_alert_action_save","title":"<code>test_alert_action_save(ucc_smartx_selenium_helper, _clean_alert, add_delete_account)</code>","text":"Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.sanity_test\n@pytest.mark.alert\ndef test_alert_action_save(\n    self, ucc_smartx_selenium_helper, _clean_alert, add_delete_account\n):\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_entity.open()\n    alert_page.alert_entity.add_action_dropdown.wait_for_values()\n\n    # Add Alert Configs\n    alert_page.alert_entity.name.set_value(\"test_alert\")\n    alert_page.alert_entity.search.set_value(\"| search index=_internal\" + \"\\ue007\")\n\n    # Open Action\n    alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n    # Add Action Configs\n    alert_page.action_entity.name.set_value(\"test_action\")\n    alert_page.action_entity.all_incident.toggle()\n    alert_page.action_entity.action.select(\"Delete\")\n    alert_page.action_entity.account.select(\"TestAccount\")\n    alert_page.alert_entity.save()\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_table.wait_for_rows_to_appear()\n    assert \"test_alert\" in alert_page.alert_table.get_column_values(\"name\")\n</code></pre>"},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions.test_alert_help_text_entity","title":"<code>test_alert_help_text_entity(ucc_smartx_selenium_helper)</code>","text":"Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.alert\ndef test_alert_help_text_entity(self, ucc_smartx_selenium_helper):\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_entity.open()\n    alert_page.alert_entity.add_action_dropdown.wait_for_values()\n    alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n    self.assert_util(\n        alert_page.action_entity.name.get_help_text, \"Please enter your name\"\n    )\n    self.assert_util(\n        alert_page.action_entity.all_incident.get_help_text,\n        \"Tick if you want to update all incidents/problems\",\n    )\n    self.assert_util(\n        alert_page.action_entity.table_list.get_help_text, \"Please select the table\"\n    )\n    self.assert_util(\n        alert_page.action_entity.action.get_help_text,\n        \"Select the action you want to perform\",\n    )\n    self.assert_util(\n        alert_page.action_entity.account.get_help_text,\n        \"Select the account from the dropdown\",\n    )\n</code></pre>"},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions.test_checkbox","title":"<code>test_checkbox(ucc_smartx_selenium_helper)</code>","text":"Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.alert\ndef test_checkbox(self, ucc_smartx_selenium_helper):\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_entity.open()\n    alert_page.alert_entity.add_action_dropdown.wait_for_values()\n    alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n    alert_page.action_entity.all_incident.toggle()\n    self.assert_util(alert_page.action_entity.all_incident.is_checked, True)\n    alert_page.action_entity.all_incident.toggle()\n    self.assert_util(alert_page.action_entity.all_incident.is_checked, False)\n</code></pre>"},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions.test_dropdown_list","title":"<code>test_dropdown_list(ucc_smartx_selenium_helper)</code>","text":"Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.alert\ndef test_dropdown_list(self, ucc_smartx_selenium_helper):\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_entity.open()\n    alert_page.alert_entity.add_action_dropdown.wait_for_values()\n    alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n    self.assert_util(\n        alert_page.action_entity.table_list.list_of_values, [\"Incident\", \"Problem\"]\n    )\n</code></pre>"},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions.test_single_select","title":"<code>test_single_select(ucc_smartx_selenium_helper)</code>","text":"Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.alert\ndef test_single_select(self, ucc_smartx_selenium_helper):\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_entity.open()\n    alert_page.alert_entity.add_action_dropdown.wait_for_values()\n    alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n    self.assert_util(\n        alert_page.action_entity.table_list.list_of_values, [\"Incident\", \"Problem\"]\n    )\n    alert_page.action_entity.table_list.select(\"Problem\")\n    self.assert_util(alert_page.action_entity.table_list.get_value, \"Problem\")\n</code></pre>"},{"location":"ui_tests_alert_actions_page/#tests.ui.test_alert_actions_page.TestAlertActions.test_toggle","title":"<code>test_toggle(ucc_smartx_selenium_helper)</code>","text":"Source code in <code>tests/ui/test_alert_actions_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.alert\n@pytest.mark.flaky(reruns=5, reruns_delay=5)\ndef test_toggle(self, ucc_smartx_selenium_helper):\n    alert_page = AlertPage(ucc_smartx_selenium_helper, None)\n    alert_page.alert_entity.open()\n    alert_page.alert_entity.add_action_dropdown.wait_for_values()\n    alert_page.alert_entity.add_action_dropdown.select_action(\"Test Alert\")\n\n    alert_page.action_entity.action.select(\"Delete\")\n    assert alert_page.action_entity.action.get_value() == \"delete\"\n    alert_page.action_entity.action.select(\"Update\")\n    assert alert_page.action_entity.action.get_value() == \"update\"\n</code></pre>"},{"location":"ui_tests_config_page_account/","title":"Account","text":""},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount","title":"<code>TestAccount</code>","text":"<p>         Bases: <code>UccTester</code></p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>class TestAccount(UccTester):\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_default_rows_in_table(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the default number of rows in the table\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(account.table.get_row_count, 0)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_sort_functionality(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_account\n    ):\n        \"\"\"Verifies sorting functionality for name column\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.sort_column(\"Name\")\n        sort_order = account.table.get_sort_order()\n        column_values = list(account.table.get_column_values(\"Name\"))\n        column_values = list(str(item) for item in column_values)\n        sorted_values = sorted(column_values, key=str.lower)\n        self.assert_util(sort_order[\"header\"].lower(), \"name\")\n        self.assert_util(column_values, sorted_values)\n        self.assert_util(sort_order[\"ascending\"], True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_count(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_account\n    ):\n        \"\"\"Verifies count on table\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            account.table.get_count_title,\n            f\"{len(account.backend_conf.get_all_stanzas())} Items\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_filter_functionality_negative(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the filter functionality (Negative)\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.set_filter(\"hello\")\n        self.assert_util(account.table.get_row_count, 0)\n        self.assert_util(\n            account.table.get_count_title,\n            f\"{account.table.get_row_count()} Item\",\n        )\n        account.table.clean_filter()\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_filter_functionality_positive(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the filter functionality (Positive)\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.set_filter(\"TestAccount\")\n        self.assert_util(account.table.get_row_count, 1)\n        self.assert_util(\n            account.table.get_count_title,\n            f\"{account.table.get_row_count()} Item\",\n        )\n        account.table.clean_filter()\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_pagination(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_account\n    ):\n        \"\"\"Verifies pagination list\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        name_column_page1 = account.table.get_column_values(\"name\")\n        account.table.switch_to_next()\n        name_column_page2 = account.table.get_column_values(\"name\")\n        self.assert_util(name_column_page1, name_column_page2, \"!=\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_add_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the title of the 'Add Entity'\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(\n            account.entity.title.container.get_attribute(\"textContent\").strip(),\n            \"Add Account\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_edit_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the title of the 'Edit Entity'\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(\n            account.entity.title.container.get_attribute(\"textContent\").strip(),\n            \"Update Account\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_clone_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the title of the 'Clone Entity'\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(\n            account.entity.title.container.get_attribute(\"textContent\").strip(),\n            \"Clone Account\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_delete_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the title of the 'Delete Entity'\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.delete_row(_ACCOUNT_CONFIG[\"name\"], prompt_msg=True)\n        self.assert_util(\n            account.entity.title.container.get_attribute(\"textContent\").strip(),\n            \"Delete Confirmation\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_add_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies close functionality at time of add\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(account.entity.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_add_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies cancel functionality at time of add\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(account.entity.cancel, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_delete_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies close functionality at time of delete\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            account.table.delete_row,\n            True,\n            left_args={\"name\": _ACCOUNT_CONFIG[\"name\"], \"close\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_delete_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies cancel functionality at time of delete\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n\n        self.assert_util(\n            account.table.delete_row,\n            True,\n            left_args={\"name\": _ACCOUNT_CONFIG[\"name\"], \"cancel\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_edit_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies close functionality at time of edit\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(account.entity.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_edit_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies cancel functionality at time of edit\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(account.entity.cancel, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_clone_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies close functionality at time of clone\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(account.entity.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_clone_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies cancel functionality at time of clone\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(account.entity.cancel, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_delete_valid_prompt_message(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the prompt message of the 'Delete Entity'\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        prompt_message = account.table.delete_row(\n            _ACCOUNT_CONFIG[\"name\"], prompt_msg=True\n        )\n        self.assert_util(\n            prompt_message,\n            'Are you sure you want to delete \"{}\" ? Ensure that no input is '\n            'configured with \"{}\" as this will stop data collection for '\n            \"that input.\".format(_ACCOUNT_CONFIG[\"name\"], _ACCOUNT_CONFIG[\"name\"]),\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_required_field_username(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field username\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.environment.select(\"Value2\")\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.password.set_value(\"TestEditPassword\")\n        account.entity.security_token.set_value(\"TestEditToken\")\n        account.entity.account_radio.select(\"No\")\n        self.assert_util(\n            account.entity.save,\n            \"Field Username is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_required_field_password(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field password\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.environment.select(\"Value2\")\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.username.set_value(\"TestEditUser\")\n        account.entity.security_token.set_value(\"TestEditToken\")\n        account.entity.account_radio.select(\"No\")\n        self.assert_util(\n            account.entity.save,\n            \"Field Password is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_encrypted_field_password(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies if the password field is masked or not in the Textbox\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        textbox_type = account.entity.password.get_type()\n        self.assert_util(textbox_type, \"password\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_required_field_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field name\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.environment.select(\"Value2\")\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.username.set_value(\"TestEditUser\")\n        account.entity.password.set_value(\"TestEditPassword\")\n        account.entity.security_token.set_value(\"TestEditToken\")\n        account.entity.account_radio.select(\"No\")\n        self.assert_util(\n            account.entity.save,\n            \"Field Name is required\",\n            left_args={\"expect_error\": True},\n        )\n        account.entity.name.set_value(\"abc\")\n        self.assert_util(account.entity.is_error_closed, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_basic_fields_label_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies basic account field label\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(account.entity.name.get_input_label, \"Name\")\n        self.assert_util(\n            account.entity.environment.get_input_label, \"Example Environment\"\n        )\n        self.assert_util(\n            account.entity.example_checkbox.get_input_label, \"Example Checkbox\"\n        )\n        self.assert_util(account.entity.account_radio.get_input_label, \"Example Radio\")\n        self.assert_util(\n            account.entity.multiple_select.get_input_label, \"Example Multiple Select\"\n        )\n        self.assert_util(account.entity.auth_key.get_input_label, \"Auth Type\")\n        self.assert_util(account.entity.username.get_input_label, \"Username\")\n        self.assert_util(account.entity.password.get_input_label, \"Password\")\n        self.assert_util(\n            account.entity.security_token.get_input_label, \"Security Token\"\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_oauth_fields_label_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies oauth account field label\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n        self.assert_util(account.entity.name.get_input_label, \"Name\")\n        self.assert_util(\n            account.entity.environment.get_input_label, \"Example Environment\"\n        )\n        self.assert_util(\n            account.entity.example_checkbox.get_input_label, \"Example Checkbox\"\n        )\n        self.assert_util(account.entity.account_radio.get_input_label, \"Example Radio\")\n        self.assert_util(\n            account.entity.multiple_select.get_input_label, \"Example Multiple Select\"\n        )\n        self.assert_util(account.entity.auth_key.get_input_label, \"Auth Type\")\n        self.assert_util(account.entity.client_id.get_input_label, \"Client Id\")\n        self.assert_util(account.entity.client_secret.get_input_label, \"Client Secret\")\n        self.assert_util(account.entity.redirect_url.get_input_label, \"Redirect url\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_oauth_fields_different_tab(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies oauth account field label\"\"\"\n        account = AccountPage(\n            ucc_smartx_selenium_helper, ucc_smartx_rest_helper, name=\"organization\"\n        )\n        account.entity.open()\n        self.assert_util(account.entity.client_id.get_input_label, \"Client Id\")\n        self.assert_util(account.entity.client_secret.get_input_label, \"Client Secret\")\n        self.assert_util(account.entity.redirect_url.get_input_label, \"Redirect url\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_oauth_login(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, oauth_server_port\n    ):\n        \"\"\"Verifies oauth account field label\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG_OAUTH[\"name\"])\n        account.entity.multiple_select.select(\"Option One\")\n        account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n        account.entity.client_id.set_value(\"demo\")\n        account.entity.client_secret.set_value(\"demo\")\n        account.entity.endpoint_authorize.set_value(f\"localhost:{oauth_server_port}\")\n        # Use host.docker.internal to access host from container\n        account.entity.endpoint_token.set_value(\n            f\"host.docker.internal:{oauth_server_port}\"\n        )\n\n        # Get current window handle before triggering OAuth flow\n        original_window = ucc_smartx_selenium_helper.browser.current_window_handle\n        original_windows = set(ucc_smartx_selenium_helper.browser.window_handles)\n\n        # Trigger OAuth flow - this will open a new window\n        account.entity.save()\n\n        # Wait for new window to appear and switch to it\n        wait = WebDriverWait(ucc_smartx_selenium_helper.browser, 5)\n        wait.until(lambda driver: len(driver.window_handles) &gt; len(original_windows))\n\n        # Find and switch to the new window\n        all_windows = set(ucc_smartx_selenium_helper.browser.window_handles)\n        new_window = (all_windows - original_windows).pop()\n        ucc_smartx_selenium_helper.browser.switch_to.window(new_window)\n\n        # Interact with OAuth login form\n        wait.until(EC.presence_of_element_located((By.ID, \"email\")))\n\n        email_field = ucc_smartx_selenium_helper.browser.find_element(By.ID, \"email\")\n        password_field = ucc_smartx_selenium_helper.browser.find_element(\n            By.ID, \"password\"\n        )\n        submit_button = ucc_smartx_selenium_helper.browser.find_element(\n            By.CSS_SELECTOR, \"button[type='submit']\"\n        )\n\n        # Fill and submit the OAuth login form\n        email_field.send_keys(\"test@example.com\")\n        password_field.send_keys(\"good\")  # The test server expects \"good\" as password\n        submit_button.click()\n\n        # Wait for redirect back to original application\n        wait.until(lambda driver: len(driver.window_handles) == len(original_windows))\n\n        # Switch back to original window\n        ucc_smartx_selenium_helper.browser.switch_to.window(original_window)\n\n        # Wait for the OAuth flow to complete and verify no errors\n        wait.until(lambda driver: account.entity.is_error_closed())\n        self.assert_util(account.entity.is_error_closed, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.account\n    def test_account_help_text_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies help text for the field name\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(\n            account.entity.name.get_help_text, \"Enter a unique name for this account.\"\n        )\n        self.assert_util(\n            account.entity.example_checkbox.get_help_text,\n            \"This is an example checkbox for the account entity\",\n        )\n        self.assert_util(\n            account.entity.account_radio.get_help_text,\n            \"This is an example radio button for the account entity. Read more about it here (Opens new window)\",\n        )\n        self.assert_util(\n            account.entity.multiple_select.get_help_text,\n            \"This is an example multipleSelect for account entity\",\n        )\n        self.assert_util(\n            account.entity.username.get_help_text,\n            \"Enter the username for this account.\",\n        )\n        self.assert_util(\n            account.entity.password.get_help_text,\n            \"Enter the password for this account.\",\n        )\n        self.assert_util(\n            account.entity.security_token.get_help_text, \"Enter the security token.\"\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_required_field_example_multiple_select(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field example multiple select\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.environment.select(\"Value2\")\n        account.entity.username.set_value(\"TestEditUser\")\n        account.entity.password.set_value(\"TestEditPassword\")\n        account.entity.security_token.set_value(\"TestEditToken\")\n        account.entity.account_radio.select(\"No\")\n        self.assert_util(\n            account.entity.save,\n            \"Field Example Multiple Select is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_required_field_client_id(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field client id\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.environment.select(\"Value2\")\n        account.entity.account_radio.select(\"No\")\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n        self.assert_util(\n            account.entity.save,\n            \"Field Client Id is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_required_field_client_secret(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field client secret\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.multiple_select.select(\"Option One\")\n        account.entity.account_radio.select(\"No\")\n        account.entity.client_id.set_value(\"TestClientId\")\n        self.assert_util(\n            account.entity.save,\n            \"Field Client Secret is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_encrypted_field_client_secret(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies if the password field is masked or not in the Textbox\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n        textbox_type = account.entity.client_secret.get_type()\n        self.assert_util(textbox_type, \"password\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_valid_account_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies whether adding special characters, number in starting of name field displays validation error\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n        account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n        account.entity.name.set_value(\"123TestAccount\")\n        self.assert_util(\n            account.entity.save,\n            \"Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n            left_args={\"expect_error\": True},\n        )\n        account.entity.name.set_value(\"TestAccount&amp;\")\n        self.assert_util(\n            account.entity.save,\n            \"Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n            left_args={\"expect_error\": True},\n        )\n        account.entity.name.set_value(\"a\" * 51)\n        self.assert_util(\n            account.entity.save,\n            \"Length of ID should be between 1 and 50\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_valid_length_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the name field should not be more than 50 characters\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n        account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n        account.entity.name.set_value(\"t\" * 51)\n        self.assert_util(\n            account.entity.save,\n            \"Length of ID should be between 1 and 50\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_default_value_example_environment(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of example environment\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n        self.assert_util(account.entity.environment.get_value, \"Value1\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_list_example_environment(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies example environment list dropdown\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(\n            account.entity.environment.list_of_values, [\"Value1\", \"Value2\", \"Other\"]\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_default_value_auth_type(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of auth type\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(account.entity.auth_key.get_value, \"basic\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_list_auth_type(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies auth type list dropdown\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(\n            account.entity.auth_key.list_of_values(),\n            [\n                \"Basic Authentication/Authorization\",\n                \"OAuth 2.0 - Authorization Code Grant Type\",\n                \"OAuth 2.0 - Client Credentials Grant Type\",\n                \"Certificate Authorization\",\n            ],\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_checked_example_checkbox(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies Check/Uncheck in example checkbox\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.example_checkbox.check()\n        self.assert_util(account.entity.example_checkbox.is_checked, True)\n        account.entity.example_checkbox.uncheck()\n        self.assert_util(account.entity.example_checkbox.is_checked, False)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_select_value_example_environment(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies example environment select value\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.environment.select(\"Value2\")\n        self.assert_util(account.entity.environment.get_value, \"Value2\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    @pytest.mark.flaky(reruns=5, reruns_delay=5)\n    def test_account_list_example_multiple_select(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies example multiple select list dropdown\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.multiple_select.wait_for(\"input\")\n        account.entity.multiple_select.wait_for_values()\n        self.assert_util(\n            account.entity.multiple_select.list_of_values(),\n            [\"Option One\", \"Option Two\"],\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_select_value_example_multiple_select(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies example multiple select value\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.multiple_select.select(\"Option One\")\n        account.entity.multiple_select.select(\"Option Two\")\n        self.assert_util(\n            account.entity.multiple_select.get_values, [\"Option One\", \"Option Two\"]\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_search_value_example_multiple_select(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies example multiple select search functionality\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(\n            account.entity.multiple_select.search_get_list,\n            [\"Option One\"],\n            left_args={\"value\": \"Option One\"},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_default_value_example_radio(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of example radio\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        self.assert_util(account.entity.account_radio.get_value, \"Yes\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_add_account_duplicate_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies by saving an entity with duplicate name at time of add it displays and error\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.multiple_select.select(\"Option One\")\n        account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n        account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n        account.entity.account_radio.select(\"Yes\")\n        self.assert_util(\n            account.entity.save,\n            \"Name {} is already in use\".format(_ACCOUNT_CONFIG[\"name\"]),\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    @pytest.mark.sanity_test\n    def test_account_delete_row_frontend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the frontend delete functionlity\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.delete_row(_ACCOUNT_CONFIG[\"name\"])\n        account.table.wait_for_rows_to_appear(0)\n        self.assert_util(_ACCOUNT_CONFIG[\"name\"], account.table.get_table, \"not in\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_edit_uneditable_field_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the frontend uneditable fields at time of edit of the account\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(account.entity.name.is_editable, False)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_credentials_encrypted_value(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the default number of rows in the table\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.wait_for_rows_to_appear(1)\n        assert account.backend_conf.get_stanza(_ACCOUNT_CONFIG[\"name\"]) == {\n            \"account_checkbox\": \"1\",\n            \"account_multiple_select\": _ACCOUNT_CONFIG[\"account_multiple_select\"],\n            \"account_radio\": \"1\",\n            \"auth_type\": _ACCOUNT_CONFIG[\"auth_type\"],\n            \"username\": _ACCOUNT_CONFIG[\"username\"],\n            \"custom_endpoint\": _ACCOUNT_CONFIG[\"custom_endpoint\"],\n            \"disabled\": False,\n            \"example_textarea_field_basic_oauth\": _ACCOUNT_CONFIG[\n                \"example_textarea_field_basic_oauth\"\n            ],\n            \"password\": \"******\",\n            \"token\": \"******\",\n            \"url\": \"https://test.example.com\",\n        }\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    @pytest.mark.sanity_test\n    def test_account_add_frontend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the frontend after adding account\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n        account.entity.multiple_select.select(\"Option One\")\n        account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n        account.entity.security_token.set_value(\"TestToken\")\n        account.entity.text_area_basic_oauth.set_value(\n            _ACCOUNT_CONFIG[\"example_textarea_field_basic_oauth\"]\n        )\n        self.assert_util(account.entity.save, True)\n        account.table.wait_for_rows_to_appear(1)\n        self.assert_util(\n            account.table.get_table()[_ACCOUNT_CONFIG[\"name\"]],\n            {\n                \"name\": _ACCOUNT_CONFIG[\"name\"],\n                \"auth type\": \"basic\",\n                \"test custom cell\": \"Option One\",\n                \"actions\": \"Edit | Clone | Delete\",\n            },\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    @pytest.mark.sanity_test\n    def test_account_edit_frontend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the frontend edit functionality\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.environment.select(\"Value2\")\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.username.set_value(\"TestEditUser\")\n        account.entity.password.set_value(\"TestEditPassword\")\n        account.entity.security_token.set_value(\"TestEditToken\")\n        account.entity.account_radio.select(\"No\")\n        self.assert_util(account.entity.save, True)\n        account.table.wait_for_rows_to_appear(1)\n        self.assert_util(\n            account.table.get_table()[_ACCOUNT_CONFIG[\"name\"]],\n            {\n                \"name\": \"TestAccount\",\n                \"auth type\": \"basic\",\n                \"test custom cell\": \"Option is not available\",\n                \"actions\": \"Edit | Clone | Delete\",\n            },\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_clone_account_duplicate_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies by saving an entity with duplicate name at time of clone it displays and error\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(\n            account.entity.save,\n            \"Name {} is already in use\".format(_ACCOUNT_CONFIG[\"name\"]),\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    @pytest.mark.sanity_test\n    def test_account_clone_frontend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the frontend clone functionality\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.wait_for_rows_to_appear(1)\n        account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.name.set_value(\"TestAccount2\")\n        account.entity.username.set_value(\"TestUserClone\")\n        account.entity.password.set_value(\"TestPasswordClone\")\n        account.entity.security_token.set_value(\"TestTokenClone\")\n        account.entity.account_radio.select(\"Yes\")\n        self.assert_util(account.entity.save, True)\n        self.assert_util(\n            account.table.get_table()[\"TestAccount2\"],\n            {\n                \"name\": \"TestAccount2\",\n                \"auth type\": \"basic\",\n                \"test custom cell\": \"Option One\",\n                \"actions\": \"Edit | Clone | Delete\",\n            },\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_clone_default_values(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the frontend default fields at time of clone\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(account.entity.name.get_value, \"\")\n        self.assert_util(account.entity.environment.get_value, \"Value1\")\n        self.assert_util(\n            account.entity.example_checkbox.is_checked(),\n            _ACCOUNT_CONFIG[\"account_checkbox\"],\n        )\n        self.assert_util(account.entity.multiple_select.get_values, [\"Option One\"])\n        self.assert_util(\n            account.entity.auth_key.get_value, _ACCOUNT_CONFIG[\"auth_type\"]\n        )\n        self.assert_util(account.entity.username.get_value, _ACCOUNT_CONFIG[\"username\"])\n        self.assert_util(account.entity.password.get_value, \"\")\n        self.assert_util(account.entity.security_token.get_value, \"\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    @pytest.mark.sanity_test\n    def test_account_add_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the account in backend after adding account from frontend\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n        account.entity.multiple_select.select(\"Option One\")\n        account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n        account.entity.security_token.set_value(_ACCOUNT_CONFIG[\"token\"])\n        self.assert_util(account.entity.save, True)\n        account.table.wait_for_rows_to_appear(1)\n        assert account.backend_conf.get_stanza(\n            _ACCOUNT_CONFIG[\"name\"], decrypt=True\n        ) == {\n            \"account_multiple_select\": _ACCOUNT_CONFIG[\"account_multiple_select\"],\n            \"account_radio\": \"1\",\n            \"auth_type\": _ACCOUNT_CONFIG[\"auth_type\"],\n            \"username\": _ACCOUNT_CONFIG[\"username\"],\n            \"custom_endpoint\": _ACCOUNT_CONFIG[\"custom_endpoint\"],\n            \"disabled\": False,\n            \"password\": _ACCOUNT_CONFIG[\"password\"],\n            \"token\": _ACCOUNT_CONFIG[\"token\"],\n        }\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    @pytest.mark.sanity_test\n    def test_account_edit_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the account in backend after editing account from frontend\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.username.set_value(\"TestEditUser\")\n        account.entity.password.set_value(\"TestEditPassword\")\n        account.entity.security_token.set_value(\"TestEditToken\")\n        account.entity.account_radio.select(\"No\")\n        account.entity.save()\n        account.table.wait_for_rows_to_appear(1)\n        assert account.backend_conf.get_stanza(\n            _ACCOUNT_CONFIG[\"name\"], decrypt=True\n        ) == {\n            \"account_checkbox\": \"1\",\n            \"account_multiple_select\": \"one,two\",\n            \"account_radio\": \"0\",\n            \"auth_type\": \"basic\",\n            \"username\": \"TestEditUser\",\n            \"custom_endpoint\": \"login.example.com\",\n            \"disabled\": False,\n            \"example_textarea_field_basic_oauth\": \"line1\\nline2\\nline3\\nline4\\nline5\",\n            \"password\": \"TestEditPassword\",\n            \"token\": \"TestEditToken\",\n            \"url\": \"https://test.example.com\",\n        }\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    @pytest.mark.sanity_test\n    def test_account_clone_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the account in backend after cloning account from frontend\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.wait_for_rows_to_appear(1)\n        account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.name.set_value(\"TestAccountClone\")\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.username.set_value(\"TestCloneUser\")\n        account.entity.password.set_value(\"TestEditPassword\")\n        account.entity.security_token.set_value(\"TestEditToken\")\n        account.entity.account_radio.select(\"No\")\n        account.entity.save()\n        account.table.wait_for_rows_to_appear(2)\n        assert account.backend_conf.get_stanza(\"TestAccountClone\", decrypt=True) == {\n            \"account_checkbox\": \"1\",\n            \"account_multiple_select\": \"one,two\",\n            \"account_radio\": \"0\",\n            \"auth_type\": \"basic\",\n            \"username\": \"TestCloneUser\",\n            \"custom_endpoint\": \"login.example.com\",\n            \"disabled\": False,\n            \"example_textarea_field_basic_oauth\": _ACCOUNT_CONFIG[\n                \"example_textarea_field_basic_oauth\"\n            ],\n            \"password\": \"TestEditPassword\",\n            \"token\": \"TestEditToken\",\n            \"url\": \"https://test.example.com\",\n        }\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    @pytest.mark.sanity_test\n    def test_account_delete_row_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies the account in backend after deleting the account from frontend\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.delete_row(_ACCOUNT_CONFIG[\"name\"])\n        account.table.wait_for_rows_to_appear(0)\n        self.assert_util(\n            _ACCOUNT_CONFIG[\"name\"],\n            account.backend_conf.get_all_stanzas().keys(),\n            \"not in\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_helplink(self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper):\n        \"\"\"Verifies whether the table help link redirects to the correct URL\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        go_to_link = \"https://docs.splunk.com/Documentation\"\n        account.entity.open()\n\n        assert (\n            account.entity.help_link.internal_container.get_attribute(\"href\")\n            == go_to_link\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.account\n    def test_account_delete_account_in_use(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies by deleting the input used account\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            account.table.delete_row,\n            r'Are you sure you want to delete \"TestAccount\" ? Ensure that no '\n            r'input is configured with \"TestAccount\" as this will stop '\n            r\"data collection for that input.\",\n            left_args={\"name\": _ACCOUNT_CONFIG[\"name\"], \"prompt_msg\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.account\n    @pytest.mark.forwarder\n    def test_account_displayed_columns(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies headers of account table\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        expected_headers = [\n            \"Name\",\n            \"Auth Type\",\n            \"Test Custom Cell\",\n            \"Actions\",\n        ]\n        self.assert_util(list(account.table.get_headers()), expected_headers)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.account\n    @pytest.mark.forwarder\n    def test_account_action_values(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verifies action items for accout page\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        expected_actions = [\"Edit\", \"Clone\", \"Delete\"]\n        self.assert_util(\n            list(account.table.get_list_of_actions(_ACCOUNT_CONFIG[\"name\"])),\n            expected_actions,\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.account\n    @pytest.mark.forwarder\n    def test_account_edit_default_values(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n    ):\n        \"\"\"Verification of default values in fields at time of edit\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(account.entity.name.get_value, _ACCOUNT_CONFIG[\"name\"])\n        self.assert_util(account.entity.environment.get_value, \"Value1\")\n        self.assert_util(\n            account.entity.example_checkbox.is_checked(),\n            _ACCOUNT_CONFIG[\"account_checkbox\"],\n        )\n        # self.assert_util(account.entity.account_radio.get_value, \"Yes\")\n        self.assert_util(account.entity.multiple_select.get_values, [\"Option One\"])\n        self.assert_util(\n            account.entity.auth_key.get_value, _ACCOUNT_CONFIG[\"auth_type\"]\n        )\n        self.assert_util(account.entity.username.get_value, _ACCOUNT_CONFIG[\"username\"])\n        self.assert_util(account.entity.password.get_value, \"\")\n        self.assert_util(account.entity.security_token.get_value, \"\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.account\n    @pytest.mark.forwarder\n    def test_account_title_and_description(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies title and discription\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(account.title.wait_to_display, \"Configuration\")\n        self.assert_util(\n            account.description.wait_to_display,\n            \"Set up your add-on\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.account\n    @pytest.mark.forwarder\n    def test_account_valid_input_account_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies validation of field account_name\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(\"1234\")\n        account.entity.URL.set_value(_ACCOUNT_CONFIG.get(\"url\"))\n        if account.entity.auth_type.get_value() == \"oauth\":\n            account.entity.auth_type.select(_ACCOUNT_CONFIG.get(\"auth_type\"))\n        account.entity.username.set_value(_ACCOUNT_CONFIG.get(\"username\"))\n        account.entity.password.set_value(_ACCOUNT_CONFIG.get(\"password\"))\n        self.assert_util(\n            account.entity.save,\n            \"Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.account\n    @pytest.mark.forwarder\n    def test_account_select_value_auth_type(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Select the all the values from single select and verifies the selected value\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        auth_value_dict = {\n            \"basic\": \"Basic Authentication/Authorization\",\n            \"oauth\": \"OAuth 2.0 - Authorization Code Grant Type\",\n        }\n        for auth_type_value, auth_type_name in auth_value_dict.items():\n            if account.entity.auth_type.get_value() != auth_type_value:\n                account.entity.auth_type.select(auth_type_name)\n            self.assert_util(account.entity.auth_type.get_value, auth_type_value)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.account\n    @pytest.mark.forwarder\n    def test_account_add_reserved_value_account_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Select the all the values from single select and verifies the selected value\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(\"default\")\n        account.entity.URL.set_value(_ACCOUNT_CONFIG.get(\"url\"))\n        if account.entity.auth_type.get_value() == \"oauth\":\n            account.entity.auth_type.select(_ACCOUNT_CONFIG.get(\"auth_type\"))\n        account.entity.username.set_value(_ACCOUNT_CONFIG.get(\"username\"))\n        account.entity.password.set_value(_ACCOUNT_CONFIG.get(\"password\"))\n        self.assert_util(\n            account.entity.save(expect_error=True),\n            r'\"default\", \".\", \"..\", string started with \"_\" and string including any one of [\"*\", \"\\\", \"[\", \"]\", \"(\", \")\", \"?\", \":\"] are reserved value which cannot be used for field Name',  # noqa: E501\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.account\n    @pytest.mark.forwarder\n    def test_account_url_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG.get(\"name\"))\n        invalid_url = \"invalid_url\"\n        account.entity.URL.set_value(invalid_url)\n        self.assert_util(\n            account.entity.save(expect_error=True),\n            \"Invalid URL provided. URL should start with 'https' as only secure URLs are supported. Provide URL in this format\",  # noqa: E501\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_validation_of_oauth_fields_too_short(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field client id\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.environment.select(\"Value2\")\n        account.entity.account_radio.select(\"No\")\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.username.set_value(\"TestClientId\")\n        account.entity.password.set_value(\"ClientSecretTest\")\n        account.entity.security_token.set_value(\"SecurityTokenTest\")\n        account.entity.basic_oauth_text.set_value(\"Invalid\")\n\n        self.assert_util(\n            account.entity.save,\n            \"Length should be between 10 and 4096\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_validation_of_oauth_fields_wrong_characters(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field client id\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.environment.select(\"Value2\")\n        account.entity.account_radio.select(\"No\")\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.username.set_value(\"TestClientId\")\n        account.entity.password.set_value(\"ClientSecretTest\")\n        account.entity.security_token.set_value(\"SecurityTokenTest\")\n        account.entity.basic_oauth_text.set_value(\n            \"Invalid due to special characters: !@#$%^&amp;*()\"\n        )\n\n        self.assert_util(\n            account.entity.save,\n            \"Do not use special characters\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_validation_of_oauth_valid(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field client id\"\"\"\n        account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        account.entity.open()\n        account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n        account.entity.environment.select(\"Value2\")\n        account.entity.account_radio.select(\"No\")\n        account.entity.multiple_select.select(\"Option Two\")\n        account.entity.username.set_value(\"TestClientId\")\n        account.entity.password.set_value(\"ClientSecretTest\")\n        account.entity.security_token.set_value(\"SecurityTokenTest\")\n        account.entity.basic_oauth_text.set_value(\"Valid_text_for_oauth\")\n\n        self.assert_util(account.entity.save, True)\n\n        account.table.wait_for_rows_to_appear(1)\n\n        self.assert_util(\n            account.table.get_table()[_ACCOUNT_CONFIG[\"name\"]],\n            {\n                \"name\": _ACCOUNT_CONFIG[\"name\"],\n                \"auth type\": \"basic\",\n                \"test custom cell\": \"Option Two\",\n                \"actions\": \"Edit | Clone | Delete\",\n            },\n        )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_action_values","title":"<code>test_account_action_values(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies action items for accout page</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.account\n@pytest.mark.forwarder\ndef test_account_action_values(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies action items for accout page\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    expected_actions = [\"Edit\", \"Clone\", \"Delete\"]\n    self.assert_util(\n        list(account.table.get_list_of_actions(_ACCOUNT_CONFIG[\"name\"])),\n        expected_actions,\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_add_backend_validation","title":"<code>test_account_add_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the account in backend after adding account from frontend</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\n@pytest.mark.sanity_test\ndef test_account_add_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the account in backend after adding account from frontend\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n    account.entity.multiple_select.select(\"Option One\")\n    account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n    account.entity.security_token.set_value(_ACCOUNT_CONFIG[\"token\"])\n    self.assert_util(account.entity.save, True)\n    account.table.wait_for_rows_to_appear(1)\n    assert account.backend_conf.get_stanza(\n        _ACCOUNT_CONFIG[\"name\"], decrypt=True\n    ) == {\n        \"account_multiple_select\": _ACCOUNT_CONFIG[\"account_multiple_select\"],\n        \"account_radio\": \"1\",\n        \"auth_type\": _ACCOUNT_CONFIG[\"auth_type\"],\n        \"username\": _ACCOUNT_CONFIG[\"username\"],\n        \"custom_endpoint\": _ACCOUNT_CONFIG[\"custom_endpoint\"],\n        \"disabled\": False,\n        \"password\": _ACCOUNT_CONFIG[\"password\"],\n        \"token\": _ACCOUNT_CONFIG[\"token\"],\n    }\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_add_cancel_entity","title":"<code>test_account_add_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies cancel functionality at time of add</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_add_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies cancel functionality at time of add\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(account.entity.cancel, True)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_add_close_entity","title":"<code>test_account_add_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies close functionality at time of add</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_add_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies close functionality at time of add\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(account.entity.close, True)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_add_frontend_validation","title":"<code>test_account_add_frontend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the frontend after adding account</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\n@pytest.mark.sanity_test\ndef test_account_add_frontend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the frontend after adding account\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n    account.entity.multiple_select.select(\"Option One\")\n    account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n    account.entity.security_token.set_value(\"TestToken\")\n    account.entity.text_area_basic_oauth.set_value(\n        _ACCOUNT_CONFIG[\"example_textarea_field_basic_oauth\"]\n    )\n    self.assert_util(account.entity.save, True)\n    account.table.wait_for_rows_to_appear(1)\n    self.assert_util(\n        account.table.get_table()[_ACCOUNT_CONFIG[\"name\"]],\n        {\n            \"name\": _ACCOUNT_CONFIG[\"name\"],\n            \"auth type\": \"basic\",\n            \"test custom cell\": \"Option One\",\n            \"actions\": \"Edit | Clone | Delete\",\n        },\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_add_reserved_value_account_name","title":"<code>test_account_add_reserved_value_account_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Select the all the values from single select and verifies the selected value</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.account\n@pytest.mark.forwarder\ndef test_account_add_reserved_value_account_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Select the all the values from single select and verifies the selected value\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(\"default\")\n    account.entity.URL.set_value(_ACCOUNT_CONFIG.get(\"url\"))\n    if account.entity.auth_type.get_value() == \"oauth\":\n        account.entity.auth_type.select(_ACCOUNT_CONFIG.get(\"auth_type\"))\n    account.entity.username.set_value(_ACCOUNT_CONFIG.get(\"username\"))\n    account.entity.password.set_value(_ACCOUNT_CONFIG.get(\"password\"))\n    self.assert_util(\n        account.entity.save(expect_error=True),\n        r'\"default\", \".\", \"..\", string started with \"_\" and string including any one of [\"*\", \"\\\", \"[\", \"]\", \"(\", \")\", \"?\", \":\"] are reserved value which cannot be used for field Name',  # noqa: E501\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_add_valid_title","title":"<code>test_account_add_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the title of the \u2018Add Entity\u2019</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_add_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the title of the 'Add Entity'\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(\n        account.entity.title.container.get_attribute(\"textContent\").strip(),\n        \"Add Account\",\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_basic_fields_label_entity","title":"<code>test_account_basic_fields_label_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies basic account field label</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_basic_fields_label_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies basic account field label\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(account.entity.name.get_input_label, \"Name\")\n    self.assert_util(\n        account.entity.environment.get_input_label, \"Example Environment\"\n    )\n    self.assert_util(\n        account.entity.example_checkbox.get_input_label, \"Example Checkbox\"\n    )\n    self.assert_util(account.entity.account_radio.get_input_label, \"Example Radio\")\n    self.assert_util(\n        account.entity.multiple_select.get_input_label, \"Example Multiple Select\"\n    )\n    self.assert_util(account.entity.auth_key.get_input_label, \"Auth Type\")\n    self.assert_util(account.entity.username.get_input_label, \"Username\")\n    self.assert_util(account.entity.password.get_input_label, \"Password\")\n    self.assert_util(\n        account.entity.security_token.get_input_label, \"Security Token\"\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_checked_example_checkbox","title":"<code>test_account_checked_example_checkbox(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies Check/Uncheck in example checkbox</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_checked_example_checkbox(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies Check/Uncheck in example checkbox\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.example_checkbox.check()\n    self.assert_util(account.entity.example_checkbox.is_checked, True)\n    account.entity.example_checkbox.uncheck()\n    self.assert_util(account.entity.example_checkbox.is_checked, False)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_clone_backend_validation","title":"<code>test_account_clone_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the account in backend after cloning account from frontend</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\n@pytest.mark.sanity_test\ndef test_account_clone_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the account in backend after cloning account from frontend\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.wait_for_rows_to_appear(1)\n    account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.name.set_value(\"TestAccountClone\")\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.username.set_value(\"TestCloneUser\")\n    account.entity.password.set_value(\"TestEditPassword\")\n    account.entity.security_token.set_value(\"TestEditToken\")\n    account.entity.account_radio.select(\"No\")\n    account.entity.save()\n    account.table.wait_for_rows_to_appear(2)\n    assert account.backend_conf.get_stanza(\"TestAccountClone\", decrypt=True) == {\n        \"account_checkbox\": \"1\",\n        \"account_multiple_select\": \"one,two\",\n        \"account_radio\": \"0\",\n        \"auth_type\": \"basic\",\n        \"username\": \"TestCloneUser\",\n        \"custom_endpoint\": \"login.example.com\",\n        \"disabled\": False,\n        \"example_textarea_field_basic_oauth\": _ACCOUNT_CONFIG[\n            \"example_textarea_field_basic_oauth\"\n        ],\n        \"password\": \"TestEditPassword\",\n        \"token\": \"TestEditToken\",\n        \"url\": \"https://test.example.com\",\n    }\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_clone_cancel_entity","title":"<code>test_account_clone_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies cancel functionality at time of clone</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_clone_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies cancel functionality at time of clone\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(account.entity.cancel, True)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_clone_close_entity","title":"<code>test_account_clone_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies close functionality at time of clone</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_clone_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies close functionality at time of clone\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(account.entity.close, True)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_clone_default_values","title":"<code>test_account_clone_default_values(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the frontend default fields at time of clone</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_clone_default_values(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the frontend default fields at time of clone\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(account.entity.name.get_value, \"\")\n    self.assert_util(account.entity.environment.get_value, \"Value1\")\n    self.assert_util(\n        account.entity.example_checkbox.is_checked(),\n        _ACCOUNT_CONFIG[\"account_checkbox\"],\n    )\n    self.assert_util(account.entity.multiple_select.get_values, [\"Option One\"])\n    self.assert_util(\n        account.entity.auth_key.get_value, _ACCOUNT_CONFIG[\"auth_type\"]\n    )\n    self.assert_util(account.entity.username.get_value, _ACCOUNT_CONFIG[\"username\"])\n    self.assert_util(account.entity.password.get_value, \"\")\n    self.assert_util(account.entity.security_token.get_value, \"\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_clone_frontend_validation","title":"<code>test_account_clone_frontend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the frontend clone functionality</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\n@pytest.mark.sanity_test\ndef test_account_clone_frontend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the frontend clone functionality\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.wait_for_rows_to_appear(1)\n    account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.name.set_value(\"TestAccount2\")\n    account.entity.username.set_value(\"TestUserClone\")\n    account.entity.password.set_value(\"TestPasswordClone\")\n    account.entity.security_token.set_value(\"TestTokenClone\")\n    account.entity.account_radio.select(\"Yes\")\n    self.assert_util(account.entity.save, True)\n    self.assert_util(\n        account.table.get_table()[\"TestAccount2\"],\n        {\n            \"name\": \"TestAccount2\",\n            \"auth type\": \"basic\",\n            \"test custom cell\": \"Option One\",\n            \"actions\": \"Edit | Clone | Delete\",\n        },\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_clone_valid_title","title":"<code>test_account_clone_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the title of the \u2018Clone Entity\u2019</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_clone_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the title of the 'Clone Entity'\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(\n        account.entity.title.container.get_attribute(\"textContent\").strip(),\n        \"Clone Account\",\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_count","title":"<code>test_account_count(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_account)</code>","text":"<p>Verifies count on table</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_count(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_account\n):\n    \"\"\"Verifies count on table\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        account.table.get_count_title,\n        f\"{len(account.backend_conf.get_all_stanzas())} Items\",\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_credentials_encrypted_value","title":"<code>test_account_credentials_encrypted_value(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the default number of rows in the table</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_credentials_encrypted_value(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the default number of rows in the table\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.wait_for_rows_to_appear(1)\n    assert account.backend_conf.get_stanza(_ACCOUNT_CONFIG[\"name\"]) == {\n        \"account_checkbox\": \"1\",\n        \"account_multiple_select\": _ACCOUNT_CONFIG[\"account_multiple_select\"],\n        \"account_radio\": \"1\",\n        \"auth_type\": _ACCOUNT_CONFIG[\"auth_type\"],\n        \"username\": _ACCOUNT_CONFIG[\"username\"],\n        \"custom_endpoint\": _ACCOUNT_CONFIG[\"custom_endpoint\"],\n        \"disabled\": False,\n        \"example_textarea_field_basic_oauth\": _ACCOUNT_CONFIG[\n            \"example_textarea_field_basic_oauth\"\n        ],\n        \"password\": \"******\",\n        \"token\": \"******\",\n        \"url\": \"https://test.example.com\",\n    }\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_default_rows_in_table","title":"<code>test_account_default_rows_in_table(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the default number of rows in the table</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_default_rows_in_table(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the default number of rows in the table\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(account.table.get_row_count, 0)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_default_value_auth_type","title":"<code>test_account_default_value_auth_type(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of auth type</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_default_value_auth_type(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of auth type\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(account.entity.auth_key.get_value, \"basic\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_default_value_example_environment","title":"<code>test_account_default_value_example_environment(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of example environment</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_default_value_example_environment(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of example environment\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n    self.assert_util(account.entity.environment.get_value, \"Value1\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_default_value_example_radio","title":"<code>test_account_default_value_example_radio(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of example radio</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_default_value_example_radio(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of example radio\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(account.entity.account_radio.get_value, \"Yes\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_delete_account_in_use","title":"<code>test_account_delete_account_in_use(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies by deleting the input used account</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_delete_account_in_use(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies by deleting the input used account\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        account.table.delete_row,\n        r'Are you sure you want to delete \"TestAccount\" ? Ensure that no '\n        r'input is configured with \"TestAccount\" as this will stop '\n        r\"data collection for that input.\",\n        left_args={\"name\": _ACCOUNT_CONFIG[\"name\"], \"prompt_msg\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_delete_cancel_entity","title":"<code>test_account_delete_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies cancel functionality at time of delete</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_delete_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies cancel functionality at time of delete\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n\n    self.assert_util(\n        account.table.delete_row,\n        True,\n        left_args={\"name\": _ACCOUNT_CONFIG[\"name\"], \"cancel\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_delete_close_entity","title":"<code>test_account_delete_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies close functionality at time of delete</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_delete_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies close functionality at time of delete\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        account.table.delete_row,\n        True,\n        left_args={\"name\": _ACCOUNT_CONFIG[\"name\"], \"close\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_delete_row_backend_validation","title":"<code>test_account_delete_row_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the account in backend after deleting the account from frontend</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\n@pytest.mark.sanity_test\ndef test_account_delete_row_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the account in backend after deleting the account from frontend\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.delete_row(_ACCOUNT_CONFIG[\"name\"])\n    account.table.wait_for_rows_to_appear(0)\n    self.assert_util(\n        _ACCOUNT_CONFIG[\"name\"],\n        account.backend_conf.get_all_stanzas().keys(),\n        \"not in\",\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_delete_row_frontend_validation","title":"<code>test_account_delete_row_frontend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the frontend delete functionlity</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\n@pytest.mark.sanity_test\ndef test_account_delete_row_frontend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the frontend delete functionlity\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.delete_row(_ACCOUNT_CONFIG[\"name\"])\n    account.table.wait_for_rows_to_appear(0)\n    self.assert_util(_ACCOUNT_CONFIG[\"name\"], account.table.get_table, \"not in\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_delete_valid_prompt_message","title":"<code>test_account_delete_valid_prompt_message(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the prompt message of the \u2018Delete Entity\u2019</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_delete_valid_prompt_message(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the prompt message of the 'Delete Entity'\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    prompt_message = account.table.delete_row(\n        _ACCOUNT_CONFIG[\"name\"], prompt_msg=True\n    )\n    self.assert_util(\n        prompt_message,\n        'Are you sure you want to delete \"{}\" ? Ensure that no input is '\n        'configured with \"{}\" as this will stop data collection for '\n        \"that input.\".format(_ACCOUNT_CONFIG[\"name\"], _ACCOUNT_CONFIG[\"name\"]),\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_delete_valid_title","title":"<code>test_account_delete_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the title of the \u2018Delete Entity\u2019</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_delete_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the title of the 'Delete Entity'\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.delete_row(_ACCOUNT_CONFIG[\"name\"], prompt_msg=True)\n    self.assert_util(\n        account.entity.title.container.get_attribute(\"textContent\").strip(),\n        \"Delete Confirmation\",\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_displayed_columns","title":"<code>test_account_displayed_columns(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies headers of account table</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.account\n@pytest.mark.forwarder\ndef test_account_displayed_columns(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies headers of account table\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    expected_headers = [\n        \"Name\",\n        \"Auth Type\",\n        \"Test Custom Cell\",\n        \"Actions\",\n    ]\n    self.assert_util(list(account.table.get_headers()), expected_headers)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_edit_backend_validation","title":"<code>test_account_edit_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the account in backend after editing account from frontend</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\n@pytest.mark.sanity_test\ndef test_account_edit_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the account in backend after editing account from frontend\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.username.set_value(\"TestEditUser\")\n    account.entity.password.set_value(\"TestEditPassword\")\n    account.entity.security_token.set_value(\"TestEditToken\")\n    account.entity.account_radio.select(\"No\")\n    account.entity.save()\n    account.table.wait_for_rows_to_appear(1)\n    assert account.backend_conf.get_stanza(\n        _ACCOUNT_CONFIG[\"name\"], decrypt=True\n    ) == {\n        \"account_checkbox\": \"1\",\n        \"account_multiple_select\": \"one,two\",\n        \"account_radio\": \"0\",\n        \"auth_type\": \"basic\",\n        \"username\": \"TestEditUser\",\n        \"custom_endpoint\": \"login.example.com\",\n        \"disabled\": False,\n        \"example_textarea_field_basic_oauth\": \"line1\\nline2\\nline3\\nline4\\nline5\",\n        \"password\": \"TestEditPassword\",\n        \"token\": \"TestEditToken\",\n        \"url\": \"https://test.example.com\",\n    }\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_edit_cancel_entity","title":"<code>test_account_edit_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies cancel functionality at time of edit</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_edit_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies cancel functionality at time of edit\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(account.entity.cancel, True)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_edit_close_entity","title":"<code>test_account_edit_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies close functionality at time of edit</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_edit_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies close functionality at time of edit\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(account.entity.close, True)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_edit_default_values","title":"<code>test_account_edit_default_values(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verification of default values in fields at time of edit</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.account\n@pytest.mark.forwarder\ndef test_account_edit_default_values(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verification of default values in fields at time of edit\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(account.entity.name.get_value, _ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(account.entity.environment.get_value, \"Value1\")\n    self.assert_util(\n        account.entity.example_checkbox.is_checked(),\n        _ACCOUNT_CONFIG[\"account_checkbox\"],\n    )\n    # self.assert_util(account.entity.account_radio.get_value, \"Yes\")\n    self.assert_util(account.entity.multiple_select.get_values, [\"Option One\"])\n    self.assert_util(\n        account.entity.auth_key.get_value, _ACCOUNT_CONFIG[\"auth_type\"]\n    )\n    self.assert_util(account.entity.username.get_value, _ACCOUNT_CONFIG[\"username\"])\n    self.assert_util(account.entity.password.get_value, \"\")\n    self.assert_util(account.entity.security_token.get_value, \"\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_edit_frontend_validation","title":"<code>test_account_edit_frontend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the frontend edit functionality</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\n@pytest.mark.sanity_test\ndef test_account_edit_frontend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the frontend edit functionality\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.environment.select(\"Value2\")\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.username.set_value(\"TestEditUser\")\n    account.entity.password.set_value(\"TestEditPassword\")\n    account.entity.security_token.set_value(\"TestEditToken\")\n    account.entity.account_radio.select(\"No\")\n    self.assert_util(account.entity.save, True)\n    account.table.wait_for_rows_to_appear(1)\n    self.assert_util(\n        account.table.get_table()[_ACCOUNT_CONFIG[\"name\"]],\n        {\n            \"name\": \"TestAccount\",\n            \"auth type\": \"basic\",\n            \"test custom cell\": \"Option is not available\",\n            \"actions\": \"Edit | Clone | Delete\",\n        },\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_edit_uneditable_field_name","title":"<code>test_account_edit_uneditable_field_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the frontend uneditable fields at time of edit of the account</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_edit_uneditable_field_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the frontend uneditable fields at time of edit of the account\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(account.entity.name.is_editable, False)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_edit_valid_title","title":"<code>test_account_edit_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the title of the \u2018Edit Entity\u2019</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_edit_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the title of the 'Edit Entity'\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.edit_row(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(\n        account.entity.title.container.get_attribute(\"textContent\").strip(),\n        \"Update Account\",\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_encrypted_field_client_secret","title":"<code>test_account_encrypted_field_client_secret(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies if the password field is masked or not in the Textbox</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_encrypted_field_client_secret(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies if the password field is masked or not in the Textbox\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n    textbox_type = account.entity.client_secret.get_type()\n    self.assert_util(textbox_type, \"password\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_encrypted_field_password","title":"<code>test_account_encrypted_field_password(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies if the password field is masked or not in the Textbox</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_encrypted_field_password(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies if the password field is masked or not in the Textbox\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    textbox_type = account.entity.password.get_type()\n    self.assert_util(textbox_type, \"password\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_filter_functionality_negative","title":"<code>test_account_filter_functionality_negative(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the filter functionality (Negative)</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_filter_functionality_negative(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the filter functionality (Negative)\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.set_filter(\"hello\")\n    self.assert_util(account.table.get_row_count, 0)\n    self.assert_util(\n        account.table.get_count_title,\n        f\"{account.table.get_row_count()} Item\",\n    )\n    account.table.clean_filter()\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_filter_functionality_positive","title":"<code>test_account_filter_functionality_positive(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies the filter functionality (Positive)</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_filter_functionality_positive(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies the filter functionality (Positive)\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.set_filter(\"TestAccount\")\n    self.assert_util(account.table.get_row_count, 1)\n    self.assert_util(\n        account.table.get_count_title,\n        f\"{account.table.get_row_count()} Item\",\n    )\n    account.table.clean_filter()\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_help_text_entity","title":"<code>test_account_help_text_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies help text for the field name</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.account\ndef test_account_help_text_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies help text for the field name\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(\n        account.entity.name.get_help_text, \"Enter a unique name for this account.\"\n    )\n    self.assert_util(\n        account.entity.example_checkbox.get_help_text,\n        \"This is an example checkbox for the account entity\",\n    )\n    self.assert_util(\n        account.entity.account_radio.get_help_text,\n        \"This is an example radio button for the account entity. Read more about it here (Opens new window)\",\n    )\n    self.assert_util(\n        account.entity.multiple_select.get_help_text,\n        \"This is an example multipleSelect for account entity\",\n    )\n    self.assert_util(\n        account.entity.username.get_help_text,\n        \"Enter the username for this account.\",\n    )\n    self.assert_util(\n        account.entity.password.get_help_text,\n        \"Enter the password for this account.\",\n    )\n    self.assert_util(\n        account.entity.security_token.get_help_text, \"Enter the security token.\"\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_helplink","title":"<code>test_account_helplink(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies whether the table help link redirects to the correct URL</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_helplink(self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper):\n    \"\"\"Verifies whether the table help link redirects to the correct URL\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    go_to_link = \"https://docs.splunk.com/Documentation\"\n    account.entity.open()\n\n    assert (\n        account.entity.help_link.internal_container.get_attribute(\"href\")\n        == go_to_link\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_list_auth_type","title":"<code>test_account_list_auth_type(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies auth type list dropdown</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_list_auth_type(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies auth type list dropdown\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(\n        account.entity.auth_key.list_of_values(),\n        [\n            \"Basic Authentication/Authorization\",\n            \"OAuth 2.0 - Authorization Code Grant Type\",\n            \"OAuth 2.0 - Client Credentials Grant Type\",\n            \"Certificate Authorization\",\n        ],\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_list_example_environment","title":"<code>test_account_list_example_environment(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies example environment list dropdown</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_list_example_environment(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies example environment list dropdown\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(\n        account.entity.environment.list_of_values, [\"Value1\", \"Value2\", \"Other\"]\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_list_example_multiple_select","title":"<code>test_account_list_example_multiple_select(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies example multiple select list dropdown</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\n@pytest.mark.flaky(reruns=5, reruns_delay=5)\ndef test_account_list_example_multiple_select(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies example multiple select list dropdown\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.multiple_select.wait_for(\"input\")\n    account.entity.multiple_select.wait_for_values()\n    self.assert_util(\n        account.entity.multiple_select.list_of_values(),\n        [\"Option One\", \"Option Two\"],\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_oauth_fields_different_tab","title":"<code>test_account_oauth_fields_different_tab(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies oauth account field label</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_oauth_fields_different_tab(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies oauth account field label\"\"\"\n    account = AccountPage(\n        ucc_smartx_selenium_helper, ucc_smartx_rest_helper, name=\"organization\"\n    )\n    account.entity.open()\n    self.assert_util(account.entity.client_id.get_input_label, \"Client Id\")\n    self.assert_util(account.entity.client_secret.get_input_label, \"Client Secret\")\n    self.assert_util(account.entity.redirect_url.get_input_label, \"Redirect url\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_oauth_fields_label_entity","title":"<code>test_account_oauth_fields_label_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies oauth account field label</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_oauth_fields_label_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies oauth account field label\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n    self.assert_util(account.entity.name.get_input_label, \"Name\")\n    self.assert_util(\n        account.entity.environment.get_input_label, \"Example Environment\"\n    )\n    self.assert_util(\n        account.entity.example_checkbox.get_input_label, \"Example Checkbox\"\n    )\n    self.assert_util(account.entity.account_radio.get_input_label, \"Example Radio\")\n    self.assert_util(\n        account.entity.multiple_select.get_input_label, \"Example Multiple Select\"\n    )\n    self.assert_util(account.entity.auth_key.get_input_label, \"Auth Type\")\n    self.assert_util(account.entity.client_id.get_input_label, \"Client Id\")\n    self.assert_util(account.entity.client_secret.get_input_label, \"Client Secret\")\n    self.assert_util(account.entity.redirect_url.get_input_label, \"Redirect url\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_oauth_login","title":"<code>test_account_oauth_login(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, oauth_server_port)</code>","text":"<p>Verifies oauth account field label</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_oauth_login(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, oauth_server_port\n):\n    \"\"\"Verifies oauth account field label\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG_OAUTH[\"name\"])\n    account.entity.multiple_select.select(\"Option One\")\n    account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n    account.entity.client_id.set_value(\"demo\")\n    account.entity.client_secret.set_value(\"demo\")\n    account.entity.endpoint_authorize.set_value(f\"localhost:{oauth_server_port}\")\n    # Use host.docker.internal to access host from container\n    account.entity.endpoint_token.set_value(\n        f\"host.docker.internal:{oauth_server_port}\"\n    )\n\n    # Get current window handle before triggering OAuth flow\n    original_window = ucc_smartx_selenium_helper.browser.current_window_handle\n    original_windows = set(ucc_smartx_selenium_helper.browser.window_handles)\n\n    # Trigger OAuth flow - this will open a new window\n    account.entity.save()\n\n    # Wait for new window to appear and switch to it\n    wait = WebDriverWait(ucc_smartx_selenium_helper.browser, 5)\n    wait.until(lambda driver: len(driver.window_handles) &gt; len(original_windows))\n\n    # Find and switch to the new window\n    all_windows = set(ucc_smartx_selenium_helper.browser.window_handles)\n    new_window = (all_windows - original_windows).pop()\n    ucc_smartx_selenium_helper.browser.switch_to.window(new_window)\n\n    # Interact with OAuth login form\n    wait.until(EC.presence_of_element_located((By.ID, \"email\")))\n\n    email_field = ucc_smartx_selenium_helper.browser.find_element(By.ID, \"email\")\n    password_field = ucc_smartx_selenium_helper.browser.find_element(\n        By.ID, \"password\"\n    )\n    submit_button = ucc_smartx_selenium_helper.browser.find_element(\n        By.CSS_SELECTOR, \"button[type='submit']\"\n    )\n\n    # Fill and submit the OAuth login form\n    email_field.send_keys(\"test@example.com\")\n    password_field.send_keys(\"good\")  # The test server expects \"good\" as password\n    submit_button.click()\n\n    # Wait for redirect back to original application\n    wait.until(lambda driver: len(driver.window_handles) == len(original_windows))\n\n    # Switch back to original window\n    ucc_smartx_selenium_helper.browser.switch_to.window(original_window)\n\n    # Wait for the OAuth flow to complete and verify no errors\n    wait.until(lambda driver: account.entity.is_error_closed())\n    self.assert_util(account.entity.is_error_closed, True)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_pagination","title":"<code>test_account_pagination(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_account)</code>","text":"<p>Verifies pagination list</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_pagination(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_account\n):\n    \"\"\"Verifies pagination list\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    name_column_page1 = account.table.get_column_values(\"name\")\n    account.table.switch_to_next()\n    name_column_page2 = account.table.get_column_values(\"name\")\n    self.assert_util(name_column_page1, name_column_page2, \"!=\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_required_field_client_id","title":"<code>test_account_required_field_client_id(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field client id</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_required_field_client_id(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field client id\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.environment.select(\"Value2\")\n    account.entity.account_radio.select(\"No\")\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n    self.assert_util(\n        account.entity.save,\n        \"Field Client Id is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_required_field_client_secret","title":"<code>test_account_required_field_client_secret(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field client secret</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_required_field_client_secret(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field client secret\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.auth_key.select(\"OAuth 2.0 - Authorization Code Grant Type\")\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.multiple_select.select(\"Option One\")\n    account.entity.account_radio.select(\"No\")\n    account.entity.client_id.set_value(\"TestClientId\")\n    self.assert_util(\n        account.entity.save,\n        \"Field Client Secret is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_required_field_example_multiple_select","title":"<code>test_account_required_field_example_multiple_select(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field example multiple select</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_required_field_example_multiple_select(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field example multiple select\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.environment.select(\"Value2\")\n    account.entity.username.set_value(\"TestEditUser\")\n    account.entity.password.set_value(\"TestEditPassword\")\n    account.entity.security_token.set_value(\"TestEditToken\")\n    account.entity.account_radio.select(\"No\")\n    self.assert_util(\n        account.entity.save,\n        \"Field Example Multiple Select is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_required_field_name","title":"<code>test_account_required_field_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field name</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_required_field_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field name\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.environment.select(\"Value2\")\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.username.set_value(\"TestEditUser\")\n    account.entity.password.set_value(\"TestEditPassword\")\n    account.entity.security_token.set_value(\"TestEditToken\")\n    account.entity.account_radio.select(\"No\")\n    self.assert_util(\n        account.entity.save,\n        \"Field Name is required\",\n        left_args={\"expect_error\": True},\n    )\n    account.entity.name.set_value(\"abc\")\n    self.assert_util(account.entity.is_error_closed, True)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_required_field_password","title":"<code>test_account_required_field_password(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field password</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_required_field_password(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field password\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.environment.select(\"Value2\")\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.username.set_value(\"TestEditUser\")\n    account.entity.security_token.set_value(\"TestEditToken\")\n    account.entity.account_radio.select(\"No\")\n    self.assert_util(\n        account.entity.save,\n        \"Field Password is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_required_field_username","title":"<code>test_account_required_field_username(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field username</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_required_field_username(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field username\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.environment.select(\"Value2\")\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.password.set_value(\"TestEditPassword\")\n    account.entity.security_token.set_value(\"TestEditToken\")\n    account.entity.account_radio.select(\"No\")\n    self.assert_util(\n        account.entity.save,\n        \"Field Username is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_search_value_example_multiple_select","title":"<code>test_account_search_value_example_multiple_select(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies example multiple select search functionality</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_search_value_example_multiple_select(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies example multiple select search functionality\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    self.assert_util(\n        account.entity.multiple_select.search_get_list,\n        [\"Option One\"],\n        left_args={\"value\": \"Option One\"},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_select_value_auth_type","title":"<code>test_account_select_value_auth_type(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Select the all the values from single select and verifies the selected value</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.account\n@pytest.mark.forwarder\ndef test_account_select_value_auth_type(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Select the all the values from single select and verifies the selected value\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    auth_value_dict = {\n        \"basic\": \"Basic Authentication/Authorization\",\n        \"oauth\": \"OAuth 2.0 - Authorization Code Grant Type\",\n    }\n    for auth_type_value, auth_type_name in auth_value_dict.items():\n        if account.entity.auth_type.get_value() != auth_type_value:\n            account.entity.auth_type.select(auth_type_name)\n        self.assert_util(account.entity.auth_type.get_value, auth_type_value)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_select_value_example_environment","title":"<code>test_account_select_value_example_environment(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies example environment select value</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_select_value_example_environment(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies example environment select value\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.environment.select(\"Value2\")\n    self.assert_util(account.entity.environment.get_value, \"Value2\")\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_select_value_example_multiple_select","title":"<code>test_account_select_value_example_multiple_select(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies example multiple select value</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_select_value_example_multiple_select(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies example multiple select value\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.multiple_select.select(\"Option One\")\n    account.entity.multiple_select.select(\"Option Two\")\n    self.assert_util(\n        account.entity.multiple_select.get_values, [\"Option One\", \"Option Two\"]\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_sort_functionality","title":"<code>test_account_sort_functionality(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_account)</code>","text":"<p>Verifies sorting functionality for name column</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_sort_functionality(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_account\n):\n    \"\"\"Verifies sorting functionality for name column\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.sort_column(\"Name\")\n    sort_order = account.table.get_sort_order()\n    column_values = list(account.table.get_column_values(\"Name\"))\n    column_values = list(str(item) for item in column_values)\n    sorted_values = sorted(column_values, key=str.lower)\n    self.assert_util(sort_order[\"header\"].lower(), \"name\")\n    self.assert_util(column_values, sorted_values)\n    self.assert_util(sort_order[\"ascending\"], True)\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_title_and_description","title":"<code>test_account_title_and_description(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies title and discription</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.account\n@pytest.mark.forwarder\ndef test_account_title_and_description(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies title and discription\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(account.title.wait_to_display, \"Configuration\")\n    self.assert_util(\n        account.description.wait_to_display,\n        \"Set up your add-on\",\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_url_validation","title":"<code>test_account_url_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.account\n@pytest.mark.forwarder\ndef test_account_url_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG.get(\"name\"))\n    invalid_url = \"invalid_url\"\n    account.entity.URL.set_value(invalid_url)\n    self.assert_util(\n        account.entity.save(expect_error=True),\n        \"Invalid URL provided. URL should start with 'https' as only secure URLs are supported. Provide URL in this format\",  # noqa: E501\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_valid_account_name","title":"<code>test_account_valid_account_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies whether adding special characters, number in starting of name field displays validation error</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_valid_account_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies whether adding special characters, number in starting of name field displays validation error\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n    account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n    account.entity.name.set_value(\"123TestAccount\")\n    self.assert_util(\n        account.entity.save,\n        \"Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n        left_args={\"expect_error\": True},\n    )\n    account.entity.name.set_value(\"TestAccount&amp;\")\n    self.assert_util(\n        account.entity.save,\n        \"Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n        left_args={\"expect_error\": True},\n    )\n    account.entity.name.set_value(\"a\" * 51)\n    self.assert_util(\n        account.entity.save,\n        \"Length of ID should be between 1 and 50\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_valid_input_account_name","title":"<code>test_account_valid_input_account_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies validation of field account_name</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.account\n@pytest.mark.forwarder\ndef test_account_valid_input_account_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies validation of field account_name\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(\"1234\")\n    account.entity.URL.set_value(_ACCOUNT_CONFIG.get(\"url\"))\n    if account.entity.auth_type.get_value() == \"oauth\":\n        account.entity.auth_type.select(_ACCOUNT_CONFIG.get(\"auth_type\"))\n    account.entity.username.set_value(_ACCOUNT_CONFIG.get(\"username\"))\n    account.entity.password.set_value(_ACCOUNT_CONFIG.get(\"password\"))\n    self.assert_util(\n        account.entity.save,\n        \"Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_account_valid_length_name","title":"<code>test_account_valid_length_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the name field should not be more than 50 characters</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_account_valid_length_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the name field should not be more than 50 characters\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n    account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n    account.entity.name.set_value(\"t\" * 51)\n    self.assert_util(\n        account.entity.save,\n        \"Length of ID should be between 1 and 50\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_add_account_duplicate_name","title":"<code>test_add_account_duplicate_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies by saving an entity with duplicate name at time of add it displays and error</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_add_account_duplicate_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies by saving an entity with duplicate name at time of add it displays and error\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.multiple_select.select(\"Option One\")\n    account.entity.username.set_value(_ACCOUNT_CONFIG[\"username\"])\n    account.entity.password.set_value(_ACCOUNT_CONFIG[\"password\"])\n    account.entity.account_radio.select(\"Yes\")\n    self.assert_util(\n        account.entity.save,\n        \"Name {} is already in use\".format(_ACCOUNT_CONFIG[\"name\"]),\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_clone_account_duplicate_name","title":"<code>test_clone_account_duplicate_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account)</code>","text":"<p>Verifies by saving an entity with duplicate name at time of clone it displays and error</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.account\ndef test_clone_account_duplicate_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_account\n):\n    \"\"\"Verifies by saving an entity with duplicate name at time of clone it displays and error\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.table.clone_row(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    self.assert_util(\n        account.entity.save,\n        \"Name {} is already in use\".format(_ACCOUNT_CONFIG[\"name\"]),\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_example_validation_of_oauth_fields_too_short","title":"<code>test_example_validation_of_oauth_fields_too_short(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field client id</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_validation_of_oauth_fields_too_short(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field client id\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.environment.select(\"Value2\")\n    account.entity.account_radio.select(\"No\")\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.username.set_value(\"TestClientId\")\n    account.entity.password.set_value(\"ClientSecretTest\")\n    account.entity.security_token.set_value(\"SecurityTokenTest\")\n    account.entity.basic_oauth_text.set_value(\"Invalid\")\n\n    self.assert_util(\n        account.entity.save,\n        \"Length should be between 10 and 4096\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_example_validation_of_oauth_fields_wrong_characters","title":"<code>test_example_validation_of_oauth_fields_wrong_characters(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field client id</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_validation_of_oauth_fields_wrong_characters(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field client id\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.environment.select(\"Value2\")\n    account.entity.account_radio.select(\"No\")\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.username.set_value(\"TestClientId\")\n    account.entity.password.set_value(\"ClientSecretTest\")\n    account.entity.security_token.set_value(\"SecurityTokenTest\")\n    account.entity.basic_oauth_text.set_value(\n        \"Invalid due to special characters: !@#$%^&amp;*()\"\n    )\n\n    self.assert_util(\n        account.entity.save,\n        \"Do not use special characters\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_account/#tests.ui.test_configuration_page_account_tab.TestAccount.test_example_validation_of_oauth_valid","title":"<code>test_example_validation_of_oauth_valid(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field client id</p> Source code in <code>tests/ui/test_configuration_page_account_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_validation_of_oauth_valid(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field client id\"\"\"\n    account = AccountPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    account.entity.open()\n    account.entity.name.set_value(_ACCOUNT_CONFIG[\"name\"])\n    account.entity.environment.select(\"Value2\")\n    account.entity.account_radio.select(\"No\")\n    account.entity.multiple_select.select(\"Option Two\")\n    account.entity.username.set_value(\"TestClientId\")\n    account.entity.password.set_value(\"ClientSecretTest\")\n    account.entity.security_token.set_value(\"SecurityTokenTest\")\n    account.entity.basic_oauth_text.set_value(\"Valid_text_for_oauth\")\n\n    self.assert_util(account.entity.save, True)\n\n    account.table.wait_for_rows_to_appear(1)\n\n    self.assert_util(\n        account.table.get_table()[_ACCOUNT_CONFIG[\"name\"]],\n        {\n            \"name\": _ACCOUNT_CONFIG[\"name\"],\n            \"auth type\": \"basic\",\n            \"test custom cell\": \"Option Two\",\n            \"actions\": \"Edit | Clone | Delete\",\n        },\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/","title":"Custom","text":""},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage","title":"<code>TestCustomPage</code>","text":"<p>         Bases: <code>UccTester</code></p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>class TestCustomPage(UccTester):\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_fields_label_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies custom fields label\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(custom.test_string.get_input_label, \"Test String\")\n        self.assert_util(custom.test_number.get_input_label, \"Test Number\")\n        self.assert_util(custom.test_regex.get_input_label, \"Test Regex\")\n        self.assert_util(custom.test_email.get_input_label, \"Test Email\")\n        self.assert_util(custom.test_ipv4.get_input_label, \"Test Ipv4\")\n        self.assert_util(custom.test_date.get_input_label, \"Test Date\")\n        self.assert_util(custom.test_url.get_input_label, \"Test Url\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    @pytest.mark.sanity_test\n    def test_custom_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _reset_configuration\n    ):\n        \"\"\"This test case checks the validates frontend save in custom tab\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test_str\")\n        custom.test_number.set_value(\"1\")\n        custom.test_regex.set_value(\"test_rex\")\n        custom.test_email.set_value(\"test@a.b\")\n        custom.test_ipv4.set_value(\"1.10.1.100\")\n        custom.test_date.set_value(\"2020-09-18\")\n        custom.test_url.set_value(\"https://docs.splunk.com/Documentation\")\n        self.assert_util(custom.save, True)\n        self.assert_util(\n            custom.backend_conf.get_stanza,\n            {\n                \"disabled\": False,\n                \"testNumber\": \"1\",\n                \"testRegex\": \"test_rex\",\n                \"testString\": \"test_str\",\n                \"testEmail\": \"test@a.b\",\n                \"testIpv4\": \"1.10.1.100\",\n                \"testDate\": \"2020-09-18\",\n                \"testUrl\": \"https://docs.splunk.com/Documentation\",\n            },\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_valid_length_test_string_greater(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"This test case checks length of test string field should be greater than 4\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test\")\n        self.assert_util(\n            custom.save,\n            r\"Length of Test String should be greater than or equal to 5\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_valid_length_test_string_less(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"This test case checks length of test string field should be less than 11\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test_string\")\n        self.assert_util(\n            custom.save,\n            r\"Length of Test String should be less than or equal to 10\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_valid_input_test_number(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"This test case checks test number field should be integer\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test_str\")\n        custom.test_number.set_value(\"a\")\n        self.assert_util(\n            custom.save,\n            r\"Field Test Number is not a number\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_valid_range_test_number(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"This test case checks range of test number field should be between 1 to 10\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test_str\")\n        custom.test_number.set_value(\"0\")\n        self.assert_util(\n            custom.save,\n            r\"Field Test Number should be within the range of [1 and 10]\",\n            left_args={\"expect_error\": True},\n        )\n        custom.test_number.set_value(\"11\")\n        self.assert_util(\n            custom.save,\n            r\"Field Test Number should be within the range of [1 and 10]\",\n            left_args={\"expect_error\": True},\n        )\n        custom.test_number.set_value(\"10\")\n        self.assert_util(custom.save, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_valid_input_test_regex(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"This test case checks regex of test regex field\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test_str\")\n        custom.test_number.set_value(\"5\")\n        custom.test_regex.set_value(\"$$\")\n        self.assert_util(\n            custom.save,\n            r\"Characters of Name should match regex ^\\w+$ .\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_valid_input_test_email(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"This test case checks test email field should be email\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test_str\")\n        custom.test_number.set_value(\"5\")\n        custom.test_regex.set_value(\"test_rex\")\n        custom.test_email.set_value(\"abc\")\n        self.assert_util(\n            custom.save,\n            r\"Field Test Email is not a valid email address\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_valid_input_test_ipv4(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"This test case checks test ipv4 field should be valid ipv4\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test_str\")\n        custom.test_number.set_value(\"5\")\n        custom.test_regex.set_value(\"test_rex\")\n        custom.test_email.set_value(\"test@a.b\")\n        custom.test_ipv4.set_value(\"10.1.11\")\n        self.assert_util(\n            custom.save,\n            r\"Field Test Ipv4 is not a valid IPV4 address\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_valid_input_test_date(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"This test case checks test date field should be in ISO 8601 format\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test_str\")\n        custom.test_number.set_value(\"5\")\n        custom.test_regex.set_value(\"test_rex\")\n        custom.test_email.set_value(\"test@a.b\")\n        custom.test_ipv4.set_value(\"10.1.11.1\")\n        custom.test_date.set_value(\"20-10-2020\")\n        self.assert_util(\n            custom.save,\n            r\"Field Test Date is not a valid date in ISO 8601 format\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.custom\n    def test_custom_valid_input_test_url(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"This test case checks test url field should be valid url\"\"\"\n        custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        custom.test_string.set_value(\"test_str\")\n        custom.test_number.set_value(\"5\")\n        custom.test_regex.set_value(\"test_rex\")\n        custom.test_email.set_value(\"test@a.b\")\n        custom.test_ipv4.set_value(\"10.1.11.1\")\n        custom.test_date.set_value(\"2020-09-18\")\n        custom.test_url.set_value(\"\\\\\\\\\")\n        self.assert_util(\n            custom.save,\n            r\"Field Test Url is not a valid URL\",\n            left_args={\"expect_error\": True},\n        )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_fields_label_entity","title":"<code>test_custom_fields_label_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies custom fields label</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_fields_label_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies custom fields label\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(custom.test_string.get_input_label, \"Test String\")\n    self.assert_util(custom.test_number.get_input_label, \"Test Number\")\n    self.assert_util(custom.test_regex.get_input_label, \"Test Regex\")\n    self.assert_util(custom.test_email.get_input_label, \"Test Email\")\n    self.assert_util(custom.test_ipv4.get_input_label, \"Test Ipv4\")\n    self.assert_util(custom.test_date.get_input_label, \"Test Date\")\n    self.assert_util(custom.test_url.get_input_label, \"Test Url\")\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_frontend_backend_validation","title":"<code>test_custom_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _reset_configuration)</code>","text":"<p>This test case checks the validates frontend save in custom tab</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\n@pytest.mark.sanity_test\ndef test_custom_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _reset_configuration\n):\n    \"\"\"This test case checks the validates frontend save in custom tab\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test_str\")\n    custom.test_number.set_value(\"1\")\n    custom.test_regex.set_value(\"test_rex\")\n    custom.test_email.set_value(\"test@a.b\")\n    custom.test_ipv4.set_value(\"1.10.1.100\")\n    custom.test_date.set_value(\"2020-09-18\")\n    custom.test_url.set_value(\"https://docs.splunk.com/Documentation\")\n    self.assert_util(custom.save, True)\n    self.assert_util(\n        custom.backend_conf.get_stanza,\n        {\n            \"disabled\": False,\n            \"testNumber\": \"1\",\n            \"testRegex\": \"test_rex\",\n            \"testString\": \"test_str\",\n            \"testEmail\": \"test@a.b\",\n            \"testIpv4\": \"1.10.1.100\",\n            \"testDate\": \"2020-09-18\",\n            \"testUrl\": \"https://docs.splunk.com/Documentation\",\n        },\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_valid_input_test_date","title":"<code>test_custom_valid_input_test_date(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>This test case checks test date field should be in ISO 8601 format</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_valid_input_test_date(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"This test case checks test date field should be in ISO 8601 format\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test_str\")\n    custom.test_number.set_value(\"5\")\n    custom.test_regex.set_value(\"test_rex\")\n    custom.test_email.set_value(\"test@a.b\")\n    custom.test_ipv4.set_value(\"10.1.11.1\")\n    custom.test_date.set_value(\"20-10-2020\")\n    self.assert_util(\n        custom.save,\n        r\"Field Test Date is not a valid date in ISO 8601 format\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_valid_input_test_email","title":"<code>test_custom_valid_input_test_email(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>This test case checks test email field should be email</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_valid_input_test_email(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"This test case checks test email field should be email\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test_str\")\n    custom.test_number.set_value(\"5\")\n    custom.test_regex.set_value(\"test_rex\")\n    custom.test_email.set_value(\"abc\")\n    self.assert_util(\n        custom.save,\n        r\"Field Test Email is not a valid email address\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_valid_input_test_ipv4","title":"<code>test_custom_valid_input_test_ipv4(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>This test case checks test ipv4 field should be valid ipv4</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_valid_input_test_ipv4(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"This test case checks test ipv4 field should be valid ipv4\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test_str\")\n    custom.test_number.set_value(\"5\")\n    custom.test_regex.set_value(\"test_rex\")\n    custom.test_email.set_value(\"test@a.b\")\n    custom.test_ipv4.set_value(\"10.1.11\")\n    self.assert_util(\n        custom.save,\n        r\"Field Test Ipv4 is not a valid IPV4 address\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_valid_input_test_number","title":"<code>test_custom_valid_input_test_number(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>This test case checks test number field should be integer</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_valid_input_test_number(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"This test case checks test number field should be integer\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test_str\")\n    custom.test_number.set_value(\"a\")\n    self.assert_util(\n        custom.save,\n        r\"Field Test Number is not a number\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_valid_input_test_regex","title":"<code>test_custom_valid_input_test_regex(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>This test case checks regex of test regex field</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_valid_input_test_regex(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"This test case checks regex of test regex field\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test_str\")\n    custom.test_number.set_value(\"5\")\n    custom.test_regex.set_value(\"$$\")\n    self.assert_util(\n        custom.save,\n        r\"Characters of Name should match regex ^\\w+$ .\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_valid_input_test_url","title":"<code>test_custom_valid_input_test_url(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>This test case checks test url field should be valid url</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_valid_input_test_url(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"This test case checks test url field should be valid url\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test_str\")\n    custom.test_number.set_value(\"5\")\n    custom.test_regex.set_value(\"test_rex\")\n    custom.test_email.set_value(\"test@a.b\")\n    custom.test_ipv4.set_value(\"10.1.11.1\")\n    custom.test_date.set_value(\"2020-09-18\")\n    custom.test_url.set_value(\"\\\\\\\\\")\n    self.assert_util(\n        custom.save,\n        r\"Field Test Url is not a valid URL\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_valid_length_test_string_greater","title":"<code>test_custom_valid_length_test_string_greater(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>This test case checks length of test string field should be greater than 4</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_valid_length_test_string_greater(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"This test case checks length of test string field should be greater than 4\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test\")\n    self.assert_util(\n        custom.save,\n        r\"Length of Test String should be greater than or equal to 5\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_valid_length_test_string_less","title":"<code>test_custom_valid_length_test_string_less(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>This test case checks length of test string field should be less than 11</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_valid_length_test_string_less(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"This test case checks length of test string field should be less than 11\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test_string\")\n    self.assert_util(\n        custom.save,\n        r\"Length of Test String should be less than or equal to 10\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_custom/#tests.ui.test_configuration_page_custom_tab.TestCustomPage.test_custom_valid_range_test_number","title":"<code>test_custom_valid_range_test_number(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>This test case checks range of test number field should be between 1 to 10</p> Source code in <code>tests/ui/test_configuration_page_custom_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.custom\ndef test_custom_valid_range_test_number(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"This test case checks range of test number field should be between 1 to 10\"\"\"\n    custom = CustomPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    custom.test_string.set_value(\"test_str\")\n    custom.test_number.set_value(\"0\")\n    self.assert_util(\n        custom.save,\n        r\"Field Test Number should be within the range of [1 and 10]\",\n        left_args={\"expect_error\": True},\n    )\n    custom.test_number.set_value(\"11\")\n    self.assert_util(\n        custom.save,\n        r\"Field Test Number should be within the range of [1 and 10]\",\n        left_args={\"expect_error\": True},\n    )\n    custom.test_number.set_value(\"10\")\n    self.assert_util(custom.save, True)\n</code></pre>"},{"location":"ui_tests_config_page_general/","title":"General","text":""},{"location":"ui_tests_config_page_general/#tests.ui.test_configuration_page.TestConfigurationPage","title":"<code>TestConfigurationPage</code>","text":"<p>         Bases: <code>UccTester</code></p> Source code in <code>tests/ui/test_configuration_page.py</code> <pre><code>class TestConfigurationPage(UccTester):\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.configuration\n    def test_configuration_page_title_and_description(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the title and description of the page\"\"\"\n        configuration_page = ConfigurationPage(\n            ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n        )\n        self.assert_util(configuration_page.title.wait_to_display, \"Configuration\")\n        self.assert_util(\n            configuration_page.description.wait_to_display, \"Set up your add-on\"\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.configuration\n    def test_openapi_json_download_button(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the OpenAPI json download button\"\"\"\n        configuration_page = ConfigurationPage(\n            ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n        )\n        download_openapi_href = (\n            configuration_page.download_openapi.container.get_attribute(\"href\")\n        )\n        configuration_page.download_openapi.wait_to_be_clickable()\n        self.assert_util(\n            f\"/app/{ADDON_NAME}/openapi.json\",\n            download_openapi_href,\n            operator=\"in\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.configuration\n    def test_ucc_credits_label_exists(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the UCC label is rendered on the page\"\"\"\n        configuration_page = ConfigurationPage(\n            ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n        )\n        ucc_label = configuration_page.ucc_credit.wait_to_display()\n        self.assert_util(\n            left=\"UCC\",\n            operator=\"in\",\n            right=ucc_label,\n        )\n        self.assert_util(\n            left=__version__,\n            operator=\"in\",\n            right=ucc_label,\n        )\n</code></pre>"},{"location":"ui_tests_config_page_general/#tests.ui.test_configuration_page.TestConfigurationPage.test_configuration_page_title_and_description","title":"<code>test_configuration_page_title_and_description(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the title and description of the page</p> Source code in <code>tests/ui/test_configuration_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.configuration\ndef test_configuration_page_title_and_description(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the title and description of the page\"\"\"\n    configuration_page = ConfigurationPage(\n        ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    )\n    self.assert_util(configuration_page.title.wait_to_display, \"Configuration\")\n    self.assert_util(\n        configuration_page.description.wait_to_display, \"Set up your add-on\"\n    )\n</code></pre>"},{"location":"ui_tests_config_page_general/#tests.ui.test_configuration_page.TestConfigurationPage.test_openapi_json_download_button","title":"<code>test_openapi_json_download_button(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the OpenAPI json download button</p> Source code in <code>tests/ui/test_configuration_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.configuration\ndef test_openapi_json_download_button(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the OpenAPI json download button\"\"\"\n    configuration_page = ConfigurationPage(\n        ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    )\n    download_openapi_href = (\n        configuration_page.download_openapi.container.get_attribute(\"href\")\n    )\n    configuration_page.download_openapi.wait_to_be_clickable()\n    self.assert_util(\n        f\"/app/{ADDON_NAME}/openapi.json\",\n        download_openapi_href,\n        operator=\"in\",\n    )\n</code></pre>"},{"location":"ui_tests_config_page_general/#tests.ui.test_configuration_page.TestConfigurationPage.test_ucc_credits_label_exists","title":"<code>test_ucc_credits_label_exists(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the UCC label is rendered on the page</p> Source code in <code>tests/ui/test_configuration_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.configuration\ndef test_ucc_credits_label_exists(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the UCC label is rendered on the page\"\"\"\n    configuration_page = ConfigurationPage(\n        ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    )\n    ucc_label = configuration_page.ucc_credit.wait_to_display()\n    self.assert_util(\n        left=\"UCC\",\n        operator=\"in\",\n        right=ucc_label,\n    )\n    self.assert_util(\n        left=__version__,\n        operator=\"in\",\n        right=ucc_label,\n    )\n</code></pre>"},{"location":"ui_tests_config_page_logging/","title":"Logging","text":""},{"location":"ui_tests_config_page_logging/#tests.ui.test_configuration_page_logging_tab.TestLoggingPage","title":"<code>TestLoggingPage</code>","text":"<p>         Bases: <code>UccTester</code></p> Source code in <code>tests/ui/test_configuration_page_logging_tab.py</code> <pre><code>class TestLoggingPage(UccTester):\n    @pytest.mark.logging\n    def test_logging_default_log_level(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        logging = Logging(\n            C.ADDON_NAME,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        self.assert_util(logging.backend_conf.get_parameter(\"disabled\"), False)\n        self.assert_util(logging.log_level.get_value, _DEFAULT_LOG_LEVEL)\n\n    @pytest.mark.logging\n    def test_logging_list_log_levels(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        logging = Logging(\n            C.ADDON_NAME,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        expected_list = [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]\n        self.assert_util(list(logging.log_level.list_of_values()), expected_list)\n\n    @pytest.mark.logging\n    def test_logging_select_random_log_level(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _reset_configuration\n    ):\n        logging = Logging(\n            C.ADDON_NAME,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        selection_log = set(logging.log_level.list_of_values())\n        for log_level in selection_log:\n            logging.log_level.select(log_level)\n            logging.save()\n            self.assert_util(logging.log_level.get_value, log_level)\n\n    @pytest.mark.logging\n    def test_logging_selected_log_level_frontend_backend(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _reset_configuration\n    ):\n        selection_log = \"DEBUG\"\n        logging = Logging(\n            C.ADDON_NAME,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        logging.log_level.select(selection_log)\n        logging.save()\n        self.assert_util(logging.log_level.get_value().lower(), selection_log.lower())\n        log_level = logging.backend_conf.get_parameter(\"loglevel\")\n        self.assert_util(log_level, selection_log)\n\n    @pytest.mark.logging\n    def test_logging_label_log_level(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n    ):\n        \"\"\"\n        Verifies the label of log level\n        \"\"\"\n        logging = Logging(  # noqa: F811\n            C.ADDON_NAME,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        self.assert_util(logging.log_level.get_input_label, \"Log level\")\n</code></pre>"},{"location":"ui_tests_config_page_logging/#tests.ui.test_configuration_page_logging_tab.TestLoggingPage.test_logging_default_log_level","title":"<code>test_logging_default_log_level(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_logging_tab.py</code> <pre><code>@pytest.mark.logging\ndef test_logging_default_log_level(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    logging = Logging(\n        C.ADDON_NAME,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    self.assert_util(logging.backend_conf.get_parameter(\"disabled\"), False)\n    self.assert_util(logging.log_level.get_value, _DEFAULT_LOG_LEVEL)\n</code></pre>"},{"location":"ui_tests_config_page_logging/#tests.ui.test_configuration_page_logging_tab.TestLoggingPage.test_logging_label_log_level","title":"<code>test_logging_label_log_level(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the label of log level</p> Source code in <code>tests/ui/test_configuration_page_logging_tab.py</code> <pre><code>@pytest.mark.logging\ndef test_logging_label_log_level(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n):\n    \"\"\"\n    Verifies the label of log level\n    \"\"\"\n    logging = Logging(  # noqa: F811\n        C.ADDON_NAME,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    self.assert_util(logging.log_level.get_input_label, \"Log level\")\n</code></pre>"},{"location":"ui_tests_config_page_logging/#tests.ui.test_configuration_page_logging_tab.TestLoggingPage.test_logging_list_log_levels","title":"<code>test_logging_list_log_levels(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_logging_tab.py</code> <pre><code>@pytest.mark.logging\ndef test_logging_list_log_levels(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    logging = Logging(\n        C.ADDON_NAME,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    expected_list = [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]\n    self.assert_util(list(logging.log_level.list_of_values()), expected_list)\n</code></pre>"},{"location":"ui_tests_config_page_logging/#tests.ui.test_configuration_page_logging_tab.TestLoggingPage.test_logging_select_random_log_level","title":"<code>test_logging_select_random_log_level(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _reset_configuration)</code>","text":"Source code in <code>tests/ui/test_configuration_page_logging_tab.py</code> <pre><code>@pytest.mark.logging\ndef test_logging_select_random_log_level(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _reset_configuration\n):\n    logging = Logging(\n        C.ADDON_NAME,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    selection_log = set(logging.log_level.list_of_values())\n    for log_level in selection_log:\n        logging.log_level.select(log_level)\n        logging.save()\n        self.assert_util(logging.log_level.get_value, log_level)\n</code></pre>"},{"location":"ui_tests_config_page_logging/#tests.ui.test_configuration_page_logging_tab.TestLoggingPage.test_logging_selected_log_level_frontend_backend","title":"<code>test_logging_selected_log_level_frontend_backend(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _reset_configuration)</code>","text":"Source code in <code>tests/ui/test_configuration_page_logging_tab.py</code> <pre><code>@pytest.mark.logging\ndef test_logging_selected_log_level_frontend_backend(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _reset_configuration\n):\n    selection_log = \"DEBUG\"\n    logging = Logging(\n        C.ADDON_NAME,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    logging.log_level.select(selection_log)\n    logging.save()\n    self.assert_util(logging.log_level.get_value().lower(), selection_log.lower())\n    log_level = logging.backend_conf.get_parameter(\"loglevel\")\n    self.assert_util(log_level, selection_log)\n</code></pre>"},{"location":"ui_tests_config_page_proxy/","title":"Proxy","text":""},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage","title":"<code>TestProxyPage</code>","text":"<p>         Bases: <code>UccTester</code></p> Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>class TestProxyPage(UccTester):\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_misc(self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper):\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n\n        # Labels\n        self.assert_util(proxy.proxy_enable.get_input_label, \"Enable\")\n        self.assert_util(proxy.type.get_input_label, \"Proxy Type\")\n        self.assert_util(proxy.host.get_input_label, \"Host\")\n        self.assert_util(proxy.port.get_input_label, \"Port\")\n        self.assert_util(proxy.username.get_input_label, \"Username\")\n        self.assert_util(proxy.password.get_input_label, \"Password\")\n        self.assert_util(proxy.dns_enable.get_input_label, \"DNS resolution\")\n\n        # Default values\n        self.assert_util(proxy.proxy_enable.is_checked(), False)\n        self.assert_util(proxy.type.get_value(), \"http\")\n        self.assert_util(proxy.type.list_of_values(), [\"http\", \"socks4\", \"socks5\"])\n        self.assert_util(proxy.host.get_value(), \"\")\n        self.assert_util(proxy.port.get_value(), \"\")\n        self.assert_util(proxy.username.get_value(), \"\")\n        self.assert_util(proxy.password.get_value(), \"\")\n        self.assert_util(proxy.dns_enable.is_checked(), False)\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_required_field_host(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        # Tests proxy.options.saveValidator\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        proxy.proxy_enable.check()\n        proxy.type.select(\"http\")\n        proxy.port.set_value(\"655\")\n        proxy.username.set_value(\"test\")\n        proxy.password.set_value(\"test\")\n        self.assert_util(\n            proxy.save, \"Field Host is required\", left_args={\"expect_error\": True}\n        )\n        proxy.host.set_value(\"closeerror\")\n        self.assert_util(proxy.is_error_closed, True)\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_host_field_length_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        host_value = \"a\" * 4097\n        proxy.host.set_value(host_value)\n        self.assert_util(\n            proxy.save,\n            \"Max host length is 4096\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_required_field_port(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        # Tests proxy.options.saveValidator\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        proxy.proxy_enable.check()\n        proxy.type.select(\"http\")\n        proxy.host.set_value(\"foobar\")\n        proxy.username.set_value(\"test\")\n        proxy.password.set_value(\"test\")\n        self.assert_util(\n            proxy.save, \"Field Port is required\", left_args={\"expect_error\": True}\n        )\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_port_field_numeric_values(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        proxy.host.set_value(\"foobar\")\n        proxy.port.set_value(\"test\")\n        self.assert_util(\n            proxy.save,\n            \"Field Port is not a number\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_port_field_valid_range(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        proxy.host.set_value(\"foobar\")\n        proxy.port.set_value(\"0\")\n        self.assert_util(\n            proxy.save,\n            \"Field Port should be within the range of [1 and 65535]\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_port_field_valid_integer(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        proxy.host.set_value(\"foobar\")\n        proxy.port.set_value(\"10.1\")\n        self.assert_util(\n            proxy.save,\n            \"Field Port is not a integer\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_encrypted_field_password(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        mask_check = proxy.password.encrypted\n        if mask_check:\n            msg = \"Password is masked\"\n        else:\n            msg = \"Password is not masked\"\n        self.assert_util(msg, \"Password is masked\")\n        proxy.proxy_enable.check()\n        proxy.type.select(\"http\")\n        proxy.host.set_value(\"foobar\")\n        proxy.port.set_value(\"655\")\n        proxy.username.set_value(\"test\")\n        proxy.password.set_value(\"test\")\n        assert proxy.save()\n        self.assert_util(\n            proxy.backend_conf_get.get_stanza().get(\"proxy_password\"), \"******\"\n        )\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_username_field_length_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        proxy.host.set_value(\"foobar\")\n        proxy.port.set_value(\"65535\")\n        proxy.username.set_value(\"a\" * 51)\n        self.assert_util(\n            proxy.save,\n            \"Max length of username is 50\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    def test_proxy_password_field_length_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        proxy.host.set_value(\"foobar\")\n        proxy.port.set_value(\"65535\")\n        proxy.username.set_value(\"aaa\")\n        proxy.password.set_value(\"a\" * 8193)\n        self.assert_util(\n            proxy.save,\n            \"Max length of password is 8192\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.forwarder\n    @pytest.mark.proxy\n    @pytest.mark.sanity_test\n    def test_proxy_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        proxy.proxy_enable.check()\n        proxy.type.select(\"socks4\")\n        proxy.host.set_value(\"foobar\")\n        proxy.port.set_value(\"655\")\n        proxy.username.set_value(\"test\")\n        proxy.password.set_value(\"test\")\n        proxy.dns_enable.check()\n        assert proxy.save()\n        self.assert_util(\n            proxy.backend_conf_get.get_stanza(decrypt=True),\n            {\n                \"disabled\": False,\n                \"proxy_enabled\": \"1\",\n                \"proxy_port\": \"655\",\n                \"proxy_rdns\": \"1\",\n                \"proxy_type\": \"socks4\",\n                \"proxy_url\": \"foobar\",\n                \"proxy_password\": \"test\",\n                \"proxy_username\": \"test\",\n            },\n        )\n\n    @pytest.mark.execute_enterprise_cloud_false\n    @pytest.mark.proxy\n    @pytest.mark.forwarder\n    def test_proxy_host_valid_input(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"\n        Verification of host throwing error msg when containing special characters\n        \"\"\"\n        proxy = Proxy(\n            C.ADDON_NAME,\n            _PROXY_URL,\n            ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n            ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n        )\n        proxy.host.set_value(\"abc$$\")\n        self.assert_util(\n            proxy.save,\n            \"Proxy Host should not have special characters\",\n            left_args={\"expect_error\": True},\n        )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_encrypted_field_password","title":"<code>test_proxy_encrypted_field_password(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_encrypted_field_password(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    mask_check = proxy.password.encrypted\n    if mask_check:\n        msg = \"Password is masked\"\n    else:\n        msg = \"Password is not masked\"\n    self.assert_util(msg, \"Password is masked\")\n    proxy.proxy_enable.check()\n    proxy.type.select(\"http\")\n    proxy.host.set_value(\"foobar\")\n    proxy.port.set_value(\"655\")\n    proxy.username.set_value(\"test\")\n    proxy.password.set_value(\"test\")\n    assert proxy.save()\n    self.assert_util(\n        proxy.backend_conf_get.get_stanza().get(\"proxy_password\"), \"******\"\n    )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_frontend_backend_validation","title":"<code>test_proxy_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\n@pytest.mark.sanity_test\ndef test_proxy_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    proxy.proxy_enable.check()\n    proxy.type.select(\"socks4\")\n    proxy.host.set_value(\"foobar\")\n    proxy.port.set_value(\"655\")\n    proxy.username.set_value(\"test\")\n    proxy.password.set_value(\"test\")\n    proxy.dns_enable.check()\n    assert proxy.save()\n    self.assert_util(\n        proxy.backend_conf_get.get_stanza(decrypt=True),\n        {\n            \"disabled\": False,\n            \"proxy_enabled\": \"1\",\n            \"proxy_port\": \"655\",\n            \"proxy_rdns\": \"1\",\n            \"proxy_type\": \"socks4\",\n            \"proxy_url\": \"foobar\",\n            \"proxy_password\": \"test\",\n            \"proxy_username\": \"test\",\n        },\n    )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_host_field_length_validation","title":"<code>test_proxy_host_field_length_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_host_field_length_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    host_value = \"a\" * 4097\n    proxy.host.set_value(host_value)\n    self.assert_util(\n        proxy.save,\n        \"Max host length is 4096\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_host_valid_input","title":"<code>test_proxy_host_valid_input(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verification of host throwing error msg when containing special characters</p> Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.proxy\n@pytest.mark.forwarder\ndef test_proxy_host_valid_input(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"\n    Verification of host throwing error msg when containing special characters\n    \"\"\"\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    proxy.host.set_value(\"abc$$\")\n    self.assert_util(\n        proxy.save,\n        \"Proxy Host should not have special characters\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_misc","title":"<code>test_proxy_misc(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_misc(self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper):\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n\n    # Labels\n    self.assert_util(proxy.proxy_enable.get_input_label, \"Enable\")\n    self.assert_util(proxy.type.get_input_label, \"Proxy Type\")\n    self.assert_util(proxy.host.get_input_label, \"Host\")\n    self.assert_util(proxy.port.get_input_label, \"Port\")\n    self.assert_util(proxy.username.get_input_label, \"Username\")\n    self.assert_util(proxy.password.get_input_label, \"Password\")\n    self.assert_util(proxy.dns_enable.get_input_label, \"DNS resolution\")\n\n    # Default values\n    self.assert_util(proxy.proxy_enable.is_checked(), False)\n    self.assert_util(proxy.type.get_value(), \"http\")\n    self.assert_util(proxy.type.list_of_values(), [\"http\", \"socks4\", \"socks5\"])\n    self.assert_util(proxy.host.get_value(), \"\")\n    self.assert_util(proxy.port.get_value(), \"\")\n    self.assert_util(proxy.username.get_value(), \"\")\n    self.assert_util(proxy.password.get_value(), \"\")\n    self.assert_util(proxy.dns_enable.is_checked(), False)\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_password_field_length_validation","title":"<code>test_proxy_password_field_length_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_password_field_length_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    proxy.host.set_value(\"foobar\")\n    proxy.port.set_value(\"65535\")\n    proxy.username.set_value(\"aaa\")\n    proxy.password.set_value(\"a\" * 8193)\n    self.assert_util(\n        proxy.save,\n        \"Max length of password is 8192\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_port_field_numeric_values","title":"<code>test_proxy_port_field_numeric_values(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_port_field_numeric_values(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    proxy.host.set_value(\"foobar\")\n    proxy.port.set_value(\"test\")\n    self.assert_util(\n        proxy.save,\n        \"Field Port is not a number\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_port_field_valid_integer","title":"<code>test_proxy_port_field_valid_integer(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_port_field_valid_integer(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    proxy.host.set_value(\"foobar\")\n    proxy.port.set_value(\"10.1\")\n    self.assert_util(\n        proxy.save,\n        \"Field Port is not a integer\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_port_field_valid_range","title":"<code>test_proxy_port_field_valid_range(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_port_field_valid_range(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    proxy.host.set_value(\"foobar\")\n    proxy.port.set_value(\"0\")\n    self.assert_util(\n        proxy.save,\n        \"Field Port should be within the range of [1 and 65535]\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_required_field_host","title":"<code>test_proxy_required_field_host(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_required_field_host(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    # Tests proxy.options.saveValidator\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    proxy.proxy_enable.check()\n    proxy.type.select(\"http\")\n    proxy.port.set_value(\"655\")\n    proxy.username.set_value(\"test\")\n    proxy.password.set_value(\"test\")\n    self.assert_util(\n        proxy.save, \"Field Host is required\", left_args={\"expect_error\": True}\n    )\n    proxy.host.set_value(\"closeerror\")\n    self.assert_util(proxy.is_error_closed, True)\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_required_field_port","title":"<code>test_proxy_required_field_port(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_required_field_port(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    # Tests proxy.options.saveValidator\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    proxy.proxy_enable.check()\n    proxy.type.select(\"http\")\n    proxy.host.set_value(\"foobar\")\n    proxy.username.set_value(\"test\")\n    proxy.password.set_value(\"test\")\n    self.assert_util(\n        proxy.save, \"Field Port is required\", left_args={\"expect_error\": True}\n    )\n</code></pre>"},{"location":"ui_tests_config_page_proxy/#tests.ui.test_configuration_page_proxy_tab.TestProxyPage.test_proxy_username_field_length_validation","title":"<code>test_proxy_username_field_length_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"Source code in <code>tests/ui/test_configuration_page_proxy_tab.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_false\n@pytest.mark.forwarder\n@pytest.mark.proxy\ndef test_proxy_username_field_length_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    proxy = Proxy(\n        C.ADDON_NAME,\n        _PROXY_URL,\n        ucc_smartx_selenium_helper=ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper=ucc_smartx_rest_helper,\n    )\n    proxy.host.set_value(\"foobar\")\n    proxy.port.set_value(\"65535\")\n    proxy.username.set_value(\"a\" * 51)\n    self.assert_util(\n        proxy.save,\n        \"Max length of username is 50\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/","title":"Input Page","text":""},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage","title":"<code>TestInputPage</code>","text":"<p>         Bases: <code>UccTester</code></p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>class TestInputPage(UccTester):\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_displayed_columns(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies headers of input table\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        header_list = [\n            \"Name\",\n            \"Account\",\n            \"Interval\",\n            \"Input Type\",\n            \"Input Service\",\n            \"Index\",\n            \"Status\",\n            \"Actions\",\n        ]\n        self.assert_util(input_page.table.get_headers, header_list)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_pagination_list(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies pagination list\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            input_page.pagination.get_pagination_list,\n            [\"10 Per Page\", \"25 Per Page\", \"50 Per Page\"],\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_pagination(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_inputs\n    ):\n        \"\"\"Verifies pagination functionality by creating 100 accounts\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.open()\n        self.assert_util(\n            input_page.pagination.select_page_option,\n            True,\n            left_args={\"value\": \"50 Per Page\"},\n        )\n        self.assert_util(input_page.table.switch_to_page, True, left_args={\"value\": 2})\n        self.assert_util(input_page.table.switch_to_prev, True)\n        self.assert_util(input_page.table.switch_to_next, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_sort_functionality(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n        _add_input_one,\n        _add_input_two,\n    ):\n        \"\"\"Verifies sorting functionality for name column\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.pagination.select_page_option(\"50 Per Page\")\n        input_page.table.sort_column(\"Name\")\n        sort_order = input_page.table.get_sort_order()\n        column_values = list(input_page.table.get_column_values(\"Name\"))\n        column_values = list(str(item) for item in column_values)\n        sorted_values = sorted(column_values, key=str.lower)\n        self.assert_util(sort_order[\"header\"].lower(), \"name\")\n        self.assert_util(column_values, sorted_values)\n        self.assert_util(sort_order[\"ascending\"], True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_filter_functionality_negative(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n        _add_input_one,\n        _add_input_two,\n    ):\n        \"\"\"Verifies the filter functionality (Negative)\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.set_filter(\"hello\")\n        self.assert_util(input_page.table.get_row_count, 0)\n        self.assert_util(\n            input_page.table.get_count_title,\n            f\"{input_page.table.get_row_count()} Input\",\n        )\n        input_page.table.clean_filter()\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_filter_functionality_positive(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n        _add_input_one,\n        _add_input_two,\n    ):\n        \"\"\"Verifies the filter functionality (Positive)\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.set_filter(\"dummy\")\n        self.assert_util(input_page.table.get_row_count, 2)\n        self.assert_util(\n            input_page.table.get_count_title,\n            f\"{input_page.table.get_row_count()} Inputs\",\n        )\n        input_page.table.clean_filter()\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_default_rows_in_table(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the default number of rows in the table\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(input_page.table.get_row_count, 0)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_create_new_input_list_values(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies input list dropdown\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        create_new_input_list = [\n            \"Example Input One\",\n            \"Example Input Two\",\n            \"Example Input Three\",\n            \"Example Input Four Creates disabled input\",\n            \"Service hidden for cloud\",\n            \"Service with conf param\",\n            \"Group One\",\n            \"Group Two\",\n        ]\n        self.assert_util(\n            input_page.create_new_input.get_inputs_list, create_new_input_list\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_input_type_list_values(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n        _add_input_one,\n        _add_input_two,\n    ):\n        \"\"\"Verifies input type filter list\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        type_filter_list = [\n            \"All\",\n            \"Example Input One\",\n            \"Example Input Two\",\n            \"Example Input Three\",\n            \"Example Input Four\",\n            \"Service hidden for cloud\",\n            \"Service hidden for enterprise\",\n            \"Service with conf param\",\n            \"Service 1 Inside Menu\",\n            \"Service 2 Inside Menu\",\n            \"Service 3 Inside Menu - style Dialog\",\n            \"Service 4 Inside Menu - style page\",\n        ]\n        self.assert_util(input_page.type_filter.get_input_type_list, type_filter_list)\n        input_page.type_filter.select_input_type(\n            \"Example Input One\", open_dropdown=False\n        )\n        self.assert_util(input_page.table.get_row_count, 1)\n        input_page.type_filter.select_input_type(\"Example Input Two\")\n        self.assert_util(input_page.table.get_row_count, 1)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_more_info(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the expand functionality of the inputs table\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        interval = \"90\"\n        self.assert_util(\n            input_page.table.get_more_info,\n            {\n                \"Name\": \"dummy_input_one\",\n                \"Interval\": f\"{interval} sec\",\n                \"Index\": \"default\",\n                \"Status\": \"Active\",\n                \"Example Account\": \"test_input\",\n                \"Object\": \"test_object\",\n                \"Object Fields\": \"test_field\",\n                \"Order By\": \"LastModifiedDate\",\n                \"Query Start Date\": \"2020-12-11T20:00:32.000z\",\n                \"Limit\": \"1000\",\n            },\n            left_args={\"name\": \"dummy_input_one\"},\n        )\n        backend_stanza = input_page.backend_conf.get_stanza(\n            \"example_input_one://dummy_input_one\"\n        )\n        # we verify that the conf value is `interval` and only the UI has changed\n        assert backend_stanza.get(\"interval\") == interval\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_enable_disable(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies enable and disable functionality of the input\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            input_page.table.input_status_toggle,\n            True,\n            left_args={\"name\": \"dummy_input_one\", \"enable\": False},\n        )\n        self.assert_util(\n            input_page.table.get_cell_value,\n            \"Inactive\",\n            left_args={\"name\": \"dummy_input_one\", \"column\": \"Status\"},\n        )\n        self.assert_util(\n            input_page.table.input_status_toggle,\n            True,\n            left_args={\"name\": \"dummy_input_one\", \"enable\": True},\n        )\n        self.assert_util(\n            input_page.table.get_cell_value,\n            \"Active\",\n            left_args={\"name\": \"dummy_input_one\", \"column\": \"Status\"},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_count(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n        _add_input_one,\n        _add_input_two,\n    ):\n        \"\"\"Verifies count on table\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            input_page.table.get_count_title,\n            f\"{input_page.table.get_row_count()} Inputs\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_title_and_description(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the title and description of the page\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(input_page.title.wait_to_display, \"Inputs\")\n        self.assert_util(\n            input_page.description.wait_to_display, \"Manage your data inputs\"\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_required_field_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field name in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_radio.select(\"Yes\")\n        input_page.entity1.single_select_group_test.select(\"two\")\n        input_page.entity1.interval.set_value(\"90\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Field Name is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_with_complex_validation_wrong_start(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies correct errors when validation fails due to wrong start text\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Group One\")\n        input_page.create_new_input.select(\"Service 1 Inside Menu\")\n\n        input_page.entity3.name.set_value(\"dummy_input_name_complex_validators\")\n        input_page.entity3.interval.set_value(\"900\")\n        input_page.entity3.text_with_validators.set_value(\n            \"invalid as should start with $\"\n        )\n\n        self.assert_util(\n            input_page.entity3.save,\n            r\"Query parameters should start with '$'\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_with_complex_validation_too_short(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies correct errors when validation fails due to length\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Group One\")\n        input_page.create_new_input.select(\"Service 1 Inside Menu\")\n\n        input_page.entity3.name.set_value(\"dummy_input_name_complex_validators\")\n        input_page.entity3.interval.set_value(\"900\")\n        input_page.entity3.text_with_validators.set_value(\"1\")\n\n        self.assert_util(\n            input_page.entity3.save,\n            r\"Length of Query parameters should be between 2 and 8192\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_valid_length_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the name field should not be more than 100 characters\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        name_value = \"a\" * 101\n        input_page.entity1.name.set_value(name_value)\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Length of input name should be between 1 and 100\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_valid_input_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies whether adding special characters, name field displays validation error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"$$test_name\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_list_single_select_group_test(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies values Single Select Group Test dropdown in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        single_select_group_test_list = [\"One\", \"Two\", \"Three\", \"Four\"]\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(\n            input_page.entity1.single_select_group_test.list_of_values(),\n            single_select_group_test_list,\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_dependent_dropdown_when_radio_input_is_yes(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies values of dependent_dropdown in example input one when radio input is yes\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        dependent_dropdown_test_list = [\"affirmation\"]\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_radio.select(\"Yes\")\n        self.assert_util(\n            input_page.entity1.dependent_dropdown.list_of_values(),\n            dependent_dropdown_test_list,\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_dependent_dropdown_when_radio_input_is_no(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies values of dependent_dropdown in example input one when radio input is no\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        dependent_dropdown_test_list = [\"denial\"]\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_radio.select(\"No\")\n        self.assert_util(\n            input_page.entity1.dependent_dropdown.list_of_values(),\n            dependent_dropdown_test_list,\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_select_value_single_select_group_test(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies selected value of Single Select Group Test dropdown in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        selected_value = \"Two\"\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.single_select_group_test.select(selected_value)\n        self.assert_util(\n            input_page.entity1.single_select_group_test.get_value, selected_value\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_search_value_single_select_group_test(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies singleSelect search functionality\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(\n            input_page.entity1.single_select_group_test.search_get_list,\n            [\"one\", \"One\"],\n            left_args={\"value\": \"one\"},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_default_value_multiple_select_test(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default values of Multiple Select Test dropdown in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        default_values = [\"A\", \"B\"]\n        self.assert_util(\n            input_page.entity1.multiple_select_test.get_values, default_values\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_list_multiple_select_test(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies values of Multiple Select Test dropdown in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.multiple_select_test.deselect_all()\n        multiple_select_test = [\"A\", \"B\"]\n        self.assert_util(\n            input_page.entity1.multiple_select_test.list_of_values(),\n            multiple_select_test,\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_select_value_multiple_select_test(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies selected single value of Multiple Select Test dropdown in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        selected_value = [\"A\"]\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.multiple_select_test.deselect_all()\n        for each in selected_value:\n            input_page.entity1.multiple_select_test.select(each)\n        self.assert_util(\n            input_page.entity1.multiple_select_test.get_values, selected_value\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_select_multiple_values_multiple_select_test(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies selected multiple values of Multiple Select Test dropdown in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        selected_values = [\"A\", \"B\"]\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.multiple_select_test.deselect_all()\n        for each in selected_values:\n            input_page.entity1.multiple_select_test.select(each)\n        self.assert_util(\n            input_page.entity1.multiple_select_test.get_values, selected_values\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_deselect_multiple_select_test(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies deselect in Multiple Select Test dropdown in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        selected_values = [\"A\", \"B\"]\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.multiple_select_test.deselect_all()\n        for each in selected_values:\n            input_page.entity1.multiple_select_test.select(each)\n        input_page.entity1.multiple_select_test.deselect(\"A\")\n        self.assert_util(input_page.entity1.multiple_select_test.get_values, [\"B\"])\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_search_value_multiple_select_test(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies multiple select search functionality properly\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.multiple_select_test.deselect_all()\n        self.assert_util(\n            input_page.entity1.multiple_select_test.search_get_list,\n            [\"A\"],\n            left_args={\"value\": \"A\"},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_default_value_example_checkbox(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of example checkbox in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(input_page.entity1.example_checkbox.is_checked, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_unchecked_example_checkbox(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies Uncheck in example checkbox in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_checkbox.check()\n        self.assert_util(input_page.entity1.example_checkbox.uncheck, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_checked_example_checkbox(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies checked in example checkbox in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_checkbox.uncheck()\n        self.assert_util(input_page.entity1.example_checkbox.check, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_default_value_example_radio(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of example radio in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(input_page.entity1.example_radio.get_value, \"Yes\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_select_value_example_radio(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies selected value of example radio in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_radio.select(\"No\")\n        self.assert_util(input_page.entity1.example_radio.get_value, \"No\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_required_field_interval(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field interval in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"dummy_input\")\n        input_page.entity1.example_radio.select(\"Yes\")\n        input_page.entity1.single_select_group_test.select(\"Two\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Field Interval is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_valid_input_interval(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies whether adding non numeric values, interval field displays validation error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.name.set_value(\"test_name\")\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.interval.set_value(\"abc\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Interval must be either a non-negative number, CRON interval or -1.\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_required_field_index(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field index in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"dummy_input\")\n        input_page.entity1.example_radio.select(\"Yes\")\n        input_page.entity1.single_select_group_test.select(\"Two\")\n        input_page.entity1.interval.set_value(\"90\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        input_page.entity1.index.cancel_selected_value()\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Field Index is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_default_value_index(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of field index in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        default_index = \"default\"\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(input_page.entity1.index.get_value, default_index)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_required_field_example_account(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field Example Account in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"dummy_input\")\n        input_page.entity1.example_radio.select(\"Yes\")\n        input_page.entity1.single_select_group_test.select(\"Two\")\n        input_page.entity1.interval.set_value(\"90\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Field Example Account is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_required_field_object(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field Object in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"dummy_input\")\n        input_page.entity1.example_radio.select(\"Yes\")\n        input_page.entity1.single_select_group_test.select(\"Two\")\n        input_page.entity1.interval.set_value(\"90\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Field Object is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_required_field_object_fields(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field Object Fields in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"dummy_input\")\n        input_page.entity1.example_radio.select(\"Yes\")\n        input_page.entity1.single_select_group_test.select(\"Two\")\n        input_page.entity1.interval.set_value(\"90\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Field Object Fields is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_required_field_order_by(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field Order By in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"dummy_input\")\n        input_page.entity1.example_radio.select(\"Yes\")\n        input_page.entity1.interval.set_value(\"90\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.single_select_group_test.select(\"Two\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        input_page.entity1.order_by.set_value(\"\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Field Order By is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_default_value_order_by(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of field Order By in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        default_order_by = \"LastModifiedDate\"\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(input_page.entity1.order_by.get_value, default_order_by)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_required_field_textarea(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field textarea in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"dummy_input\")\n        input_page.entity1.example_radio.select(\"Yes\")\n        input_page.entity1.single_select_group_test.select(\"Two\")\n        input_page.entity1.interval.set_value(\"90\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity1.text_area.set_value(\"\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Field Example Textarea Field is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_fields_label_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies example input one field label\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        self.assert_util(input_page.entity1.name.get_input_label, \"Name\")\n        self.assert_util(\n            input_page.entity1.example_checkbox.get_input_label, \"Example Checkbox\"\n        )\n        self.assert_util(\n            input_page.entity1.example_radio.get_input_label, \"Example Radio\"\n        )\n        self.assert_util(\n            input_page.entity1.single_select_group_test.get_input_label,\n            \"Single Select Group Test\",\n        )\n        self.assert_util(\n            input_page.entity1.multiple_select_test.get_input_label,\n            \"Multiple Select Test\",\n        )\n        self.assert_util(input_page.entity1.interval.get_input_label, \"Interval\")\n        self.assert_util(input_page.entity1.index.get_input_label, \"Index\")\n        self.assert_util(\n            input_page.entity1.example_account.get_input_label, \"Example Account\"\n        )\n        self.assert_util(input_page.entity1.object.get_input_label, \"Object\")\n        self.assert_util(\n            input_page.entity1.object_fields.get_input_label, \"Object Fields\"\n        )\n        self.assert_util(input_page.entity1.order_by.get_input_label, \"Order By\")\n        self.assert_util(\n            input_page.entity1.query_start_date.get_input_label, \"Query Start Date\"\n        )\n        self.assert_util(input_page.entity1.limit.get_input_label, \"Limit\")\n        self.assert_util(\n            input_page.entity1.text_area.get_input_label, \"Example Textarea Field\"\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_fields_label_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies example input two field label\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        self.assert_util(input_page.entity2.name.get_input_label, \"Name\")\n        self.assert_util(input_page.entity2.interval.get_input_label, \"Interval\")\n        self.assert_util(input_page.entity2.index.get_input_label, \"Index\")\n        self.assert_util(\n            input_page.entity2.example_account.get_input_label, \"Example Account\"\n        )\n        self.assert_util(\n            input_page.entity2.example_multiple_select.get_input_label,\n            \"Example Multiple Select\",\n        )\n        self.assert_util(\n            input_page.entity2.example_checkbox.get_input_label, \"Example Checkbox\"\n        )\n        self.assert_util(\n            input_page.entity2.example_radio.get_input_label, \"Example Radio\"\n        )\n        self.assert_util(\n            input_page.entity2.query_start_date.get_input_label, \"Query Start Date\"\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_help_text_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies help text for the field name\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(\n            input_page.entity1.name.get_help_text, \"A unique name for the data input.\"\n        )\n        self.assert_util(\n            input_page.entity1.example_checkbox.get_help_text,\n            \"This is an example checkbox for the input one entity\",\n        )\n        self.assert_util(\n            input_page.entity1.example_radio.get_help_text,\n            \"This is an example radio button for the input one entity\",\n        )\n        self.assert_util(\n            input_page.entity1.interval.get_help_text,\n            \"Time interval of the data input, in seconds.\",\n        )\n        self.assert_util(\n            input_page.entity1.object.get_help_text,\n            \"The name of the object to query for.\",\n        )\n        self.assert_util(\n            input_page.entity1.object_fields.get_help_text,\n            \"Object fields from which to collect data. Delimit multiple fields using a comma.\",\n        )\n        self.assert_util(\n            input_page.entity1.query_start_date.get_help_text,\n            \"The datetime after which to query and index records, \"\n            'in this format: \"YYYY-MM-DDThh:mm:ss.000z\". Defaults to 90 days '\n            \"earlier from now.\",\n        )\n        self.assert_util(\n            input_page.entity1.limit.get_help_text,\n            \"The maximum number of results returned by the query.\",\n        )\n        self.assert_util(\n            input_page.entity1.order_by.get_help_text,\n            \"The datetime field by which to query results in ascending order for indexing.\",\n        )\n        self.assert_util(input_page.entity1.text_area.get_help_text, \"Help message\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_valid_input_query_start_date(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies whether adding wrong format, Query Start Date field displays validation error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"test_name\")\n        input_page.entity1.interval.set_value(\"120\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.object_fields.set_value(\"test_object_field\")\n        input_page.entity1.query_start_date.set_value(\"2020/01/01\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        self.assert_util(\n            input_page.entity1.save,\n            r\"Invalid date and time format\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_default_value_limit(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of field limit in example input one\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        default_limit = \"1000\"\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(input_page.entity1.limit.get_value, default_limit)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_help_link(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies whether the help link redirects to the correct URL\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        go_to_link = \"https://docs.splunk.com/Documentation\"\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n\n        assert (\n            input_page.entity1.help_link.internal_container.get_attribute(\"href\")\n            == go_to_link\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.sanity_test\n    def test_example_input_one_add_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the frontend and backend after adding an Example Input One\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"dummy_input\")\n        input_page.entity1.example_radio.select(\"Yes\")\n        input_page.entity1.single_select_group_test.select(\"Two\")\n        input_page.entity1.interval.set_value(\"90\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        self.assert_util(input_page.entity1.save, True)\n        input_page.table.wait_for_rows_to_appear(1)\n        self.assert_util(\n            input_page.table.get_table()[\"dummy_input\"],\n            {\n                \"name\": \"dummy_input\",\n                \"account\": \"test_input\",\n                \"interval\": \"90\",\n                \"input type\": \"Example Input One\",\n                \"input service\": \"example_input_one\",\n                \"index\": \"default\",\n                \"status\": \"Active\",\n                \"actions\": \"Edit | Clone | Search | Delete\",\n            },\n        )\n        value_to_test = {\n            \"account\": \"test_input\",\n            \"input_one_checkbox\": \"1\",\n            \"input_one_radio\": \"1\",\n            \"interval\": \"90\",\n            \"limit\": \"1000\",\n            \"multipleSelectTest\": \"a|b\",\n            \"object\": \"test_object\",\n            \"object_fields\": \"test_field\",\n            \"order_by\": \"LastModifiedDate\",\n            \"singleSelectTest\": \"two\",\n            \"start_date\": \"2020-12-11T20:00:32.000z\",\n            \"disabled\": 0,\n            \"example_textarea_field\": \"line1\\nline2\\nline3\\nline4\\nline5\",\n        }\n        backend_stanza = input_page.backend_conf.get_stanza(\n            \"example_input_one://dummy_input\"\n        )\n        for each_key, each_value in value_to_test.items():\n            assert each_key in backend_stanza\n            self.assert_util(\n                each_value,\n                backend_stanza[each_key],\n            )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_edit_uneditable_field_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the frontend uneditable fields at time of edit of the example input one entity\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_one\")\n        self.assert_util(input_page.entity1.name.is_editable, False)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.sanity_test\n    def test_example_input_one_edit_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the frontend and backend edit functionality of the example input one entity\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_one\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_checkbox.uncheck()\n        input_page.entity1.example_radio.select(\"No\")\n        input_page.entity1.single_select_group_test.select(\"four\")\n        input_page.entity1.multiple_select_test.deselect(\"b\")\n        input_page.entity1.interval.set_value(\"3600\")\n        input_page.entity1.index.select(\"main\")\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"edit_object\")\n        input_page.entity1.object_fields.set_value(\"edit_field\")\n        input_page.entity1.order_by.set_value(\"LastDate\")\n        input_page.entity1.limit.set_value(\"2000\")\n        input_page.entity1.query_start_date.set_value(\"2020-20-20T20:20:20.000z\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        self.assert_util(input_page.entity1.save, True)\n        input_page.table.wait_for_rows_to_appear(1)\n        self.assert_util(\n            input_page.table.get_table()[\"dummy_input_one\"],\n            {\n                \"name\": \"dummy_input_one\",\n                \"account\": \"test_input\",\n                \"interval\": \"3600\",\n                \"input type\": \"Example Input One\",\n                \"input service\": \"example_input_one\",\n                \"index\": \"main\",\n                \"status\": \"Active\",\n                \"actions\": \"Edit | Clone | Search | Delete\",\n            },\n        )\n        value_to_test = {\n            \"account\": \"test_input\",\n            \"input_one_checkbox\": \"0\",\n            \"input_one_radio\": \"0\",\n            \"interval\": \"3600\",\n            \"index\": \"main\",\n            \"limit\": \"2000\",\n            \"multipleSelectTest\": \"a\",\n            \"object\": \"edit_object\",\n            \"object_fields\": \"edit_field\",\n            \"order_by\": \"LastDate\",\n            \"singleSelectTest\": \"four\",\n            \"start_date\": \"2020-20-20T20:20:20.000z\",\n            \"example_textarea_field\": \"line1\\nline2\\nline3\\nline4\\nline5\",\n            \"disabled\": 0,\n        }\n        backend_stanza = input_page.backend_conf.get_stanza(\n            \"example_input_one://dummy_input_one\"\n        )\n        for each_key, each_value in value_to_test.items():\n            self.assert_util(each_key, backend_stanza, operator=\"in\")\n            self.assert_util(each_value, backend_stanza[each_key])\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_clone_default_values(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the frontend default fields at time of clone for example input one entity\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_one\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(input_page.entity1.name.get_value, \"\")\n        self.assert_util(input_page.entity1.example_checkbox.is_checked, True)\n        self.assert_util(input_page.entity1.example_radio.get_value, \"Yes\")\n        self.assert_util(input_page.entity1.single_select_group_test.get_value, \"Two\")\n        self.assert_util(input_page.entity1.multiple_select_test.get_values, [\"A\", \"B\"])\n        self.assert_util(input_page.entity1.interval.get_value, \"90\")\n        self.assert_util(input_page.entity1.index.get_value, \"default\")\n        self.assert_util(input_page.entity1.example_account.get_value, \"test_input\")\n        self.assert_util(input_page.entity1.object.get_value, \"test_object\")\n        self.assert_util(input_page.entity1.object_fields.get_value, \"test_field\")\n        self.assert_util(input_page.entity1.order_by.get_value, \"LastModifiedDate\")\n        self.assert_util(\n            input_page.entity1.query_start_date.get_value, \"2020-12-11T20:00:32.000z\"\n        )\n        self.assert_util(input_page.entity1.limit.get_value, \"1000\")\n        self.assert_util(input_page.entity1.text_area.get_value, \"line1\\nline2\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.sanity_test\n    def test_example_input_one_clone_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the frontend and backend clone functionality of the example input one entity\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.wait_for_rows_to_appear(1)\n        input_page.table.clone_row(\"dummy_input_one\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.name.set_value(\"dummy_input_one_Clone_Test\")\n        input_page.entity1.interval.set_value(\"180\")\n        input_page.entity1.limit.set_value(\"500\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n        self.assert_util(input_page.entity1.save, True)\n        input_page.table.wait_for_rows_to_appear(2)\n        self.assert_util(\n            input_page.table.get_table()[\"dummy_input_one_Clone_Test\"],\n            {\n                \"name\": \"dummy_input_one_Clone_Test\",\n                \"account\": \"test_input\",\n                \"interval\": \"180\",\n                \"input type\": \"Example Input One\",\n                \"input service\": \"example_input_one\",\n                \"index\": \"default\",\n                \"status\": \"Active\",\n                \"actions\": \"Edit | Clone | Search | Delete\",\n            },\n        )\n        value_to_test = {\n            \"account\": \"test_input\",\n            \"input_one_checkbox\": \"1\",\n            \"input_one_radio\": \"1\",\n            \"interval\": \"180\",\n            \"index\": \"default\",\n            \"limit\": \"500\",\n            \"multipleSelectTest\": \"a|b\",\n            \"object\": \"test_object\",\n            \"object_fields\": \"test_field\",\n            \"order_by\": \"LastModifiedDate\",\n            \"singleSelectTest\": \"two\",\n            \"start_date\": \"2020-12-11T20:00:32.000z\",\n            \"example_textarea_field\": \"line1\\nline2\\nline3\\nline4\\nline5\",\n            \"disabled\": 0,\n        }\n        backend_stanza = input_page.backend_conf.get_stanza(\n            \"example_input_one://dummy_input_one_Clone_Test\"\n        )\n        for each_key, each_value in value_to_test.items():\n            self.assert_util(each_key, backend_stanza, operator=\"in\")\n            self.assert_util(each_value, backend_stanza[each_key])\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.sanity_test\n    def test_example_input_one_delete_row_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the frontend and backend delete functionality\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.input_status_toggle(\"dummy_input_one\", enable=False)\n        input_page.table.delete_row(\"dummy_input_one\")\n        input_page.table.wait_for_rows_to_appear(0)\n        self.assert_util(\"dummy_input_one\", input_page.table.get_table, \"not in\")\n        self.assert_util(\n            \"example_input_one://dummy_input_one\",\n            input_page.backend_conf.get_all_stanzas().keys(),\n            \"not in\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_add_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies close functionality at time of add\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(input_page.entity1.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_edit_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies close functionality at time of edit\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_one\")\n        self.assert_util(input_page.entity1.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_clone_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies close functionality at time of clone\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_one\")\n        self.assert_util(input_page.entity1.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_clone_save_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies required field name in example input one at time of clone\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_one\")\n        self.assert_util(\n            input_page.entity1.save,\n            \"Field Name is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_delete_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies close functionality at time of delete\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            input_page.table.delete_row,\n            True,\n            left_args={\"name\": \"dummy_input_one\", \"close\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_add_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies cancel functionality at time of add\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(input_page.entity1.cancel, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_edit_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies cancel functionality at time of edit\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_one\")\n        self.assert_util(input_page.entity1.cancel, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_clone_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies cancel functionality at time of clone\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_one\")\n        self.assert_util(input_page.entity1.cancel, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_delete_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies cancel functionality at time of delete\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            input_page.table.delete_row,\n            True,\n            left_args={\"name\": \"dummy_input_one\", \"cancel\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_add_duplicate_names(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies by saving an entity with duplicate name it displays and error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_name = \"dummy_input_one\"\n        input_page.entity1.name.set_value(input_name)\n        self.assert_util(\n            input_page.entity1.save,\n            f\"Name {input_name} is already in use\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_clone_duplicate_names(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies by saving an entity with duplicate name at time of clone it displays and error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_one\")\n        input_page.entity1.example_account.wait_for_values()\n        input_name = \"dummy_input_one\"\n        input_page.entity1.name.set_value(input_name)\n        self.assert_util(\n            input_page.entity1.save,\n            f\"Name {input_name} is already in use\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_add_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the title of the 'Add Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        self.assert_util(\n            input_page.entity1.title.container.get_attribute(\"textContent\").strip(),\n            \"Add Example Input One\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_edit_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the title of the 'Edit Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_one\")\n        self.assert_util(\n            input_page.entity1.title.container.get_attribute(\"textContent\").strip(),\n            \"Update Example Input One\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_clone_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the title of the 'Clone Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_one\")\n        self.assert_util(\n            input_page.entity1.title.container.get_attribute(\"textContent\").strip(),\n            \"Clone Example Input One\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_delete_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the title of the 'Delete Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.delete_row(\"dummy_input_one\", prompt_msg=True)\n        self.assert_util(\n            input_page.entity1.title.container.get_attribute(\"textContent\").strip(),\n            \"Delete Confirmation\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_one_delete_valid_prompt_message(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies the prompt message of the 'Delete Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_name = \"dummy_input_one\"\n        prompt_message = input_page.table.delete_row(\"dummy_input_one\", prompt_msg=True)\n        self.assert_util(\n            prompt_message, f'Are you sure you want to delete \"{input_name}\" ?'\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_required_field_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field name in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.example_checkbox.check()\n        input_page.entity2.example_radio.select(\"No\")\n        input_page.entity2.example_multiple_select.select(\"Option One\")\n        input_page.entity2.index.select(\"main\")\n        input_page.entity2.interval.set_value(\"90\")\n        input_page.entity2.example_account.select(\"test_input\")\n        input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Field Name is required\",\n            left_args={\"expect_error\": True},\n        )\n        input_page.entity2.name.set_value(\"test_name_two\")\n        self.assert_util(input_page.entity2.is_error_closed, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_valid_length_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the name field should not be more than 100 characters\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        name_value = \"a\" * 101\n        input_page.entity2.name.set_value(name_value)\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Length of input name should be between 1 and 100\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_valid_input_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies whether adding special characters, name field displays validation error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"$$test_name_two\")\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_clone_valid_input_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies whether adding special characters, name field displays validation error while cloning a row\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"$$test_name_two\")\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_required_field_interval(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field interval in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"dummy_input\")\n        input_page.entity2.example_checkbox.check()\n        input_page.entity2.example_radio.select(\"No\")\n        input_page.entity2.example_multiple_select.select(\"Option One\")\n        input_page.entity2.index.select(\"main\")\n        input_page.entity2.example_account.select(\"test_input\")\n        input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Field Interval is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_valid_input_interval(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies whether adding non numeric values, interval field displays validation error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"test_name_two\")\n        input_page.entity2.interval.set_value(\"abc\")\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Interval must be either a non-negative number, CRON interval or -1.\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_required_field_index(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field index in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"dummy_input\")\n        input_page.entity2.example_checkbox.check()\n        input_page.entity2.example_account.select(\"test_input\")\n        input_page.entity2.example_radio.select(\"No\")\n        input_page.entity2.example_multiple_select.select(\"Option One\")\n        input_page.entity2.interval.set_value(\"90\")\n        input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        input_page.entity2.index.cancel_selected_value()\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Field Index is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_default_value_index(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of field index in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        default_index = \"default\"\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(input_page.entity2.index.get_value, default_index)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_required_field_example_example_account(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field Account in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"dummy_input\")\n        input_page.entity2.example_checkbox.check()\n        input_page.entity2.example_radio.select(\"No\")\n        input_page.entity2.example_multiple_select.select(\"Option One\")\n        input_page.entity2.index.select(\"main\")\n        input_page.entity2.interval.set_value(\"90\")\n        input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Field Example Account is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_required_field_example_multiple_select(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies required field Example Multiple Select in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"dummy_input\")\n        input_page.entity2.example_checkbox.check()\n        input_page.entity2.example_radio.select(\"No\")\n        input_page.entity2.index.select(\"main\")\n        input_page.entity2.interval.set_value(\"90\")\n        input_page.entity2.example_account.select(\"test_input\")\n        input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Field Example Multiple Select is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_list_example_multiple_select(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies values of Multiple Select Test dropdown in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        example_multiple_select_list = [\"Option One\", \"Option Two\"]\n        self.assert_util(\n            input_page.entity2.example_multiple_select.list_of_values(),\n            example_multiple_select_list,\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_select_select_value_example_multiple_select(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies selected single value of Multiple Select Test dropdown in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        selected_value = [\"Option One\"]\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.index.select(\"main\")\n        for each in selected_value:\n            input_page.entity2.example_multiple_select.select(each)\n        self.assert_util(\n            input_page.entity2.example_multiple_select.get_values, selected_value\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_select_multiple_values_example_multiple_select(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies selected multiple values of Multiple Select Test dropdown in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        selected_values = [\"Option One\", \"Option Two\"]\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.index.select(\"main\")\n        for each in selected_values:\n            input_page.entity2.example_multiple_select.select(each)\n        self.assert_util(\n            input_page.entity2.example_multiple_select.get_values, selected_values\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_help_text_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies help text for the field name\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(\n            input_page.entity2.example_multiple_select.get_help_text,\n            \"This is an example multipleSelect for input two entity\",\n        )\n        self.assert_util(\n            input_page.entity2.name.get_help_text, \"A unique name for the data input.\"\n        )\n        self.assert_util(\n            input_page.entity2.interval.get_help_text,\n            \"Time interval of the data input, in seconds.\",\n        )\n        self.assert_util(\n            input_page.entity2.example_checkbox.get_help_text,\n            \"This is an example checkbox for the input two entity\",\n        )\n        self.assert_util(\n            input_page.entity2.example_radio.get_help_text,\n            \"This is an example radio button for the input two entity\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_checked_example_checkbox(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies Check in example checkbox in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(input_page.entity2.example_checkbox.check, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_unchecked_example_checkbox(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies Uncheck in example checkbox in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.example_checkbox.check()\n        self.assert_util(input_page.entity2.example_checkbox.uncheck, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_required_field_example_radio(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of example radio in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"dummy_input\")\n        input_page.entity2.example_checkbox.check()\n        input_page.entity2.example_multiple_select.select(\"Option One\")\n        input_page.entity2.index.select(\"main\")\n        input_page.entity2.interval.set_value(\"90\")\n        input_page.entity2.example_account.select(\"test_input\")\n        input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Field Example Radio is required\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_select_value_example_radio(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies default value of example radio in Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.example_radio.select(\"No\")\n        self.assert_util(input_page.entity2.example_radio.get_value, \"No\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_valid_input_query_start_date(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies whether adding wrong format, Query Start Date field displays validation error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"test_name_two\")\n        input_page.entity2.interval.set_value(\"120\")\n        input_page.entity2.example_account.select(\"test_input\")\n        input_page.entity2.example_multiple_select.select(\"Option One\")\n        input_page.entity2.example_radio.select(\"Yes\")\n        input_page.entity2.query_start_date.set_value(\"2020/01/01\")\n        self.assert_util(\n            input_page.entity2.save,\n            r\"Invalid date and time format\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.sanity_test\n    def test_example_input_two_add_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the frontend and backend after adding an Example Input Two\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"dummy_input\")\n        input_page.entity2.example_checkbox.check()\n        input_page.entity2.example_radio.select(\"No\")\n        input_page.entity2.example_multiple_select.select(\"Option One\")\n        input_page.entity2.example_multiple_select.select(\"Option Two\")\n        input_page.entity2.index.select(\"main\")\n        input_page.entity2.interval.set_value(\"90\")\n        input_page.entity2.example_account.select(\"test_input\")\n        input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n        self.assert_util(input_page.entity2.save, True)\n        input_page.table.wait_for_rows_to_appear(1)\n        self.assert_util(\n            input_page.table.get_table()[\"dummy_input\"],\n            {\n                \"name\": \"dummy_input\",\n                \"account\": \"test_input\",\n                \"interval\": \"90\",\n                \"index\": \"main\",\n                \"input type\": \"Example Input Two\",\n                \"input service\": \"example_input_two\",\n                \"status\": \"Active\",\n                \"actions\": \"Edit | Clone | Search | Delete\",\n            },\n        )\n        value_to_test = {\n            \"account\": \"test_input\",\n            \"index\": \"main\",\n            \"input_two_checkbox\": \"1\",\n            \"input_two_radio\": \"0\",\n            \"interval\": \"90\",\n            \"input_two_multiple_select\": \"one,two\",\n            \"start_date\": \"2020-12-11T20:00:32.000z\",\n            \"disabled\": 0,\n        }\n        backend_stanza = input_page.backend_conf.get_stanza(\n            \"example_input_two://dummy_input\"\n        )\n        for each_key, each_value in value_to_test.items():\n            self.assert_util(each_key, backend_stanza, operator=\"in\")\n            self.assert_util(each_value, backend_stanza[each_key])\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_edit_uneditable_field_name(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies the frontend uneditable fields at time of edit of the Example Input Two entity\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(input_page.entity2.name.is_editable, False)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.sanity_test\n    def test_example_input_two_edit_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies the frontend and backend edit functionality of the Example Input Two entity\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.example_checkbox.uncheck()\n        input_page.entity2.example_radio.select(\"Yes\")\n        input_page.entity2.example_account.select(\"test_input\")\n        input_page.entity2.example_multiple_select.deselect(\"Option One\")\n        input_page.entity2.interval.set_value(\"3600\")\n        input_page.entity2.query_start_date.set_value(\"2020-20-20T20:20:20.000z\")\n        self.assert_util(input_page.entity2.save, True)\n        input_page.table.wait_for_rows_to_appear(1)\n        self.assert_util(\n            input_page.table.get_table()[\"dummy_input_two\"],\n            {\n                \"name\": \"dummy_input_two\",\n                \"account\": \"test_input\",\n                \"interval\": \"3600\",\n                \"input type\": \"Example Input Two\",\n                \"input service\": \"example_input_two\",\n                \"index\": \"main\",\n                \"status\": \"Active\",\n                \"actions\": \"Edit | Clone | Search | Delete\",\n            },\n        )\n        value_to_test = {\n            \"account\": \"test_input\",\n            \"input_two_checkbox\": \"0\",\n            \"input_two_radio\": \"1\",\n            \"interval\": \"3600\",\n            \"index\": \"main\",\n            \"input_two_multiple_select\": \"two\",\n            \"start_date\": \"2020-20-20T20:20:20.000z\",\n            \"disabled\": 0,\n        }\n        backend_stanza = input_page.backend_conf.get_stanza(\n            \"example_input_two://dummy_input_two\"\n        )\n        for each_key, each_value in value_to_test.items():\n            self.assert_util(each_key, backend_stanza, operator=\"in\")\n            self.assert_util(each_value, backend_stanza[each_key])\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_clone_default_values(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies the frontend default fields at time of clone for Example Input Two entity\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(input_page.entity2.name.get_value, \"\")\n        self.assert_util(input_page.entity2.example_checkbox.is_checked, True)\n        self.assert_util(input_page.entity2.example_radio.get_value, \"No\")\n        self.assert_util(\n            input_page.entity2.example_multiple_select.get_values,\n            [\"Option One\", \"Option Two\"],\n        )\n        self.assert_util(input_page.entity2.interval.get_value, \"100\")\n        self.assert_util(input_page.entity2.index.get_value, \"main\")\n        self.assert_util(input_page.entity2.example_account.get_value, \"test_input\")\n        self.assert_util(\n            input_page.entity2.query_start_date.get_value, \"2016-10-10T12:10:15.000z\"\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.sanity_test\n    def test_example_input_two_clone_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies the frontend and backend clone functionality of the Example Input Two entity\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.wait_for_rows_to_appear(1)\n        input_page.table.clone_row(\"dummy_input_two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_page.entity2.name.set_value(\"dummy_input_two_Clone_Test\")\n        input_page.entity2.interval.set_value(\"180\")\n        self.assert_util(input_page.entity2.save, True)\n        input_page.table.wait_for_rows_to_appear(2)\n        self.assert_util(\n            input_page.table.get_table()[\"dummy_input_two_Clone_Test\"],\n            {\n                \"name\": \"dummy_input_two_Clone_Test\",\n                \"account\": \"test_input\",\n                \"interval\": \"180\",\n                \"input type\": \"Example Input Two\",\n                \"input service\": \"example_input_two\",\n                \"index\": \"main\",\n                \"status\": \"Active\",\n                \"actions\": \"Edit | Clone | Search | Delete\",\n            },\n        )\n        value_to_test = {\n            \"account\": \"test_input\",\n            \"input_two_checkbox\": \"1\",\n            \"input_two_radio\": \"0\",\n            \"interval\": \"180\",\n            \"index\": \"main\",\n            \"input_two_multiple_select\": \"one,two\",\n            \"start_date\": \"2016-10-10T12:10:15.000z\",\n            \"disabled\": 0,\n        }\n        backend_stanza = input_page.backend_conf.get_stanza(\n            \"example_input_two://dummy_input_two_Clone_Test\"\n        )\n        for each_key, each_value in value_to_test.items():\n            self.assert_util(each_key, backend_stanza, operator=\"in\")\n            self.assert_util(each_value, backend_stanza[each_key])\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.sanity_test\n    def test_example_input_two_delete_row_frontend_backend_validation(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies the frontend and backend delete functionality\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.input_status_toggle(\"dummy_input_two\", enable=False)\n        input_page.table.delete_row(\"dummy_input_two\")\n        input_page.table.wait_for_rows_to_appear(0)\n        self.assert_util(\"dummy_input_two\", input_page.table.get_table, \"not in\")\n        self.assert_util(\n            \"example_input_two://dummy_input_two\",\n            input_page.backend_conf.get_all_stanzas().keys(),\n            \"not in\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_add_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies close functionality at time of add\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(input_page.entity2.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_edit_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies close functionality at time of edit\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_two\")\n        self.assert_util(input_page.entity2.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_clone_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies close functionality at time of clone\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_two\")\n        self.assert_util(input_page.entity2.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_delete_close_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies close functionality at time of delete\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            input_page.table.delete_row,\n            True,\n            left_args={\"name\": \"dummy_input_two\", \"close\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_add_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies cancel functionality at time of add\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(input_page.entity2.cancel, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_edit_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies cancel functionality at time of edit\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_two\")\n        self.assert_util(input_page.entity2.cancel, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_clone_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies cancel functionality at time of clone\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_two\")\n        self.assert_util(input_page.entity2.cancel, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_delete_cancel_entity(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies cancel functionality at time of delete\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        self.assert_util(\n            input_page.table.delete_row,\n            True,\n            left_args={\"name\": \"dummy_input_two\", \"cancel\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_add_duplicate_names(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies by saving an entity with duplicate name it displays and error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_name = \"dummy_input_two\"\n        input_page.entity2.name.set_value(input_name)\n        self.assert_util(\n            input_page.entity2.save,\n            f\"Name {input_name} is already in use\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_clone_duplicate_names(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies by saving an entity with duplicate name at time of clone it displays and error\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_two\")\n        input_page.entity2.example_account.wait_for_values()\n        input_name = \"dummy_input_two\"\n        input_page.entity2.name.set_value(input_name)\n        self.assert_util(\n            input_page.entity2.save,\n            f\"Name {input_name} is already in use\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_add_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n    ):\n        \"\"\"Verifies the title of the 'Add Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(\n            input_page.entity2.title.container.get_attribute(\"textContent\").strip(),\n            \"Add Example Input Two\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_edit_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies the title of the 'Edit Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(\n            input_page.entity2.title.container.get_attribute(\"textContent\").strip(),\n            \"Update Example Input Two\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_clone_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies the title of the 'Clone Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.clone_row(\"dummy_input_two\")\n        input_page.entity2.example_account.wait_for_values()\n        self.assert_util(\n            input_page.entity2.title.container.get_attribute(\"textContent\").strip(),\n            \"Clone Example Input Two\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_delete_valid_title(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies the title of the 'Delete Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.delete_row(\"dummy_input_two\", prompt_msg=True)\n        self.assert_util(\n            input_page.entity2.title.container.get_attribute(\"textContent\").strip(),\n            \"Delete Confirmation\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_input_two_delete_valid_prompt_message(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n    ):\n        \"\"\"Verifies the prompt message of the 'Delete Entity'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_name = \"dummy_input_two\"\n        prompt_message = input_page.table.delete_row(\"dummy_input_two\", prompt_msg=True)\n        self.assert_util(\n            prompt_message, f'Are you sure you want to delete \"{input_name}\" ?'\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_enable_all_title_message(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies title and message of enable all prompt\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.enable_all_inputs()\n        self.assert_util(\n            input_page.interact_all_prompt_entity.prompt_title.container.get_attribute(\n                \"textContent\"\n            ).strip(),\n            \"Activate all\",\n        )\n        self.assert_util(\n            input_page.interact_all_prompt_entity.prompt_message.container.get_attribute(\n                \"textContent\"\n            ).strip(),\n            \"Do you want to activate all? It may take a while.\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_disable_all_title_message(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"Verifies title and message of disable all prompt\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.disable_all_inputs()\n        self.assert_util(\n            input_page.interact_all_prompt_entity.prompt_title.container.get_attribute(\n                \"textContent\"\n            ).strip(),\n            \"Deactivate all\",\n        )\n        self.assert_util(\n            input_page.interact_all_prompt_entity.prompt_message.container.get_attribute(\n                \"textContent\"\n            ).strip(),\n            \"Do you want to deactivate all? It may take a while.\",\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_enable_all_close(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"\n        Verifies that closing the 'Activate All' prompt behaves correctly.\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.enable_all_inputs()\n        self.assert_util(input_page.interact_all_prompt_entity.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_disable_all_close(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"\n        Verifies that closing the 'Deactivate All' prompt behaves correctly.\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.disable_all_inputs()\n        self.assert_util(input_page.interact_all_prompt_entity.close, True)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_enable_all_deny(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"\n        Verifies that when 'Activate All' is followed by 'Deny,' inputs remain disabled.\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        inputs_enabled_table = input_page.table.get_table()\n        inputs_disabled_table = copy.deepcopy(inputs_enabled_table)\n        for i in inputs_disabled_table:\n            inputs_disabled_table[i][\"status\"] = \"Inactive\"\n        input_page.disable_all_inputs()\n        input_page.interact_all_prompt_entity.confirm()\n        input_page.enable_all_inputs()\n        input_page.interact_all_prompt_entity.deny()\n        self.assert_util(input_page.table.get_table(), inputs_disabled_table)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_disable_all_deny(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"\n        Verifies that when 'Deactivate All' is followed by 'Deny,' inputs remain enabled.\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        inputs_enabled_table = input_page.table.get_table()\n        input_page.disable_all_inputs()\n        input_page.interact_all_prompt_entity.deny()\n        self.assert_util(input_page.table.get_table(), inputs_enabled_table)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_disable_enable_all(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_inputs\n    ):\n        \"\"\"Verifies that all inputs are disabled after clicking 'Deactivate all'\"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        inputs_enabled_table = input_page.table.get_table()\n        inputs_disabled_table = copy.deepcopy(inputs_enabled_table)\n        for i in inputs_disabled_table:\n            inputs_disabled_table[i][\"status\"] = \"Inactive\"\n        input_page.disable_all_inputs()\n        input_page.interact_all_prompt_entity.confirm()\n        time.sleep(10)\n        self.assert_util(input_page.table.get_table(), inputs_disabled_table)\n        input_page.enable_all_inputs()\n        input_page.interact_all_prompt_entity.confirm()\n        time.sleep(10)\n        self.assert_util(input_page.table.get_table(), inputs_enabled_table)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_disable_all_enable_all_input_one_input_two(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n        _add_input_one,\n        _add_input_two,\n    ):\n        \"\"\"\n        Verifies that various types of inputs are correctly disabled and enabled\n        when using the 'Deactivate All' and 'Activate All' buttons.\n        This test covers scenarios with both Input One and Input Two added.\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        inputs_enabled_table = input_page.table.get_table()\n        inputs_disabled_table = copy.deepcopy(inputs_enabled_table)\n        for i in inputs_disabled_table:\n            inputs_disabled_table[i][\"status\"] = \"Inactive\"\n        input_page.disable_all_inputs()\n        input_page.interact_all_prompt_entity.confirm()\n        time.sleep(1)\n        self.assert_util(input_page.table.get_table(), inputs_disabled_table)\n        input_page.enable_all_inputs()\n        input_page.interact_all_prompt_entity.confirm()\n        time.sleep(1)\n        self.assert_util(input_page.table.get_table(), inputs_enabled_table)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_enable_all_some_already_enabled(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n        _add_input_one,\n        _add_input_two,\n    ):\n        \"\"\"\n        Verifies that all inputs are enabled correctly.\n        This test covers scenario where one input is already enabled.\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        inputs_enabled_table = input_page.table.get_table()\n        self.assert_util(\n            input_page.table.input_status_toggle,\n            True,\n            left_args={\"name\": \"dummy_input_one\", \"enable\": False},\n        )\n        input_page.enable_all_inputs()\n        time.sleep(1)\n        input_page.interact_all_prompt_entity.confirm()\n        self.assert_util(input_page.table.get_table(), inputs_enabled_table)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_disable_all_some_already_disabled(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n        _add_input_one,\n        _add_input_two,\n    ):\n        \"\"\"\n        Verifies that all inputs are disabled correctly.\n        This test covers scenario where one input is already disabled.\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        inputs_enabled_table = input_page.table.get_table()\n        inputs_disabled_table = copy.deepcopy(inputs_enabled_table)\n        for i in inputs_disabled_table:\n            inputs_disabled_table[i][\"status\"] = \"Inactive\"\n        self.assert_util(\n            input_page.table.input_status_toggle,\n            True,\n            left_args={\"name\": \"dummy_input_one\", \"enable\": False},\n        )\n        input_page.disable_all_inputs()\n        input_page.interact_all_prompt_entity.confirm()\n        time.sleep(1)\n        self.assert_util(input_page.table.get_table(), inputs_disabled_table)\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_textarea_height(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"\n        Verifies that textarea height values.\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_one\")\n        # get_textarea_height() return 60\n        min_textarea_height = 65\n        max_textarea_height = 305\n        tolerance = 5\n        long_input = \"\"\n        self.assert_util(\n            min_textarea_height - tolerance\n            &lt;= input_page.entity1.text_area.get_textarea_height()\n            &lt;= min_textarea_height + tolerance,\n            True,\n        )\n\n        for i in range(1, 50):\n            long_input += f\"{str(i)}\\n\"\n        input_page.entity1.text_area.append_value(long_input)\n        self.assert_util(\n            max_textarea_height - tolerance\n            &lt;= input_page.entity1.text_area.get_textarea_height()\n            &lt;= max_textarea_height + tolerance,\n            True,\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_textarea_big_input(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"\n        Verifies that textarea can handle big inputs\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_one\")\n        big_input = \"\"\n        for i in range(1, 100):\n            big_input += f\"{str(i)}\\n\"\n        input_page.entity1.text_area.set_value(big_input)\n        self.assert_util(big_input, input_page.entity1.text_area.get_value())\n        self.assert_util(input_page.entity1.save, True)\n        input_page.table.edit_row(\"dummy_input_one\")\n        self.assert_util(big_input.strip(), input_page.entity1.text_area.get_value())\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_inputs_textarea_scroll(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n    ):\n        \"\"\"\n        Verifies that textarea height values\n        \"\"\"\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.table.edit_row(\"dummy_input_one\")\n        long_input = \"\"\n        screnshot_before = input_page.entity1.text_area.screenshot()\n        for i in range(1, 50):\n            long_input += f\"{str(i)}\\n\"\n        input_page.entity1.text_area.append_value(long_input)\n        input_page.entity1.text_area.scroll(\"UP\", 40)\n        screenshot_after = input_page.entity1.text_area.screenshot()\n        self.assert_util(screnshot_before, screenshot_after, operator=\"!=\")\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.parametrize(\n        \"interval\",\n        [\n            \"-1\",\n            \"1\",\n            \"0 0,11 2 */2 *\",\n            \"* * * * *\",\n        ],\n    )\n    def test_example_inputs_with_valid_interval(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, interval\n    ):\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        # for input_pos, interval in enumerate(intervals, 1):\n        name = \"dummy_input\"\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.name.set_value(name)\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n\n        input_page.entity1.interval.set_value(interval)\n\n        input_page.entity1.save_btn.click()\n        input_page.table.wait_for_rows_to_appear(1)\n\n        self.assert_util(\n            input_page.table.get_table()[name],\n            {\n                \"name\": name,\n                \"account\": \"test_input\",\n                \"interval\": interval,\n                \"input type\": \"Example Input One\",\n                \"input service\": \"example_input_one\",\n                \"index\": \"default\",\n                \"status\": \"Active\",\n                \"actions\": \"Edit | Clone | Search | Delete\",\n            },\n        )\n\n        backend_stanza = input_page.backend_conf.get_stanza(\n            f\"example_input_one://{name}\"\n        )\n        assert backend_stanza.get(\"interval\") == interval\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    @pytest.mark.parametrize(\n        \"interval\",\n        [\n            \"-2\",\n            \"0a 0,11 2 */2 *\",\n            \"a b * * *\",\n        ],\n    )\n    def test_example_inputs_with_not_valid_interval(\n        self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, interval\n    ):\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        name = \"dummy_input\"\n        input_page.create_new_input.select(\"Example Input One\")\n        input_page.entity1.example_account.wait_for_values()\n        input_page.entity1.example_account.select(\"test_input\")\n        input_page.entity1.object.set_value(\"test_object\")\n        input_page.entity1.name.set_value(name)\n        input_page.entity1.object_fields.set_value(\"test_field\")\n        input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n\n        input_page.entity1.interval.set_value(interval)\n\n        self.assert_util(\n            input_page.entity2.save,\n            \"Interval must be either a non-negative number, CRON interval or -1.\",\n            left_args={\"expect_error\": True},\n        )\n\n    @pytest.mark.execute_enterprise_cloud_true\n    @pytest.mark.forwarder\n    @pytest.mark.input\n    def test_example_inputs_same_name_different_service(\n        self,\n        ucc_smartx_selenium_helper,\n        ucc_smartx_rest_helper,\n        _add_input_one,\n    ):\n        \"\"\"\n        Verifies that same name can not be used for different services\n        \"\"\"\n        existing_name_for_service_one = \"dummy_input_one\"\n\n        input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n        input_page.create_new_input.select(\"Example Input Two\")\n        input_page.entity2.example_account.wait_for_values()\n\n        input_page.entity2.name.set_value(existing_name_for_service_one)\n        input_page.entity2.example_checkbox.check()\n        input_page.entity2.example_radio.select(\"No\")\n        input_page.entity2.example_multiple_select.select(\"Option One\")\n        input_page.entity2.index.select(\"main\")\n        input_page.entity2.interval.set_value(\"90\")\n        input_page.entity2.example_account.select(\"test_input\")\n        input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n\n        input_page.entity2.save_btn.click()\n        self.assert_util(\n            input_page.entity1.save,\n            f\"Name {existing_name_for_service_one} is already in use\",\n            left_args={\"expect_error\": True},\n        )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_dependent_dropdown_when_radio_input_is_no","title":"<code>test_dependent_dropdown_when_radio_input_is_no(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies values of dependent_dropdown in example input one when radio input is no</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_dependent_dropdown_when_radio_input_is_no(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies values of dependent_dropdown in example input one when radio input is no\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    dependent_dropdown_test_list = [\"denial\"]\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_radio.select(\"No\")\n    self.assert_util(\n        input_page.entity1.dependent_dropdown.list_of_values(),\n        dependent_dropdown_test_list,\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_dependent_dropdown_when_radio_input_is_yes","title":"<code>test_dependent_dropdown_when_radio_input_is_yes(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies values of dependent_dropdown in example input one when radio input is yes</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_dependent_dropdown_when_radio_input_is_yes(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies values of dependent_dropdown in example input one when radio input is yes\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    dependent_dropdown_test_list = [\"affirmation\"]\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_radio.select(\"Yes\")\n    self.assert_util(\n        input_page.entity1.dependent_dropdown.list_of_values(),\n        dependent_dropdown_test_list,\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_add_cancel_entity","title":"<code>test_example_input_one_add_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies cancel functionality at time of add</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_add_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies cancel functionality at time of add\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(input_page.entity1.cancel, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_add_close_entity","title":"<code>test_example_input_one_add_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies close functionality at time of add</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_add_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies close functionality at time of add\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(input_page.entity1.close, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_add_duplicate_names","title":"<code>test_example_input_one_add_duplicate_names(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies by saving an entity with duplicate name it displays and error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_add_duplicate_names(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies by saving an entity with duplicate name it displays and error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_name = \"dummy_input_one\"\n    input_page.entity1.name.set_value(input_name)\n    self.assert_util(\n        input_page.entity1.save,\n        f\"Name {input_name} is already in use\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_add_frontend_backend_validation","title":"<code>test_example_input_one_add_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the frontend and backend after adding an Example Input One</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.sanity_test\ndef test_example_input_one_add_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the frontend and backend after adding an Example Input One\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"dummy_input\")\n    input_page.entity1.example_radio.select(\"Yes\")\n    input_page.entity1.single_select_group_test.select(\"Two\")\n    input_page.entity1.interval.set_value(\"90\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    self.assert_util(input_page.entity1.save, True)\n    input_page.table.wait_for_rows_to_appear(1)\n    self.assert_util(\n        input_page.table.get_table()[\"dummy_input\"],\n        {\n            \"name\": \"dummy_input\",\n            \"account\": \"test_input\",\n            \"interval\": \"90\",\n            \"input type\": \"Example Input One\",\n            \"input service\": \"example_input_one\",\n            \"index\": \"default\",\n            \"status\": \"Active\",\n            \"actions\": \"Edit | Clone | Search | Delete\",\n        },\n    )\n    value_to_test = {\n        \"account\": \"test_input\",\n        \"input_one_checkbox\": \"1\",\n        \"input_one_radio\": \"1\",\n        \"interval\": \"90\",\n        \"limit\": \"1000\",\n        \"multipleSelectTest\": \"a|b\",\n        \"object\": \"test_object\",\n        \"object_fields\": \"test_field\",\n        \"order_by\": \"LastModifiedDate\",\n        \"singleSelectTest\": \"two\",\n        \"start_date\": \"2020-12-11T20:00:32.000z\",\n        \"disabled\": 0,\n        \"example_textarea_field\": \"line1\\nline2\\nline3\\nline4\\nline5\",\n    }\n    backend_stanza = input_page.backend_conf.get_stanza(\n        \"example_input_one://dummy_input\"\n    )\n    for each_key, each_value in value_to_test.items():\n        assert each_key in backend_stanza\n        self.assert_util(\n            each_value,\n            backend_stanza[each_key],\n        )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_add_valid_title","title":"<code>test_example_input_one_add_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the title of the \u2018Add Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_add_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the title of the 'Add Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(\n        input_page.entity1.title.container.get_attribute(\"textContent\").strip(),\n        \"Add Example Input One\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_checked_example_checkbox","title":"<code>test_example_input_one_checked_example_checkbox(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies checked in example checkbox in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_checked_example_checkbox(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies checked in example checkbox in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_checkbox.uncheck()\n    self.assert_util(input_page.entity1.example_checkbox.check, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_clone_cancel_entity","title":"<code>test_example_input_one_clone_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies cancel functionality at time of clone</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_clone_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies cancel functionality at time of clone\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_one\")\n    self.assert_util(input_page.entity1.cancel, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_clone_close_entity","title":"<code>test_example_input_one_clone_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies close functionality at time of clone</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_clone_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies close functionality at time of clone\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_one\")\n    self.assert_util(input_page.entity1.close, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_clone_default_values","title":"<code>test_example_input_one_clone_default_values(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the frontend default fields at time of clone for example input one entity</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_clone_default_values(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the frontend default fields at time of clone for example input one entity\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_one\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(input_page.entity1.name.get_value, \"\")\n    self.assert_util(input_page.entity1.example_checkbox.is_checked, True)\n    self.assert_util(input_page.entity1.example_radio.get_value, \"Yes\")\n    self.assert_util(input_page.entity1.single_select_group_test.get_value, \"Two\")\n    self.assert_util(input_page.entity1.multiple_select_test.get_values, [\"A\", \"B\"])\n    self.assert_util(input_page.entity1.interval.get_value, \"90\")\n    self.assert_util(input_page.entity1.index.get_value, \"default\")\n    self.assert_util(input_page.entity1.example_account.get_value, \"test_input\")\n    self.assert_util(input_page.entity1.object.get_value, \"test_object\")\n    self.assert_util(input_page.entity1.object_fields.get_value, \"test_field\")\n    self.assert_util(input_page.entity1.order_by.get_value, \"LastModifiedDate\")\n    self.assert_util(\n        input_page.entity1.query_start_date.get_value, \"2020-12-11T20:00:32.000z\"\n    )\n    self.assert_util(input_page.entity1.limit.get_value, \"1000\")\n    self.assert_util(input_page.entity1.text_area.get_value, \"line1\\nline2\")\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_clone_duplicate_names","title":"<code>test_example_input_one_clone_duplicate_names(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies by saving an entity with duplicate name at time of clone it displays and error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_clone_duplicate_names(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies by saving an entity with duplicate name at time of clone it displays and error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_one\")\n    input_page.entity1.example_account.wait_for_values()\n    input_name = \"dummy_input_one\"\n    input_page.entity1.name.set_value(input_name)\n    self.assert_util(\n        input_page.entity1.save,\n        f\"Name {input_name} is already in use\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_clone_frontend_backend_validation","title":"<code>test_example_input_one_clone_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the frontend and backend clone functionality of the example input one entity</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.sanity_test\ndef test_example_input_one_clone_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the frontend and backend clone functionality of the example input one entity\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.wait_for_rows_to_appear(1)\n    input_page.table.clone_row(\"dummy_input_one\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"dummy_input_one_Clone_Test\")\n    input_page.entity1.interval.set_value(\"180\")\n    input_page.entity1.limit.set_value(\"500\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    self.assert_util(input_page.entity1.save, True)\n    input_page.table.wait_for_rows_to_appear(2)\n    self.assert_util(\n        input_page.table.get_table()[\"dummy_input_one_Clone_Test\"],\n        {\n            \"name\": \"dummy_input_one_Clone_Test\",\n            \"account\": \"test_input\",\n            \"interval\": \"180\",\n            \"input type\": \"Example Input One\",\n            \"input service\": \"example_input_one\",\n            \"index\": \"default\",\n            \"status\": \"Active\",\n            \"actions\": \"Edit | Clone | Search | Delete\",\n        },\n    )\n    value_to_test = {\n        \"account\": \"test_input\",\n        \"input_one_checkbox\": \"1\",\n        \"input_one_radio\": \"1\",\n        \"interval\": \"180\",\n        \"index\": \"default\",\n        \"limit\": \"500\",\n        \"multipleSelectTest\": \"a|b\",\n        \"object\": \"test_object\",\n        \"object_fields\": \"test_field\",\n        \"order_by\": \"LastModifiedDate\",\n        \"singleSelectTest\": \"two\",\n        \"start_date\": \"2020-12-11T20:00:32.000z\",\n        \"example_textarea_field\": \"line1\\nline2\\nline3\\nline4\\nline5\",\n        \"disabled\": 0,\n    }\n    backend_stanza = input_page.backend_conf.get_stanza(\n        \"example_input_one://dummy_input_one_Clone_Test\"\n    )\n    for each_key, each_value in value_to_test.items():\n        self.assert_util(each_key, backend_stanza, operator=\"in\")\n        self.assert_util(each_value, backend_stanza[each_key])\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_clone_save_entity","title":"<code>test_example_input_one_clone_save_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies required field name in example input one at time of clone</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_clone_save_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies required field name in example input one at time of clone\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_one\")\n    self.assert_util(\n        input_page.entity1.save,\n        \"Field Name is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_clone_valid_title","title":"<code>test_example_input_one_clone_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the title of the \u2018Clone Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_clone_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the title of the 'Clone Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_one\")\n    self.assert_util(\n        input_page.entity1.title.container.get_attribute(\"textContent\").strip(),\n        \"Clone Example Input One\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_default_value_example_checkbox","title":"<code>test_example_input_one_default_value_example_checkbox(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of example checkbox in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_default_value_example_checkbox(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of example checkbox in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(input_page.entity1.example_checkbox.is_checked, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_default_value_example_radio","title":"<code>test_example_input_one_default_value_example_radio(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of example radio in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_default_value_example_radio(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of example radio in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(input_page.entity1.example_radio.get_value, \"Yes\")\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_default_value_index","title":"<code>test_example_input_one_default_value_index(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of field index in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_default_value_index(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of field index in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    default_index = \"default\"\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(input_page.entity1.index.get_value, default_index)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_default_value_limit","title":"<code>test_example_input_one_default_value_limit(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of field limit in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_default_value_limit(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of field limit in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    default_limit = \"1000\"\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(input_page.entity1.limit.get_value, default_limit)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_default_value_multiple_select_test","title":"<code>test_example_input_one_default_value_multiple_select_test(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default values of Multiple Select Test dropdown in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_default_value_multiple_select_test(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default values of Multiple Select Test dropdown in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    default_values = [\"A\", \"B\"]\n    self.assert_util(\n        input_page.entity1.multiple_select_test.get_values, default_values\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_default_value_order_by","title":"<code>test_example_input_one_default_value_order_by(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of field Order By in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_default_value_order_by(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of field Order By in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    default_order_by = \"LastModifiedDate\"\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(input_page.entity1.order_by.get_value, default_order_by)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_delete_cancel_entity","title":"<code>test_example_input_one_delete_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies cancel functionality at time of delete</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_delete_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies cancel functionality at time of delete\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        input_page.table.delete_row,\n        True,\n        left_args={\"name\": \"dummy_input_one\", \"cancel\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_delete_close_entity","title":"<code>test_example_input_one_delete_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies close functionality at time of delete</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_delete_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies close functionality at time of delete\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        input_page.table.delete_row,\n        True,\n        left_args={\"name\": \"dummy_input_one\", \"close\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_delete_row_frontend_backend_validation","title":"<code>test_example_input_one_delete_row_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the frontend and backend delete functionality</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.sanity_test\ndef test_example_input_one_delete_row_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the frontend and backend delete functionality\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.input_status_toggle(\"dummy_input_one\", enable=False)\n    input_page.table.delete_row(\"dummy_input_one\")\n    input_page.table.wait_for_rows_to_appear(0)\n    self.assert_util(\"dummy_input_one\", input_page.table.get_table, \"not in\")\n    self.assert_util(\n        \"example_input_one://dummy_input_one\",\n        input_page.backend_conf.get_all_stanzas().keys(),\n        \"not in\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_delete_valid_prompt_message","title":"<code>test_example_input_one_delete_valid_prompt_message(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the prompt message of the \u2018Delete Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_delete_valid_prompt_message(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the prompt message of the 'Delete Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_name = \"dummy_input_one\"\n    prompt_message = input_page.table.delete_row(\"dummy_input_one\", prompt_msg=True)\n    self.assert_util(\n        prompt_message, f'Are you sure you want to delete \"{input_name}\" ?'\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_delete_valid_title","title":"<code>test_example_input_one_delete_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the title of the \u2018Delete Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_delete_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the title of the 'Delete Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.delete_row(\"dummy_input_one\", prompt_msg=True)\n    self.assert_util(\n        input_page.entity1.title.container.get_attribute(\"textContent\").strip(),\n        \"Delete Confirmation\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_deselect_multiple_select_test","title":"<code>test_example_input_one_deselect_multiple_select_test(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies deselect in Multiple Select Test dropdown in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_deselect_multiple_select_test(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies deselect in Multiple Select Test dropdown in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    selected_values = [\"A\", \"B\"]\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.multiple_select_test.deselect_all()\n    for each in selected_values:\n        input_page.entity1.multiple_select_test.select(each)\n    input_page.entity1.multiple_select_test.deselect(\"A\")\n    self.assert_util(input_page.entity1.multiple_select_test.get_values, [\"B\"])\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_edit_cancel_entity","title":"<code>test_example_input_one_edit_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies cancel functionality at time of edit</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_edit_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies cancel functionality at time of edit\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_one\")\n    self.assert_util(input_page.entity1.cancel, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_edit_close_entity","title":"<code>test_example_input_one_edit_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies close functionality at time of edit</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_edit_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies close functionality at time of edit\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_one\")\n    self.assert_util(input_page.entity1.close, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_edit_frontend_backend_validation","title":"<code>test_example_input_one_edit_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the frontend and backend edit functionality of the example input one entity</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.sanity_test\ndef test_example_input_one_edit_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the frontend and backend edit functionality of the example input one entity\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_one\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_checkbox.uncheck()\n    input_page.entity1.example_radio.select(\"No\")\n    input_page.entity1.single_select_group_test.select(\"four\")\n    input_page.entity1.multiple_select_test.deselect(\"b\")\n    input_page.entity1.interval.set_value(\"3600\")\n    input_page.entity1.index.select(\"main\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"edit_object\")\n    input_page.entity1.object_fields.set_value(\"edit_field\")\n    input_page.entity1.order_by.set_value(\"LastDate\")\n    input_page.entity1.limit.set_value(\"2000\")\n    input_page.entity1.query_start_date.set_value(\"2020-20-20T20:20:20.000z\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    self.assert_util(input_page.entity1.save, True)\n    input_page.table.wait_for_rows_to_appear(1)\n    self.assert_util(\n        input_page.table.get_table()[\"dummy_input_one\"],\n        {\n            \"name\": \"dummy_input_one\",\n            \"account\": \"test_input\",\n            \"interval\": \"3600\",\n            \"input type\": \"Example Input One\",\n            \"input service\": \"example_input_one\",\n            \"index\": \"main\",\n            \"status\": \"Active\",\n            \"actions\": \"Edit | Clone | Search | Delete\",\n        },\n    )\n    value_to_test = {\n        \"account\": \"test_input\",\n        \"input_one_checkbox\": \"0\",\n        \"input_one_radio\": \"0\",\n        \"interval\": \"3600\",\n        \"index\": \"main\",\n        \"limit\": \"2000\",\n        \"multipleSelectTest\": \"a\",\n        \"object\": \"edit_object\",\n        \"object_fields\": \"edit_field\",\n        \"order_by\": \"LastDate\",\n        \"singleSelectTest\": \"four\",\n        \"start_date\": \"2020-20-20T20:20:20.000z\",\n        \"example_textarea_field\": \"line1\\nline2\\nline3\\nline4\\nline5\",\n        \"disabled\": 0,\n    }\n    backend_stanza = input_page.backend_conf.get_stanza(\n        \"example_input_one://dummy_input_one\"\n    )\n    for each_key, each_value in value_to_test.items():\n        self.assert_util(each_key, backend_stanza, operator=\"in\")\n        self.assert_util(each_value, backend_stanza[each_key])\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_edit_uneditable_field_name","title":"<code>test_example_input_one_edit_uneditable_field_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the frontend uneditable fields at time of edit of the example input one entity</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_edit_uneditable_field_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the frontend uneditable fields at time of edit of the example input one entity\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_one\")\n    self.assert_util(input_page.entity1.name.is_editable, False)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_edit_valid_title","title":"<code>test_example_input_one_edit_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the title of the \u2018Edit Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_edit_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the title of the 'Edit Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_one\")\n    self.assert_util(\n        input_page.entity1.title.container.get_attribute(\"textContent\").strip(),\n        \"Update Example Input One\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_fields_label_entity","title":"<code>test_example_input_one_fields_label_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies example input one field label</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_fields_label_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies example input one field label\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    self.assert_util(input_page.entity1.name.get_input_label, \"Name\")\n    self.assert_util(\n        input_page.entity1.example_checkbox.get_input_label, \"Example Checkbox\"\n    )\n    self.assert_util(\n        input_page.entity1.example_radio.get_input_label, \"Example Radio\"\n    )\n    self.assert_util(\n        input_page.entity1.single_select_group_test.get_input_label,\n        \"Single Select Group Test\",\n    )\n    self.assert_util(\n        input_page.entity1.multiple_select_test.get_input_label,\n        \"Multiple Select Test\",\n    )\n    self.assert_util(input_page.entity1.interval.get_input_label, \"Interval\")\n    self.assert_util(input_page.entity1.index.get_input_label, \"Index\")\n    self.assert_util(\n        input_page.entity1.example_account.get_input_label, \"Example Account\"\n    )\n    self.assert_util(input_page.entity1.object.get_input_label, \"Object\")\n    self.assert_util(\n        input_page.entity1.object_fields.get_input_label, \"Object Fields\"\n    )\n    self.assert_util(input_page.entity1.order_by.get_input_label, \"Order By\")\n    self.assert_util(\n        input_page.entity1.query_start_date.get_input_label, \"Query Start Date\"\n    )\n    self.assert_util(input_page.entity1.limit.get_input_label, \"Limit\")\n    self.assert_util(\n        input_page.entity1.text_area.get_input_label, \"Example Textarea Field\"\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_help_link","title":"<code>test_example_input_one_help_link(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies whether the help link redirects to the correct URL</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_help_link(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies whether the help link redirects to the correct URL\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    go_to_link = \"https://docs.splunk.com/Documentation\"\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n\n    assert (\n        input_page.entity1.help_link.internal_container.get_attribute(\"href\")\n        == go_to_link\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_help_text_entity","title":"<code>test_example_input_one_help_text_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies help text for the field name</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_help_text_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies help text for the field name\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(\n        input_page.entity1.name.get_help_text, \"A unique name for the data input.\"\n    )\n    self.assert_util(\n        input_page.entity1.example_checkbox.get_help_text,\n        \"This is an example checkbox for the input one entity\",\n    )\n    self.assert_util(\n        input_page.entity1.example_radio.get_help_text,\n        \"This is an example radio button for the input one entity\",\n    )\n    self.assert_util(\n        input_page.entity1.interval.get_help_text,\n        \"Time interval of the data input, in seconds.\",\n    )\n    self.assert_util(\n        input_page.entity1.object.get_help_text,\n        \"The name of the object to query for.\",\n    )\n    self.assert_util(\n        input_page.entity1.object_fields.get_help_text,\n        \"Object fields from which to collect data. Delimit multiple fields using a comma.\",\n    )\n    self.assert_util(\n        input_page.entity1.query_start_date.get_help_text,\n        \"The datetime after which to query and index records, \"\n        'in this format: \"YYYY-MM-DDThh:mm:ss.000z\". Defaults to 90 days '\n        \"earlier from now.\",\n    )\n    self.assert_util(\n        input_page.entity1.limit.get_help_text,\n        \"The maximum number of results returned by the query.\",\n    )\n    self.assert_util(\n        input_page.entity1.order_by.get_help_text,\n        \"The datetime field by which to query results in ascending order for indexing.\",\n    )\n    self.assert_util(input_page.entity1.text_area.get_help_text, \"Help message\")\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_list_multiple_select_test","title":"<code>test_example_input_one_list_multiple_select_test(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies values of Multiple Select Test dropdown in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_list_multiple_select_test(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies values of Multiple Select Test dropdown in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.multiple_select_test.deselect_all()\n    multiple_select_test = [\"A\", \"B\"]\n    self.assert_util(\n        input_page.entity1.multiple_select_test.list_of_values(),\n        multiple_select_test,\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_list_single_select_group_test","title":"<code>test_example_input_one_list_single_select_group_test(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies values Single Select Group Test dropdown in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_list_single_select_group_test(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies values Single Select Group Test dropdown in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    single_select_group_test_list = [\"One\", \"Two\", \"Three\", \"Four\"]\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(\n        input_page.entity1.single_select_group_test.list_of_values(),\n        single_select_group_test_list,\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_required_field_example_account","title":"<code>test_example_input_one_required_field_example_account(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field Example Account in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_required_field_example_account(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field Example Account in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"dummy_input\")\n    input_page.entity1.example_radio.select(\"Yes\")\n    input_page.entity1.single_select_group_test.select(\"Two\")\n    input_page.entity1.interval.set_value(\"90\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Field Example Account is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_required_field_index","title":"<code>test_example_input_one_required_field_index(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field index in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_required_field_index(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field index in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"dummy_input\")\n    input_page.entity1.example_radio.select(\"Yes\")\n    input_page.entity1.single_select_group_test.select(\"Two\")\n    input_page.entity1.interval.set_value(\"90\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    input_page.entity1.index.cancel_selected_value()\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Field Index is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_required_field_interval","title":"<code>test_example_input_one_required_field_interval(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field interval in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_required_field_interval(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field interval in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"dummy_input\")\n    input_page.entity1.example_radio.select(\"Yes\")\n    input_page.entity1.single_select_group_test.select(\"Two\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Field Interval is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_required_field_name","title":"<code>test_example_input_one_required_field_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field name in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_required_field_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field name in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_radio.select(\"Yes\")\n    input_page.entity1.single_select_group_test.select(\"two\")\n    input_page.entity1.interval.set_value(\"90\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Field Name is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_required_field_object","title":"<code>test_example_input_one_required_field_object(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field Object in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_required_field_object(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field Object in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"dummy_input\")\n    input_page.entity1.example_radio.select(\"Yes\")\n    input_page.entity1.single_select_group_test.select(\"Two\")\n    input_page.entity1.interval.set_value(\"90\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Field Object is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_required_field_object_fields","title":"<code>test_example_input_one_required_field_object_fields(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field Object Fields in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_required_field_object_fields(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field Object Fields in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"dummy_input\")\n    input_page.entity1.example_radio.select(\"Yes\")\n    input_page.entity1.single_select_group_test.select(\"Two\")\n    input_page.entity1.interval.set_value(\"90\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Field Object Fields is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_required_field_order_by","title":"<code>test_example_input_one_required_field_order_by(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field Order By in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_required_field_order_by(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field Order By in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"dummy_input\")\n    input_page.entity1.example_radio.select(\"Yes\")\n    input_page.entity1.interval.set_value(\"90\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.single_select_group_test.select(\"Two\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    input_page.entity1.order_by.set_value(\"\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Field Order By is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_required_field_textarea","title":"<code>test_example_input_one_required_field_textarea(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field textarea in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_required_field_textarea(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field textarea in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"dummy_input\")\n    input_page.entity1.example_radio.select(\"Yes\")\n    input_page.entity1.single_select_group_test.select(\"Two\")\n    input_page.entity1.interval.set_value(\"90\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity1.text_area.set_value(\"\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Field Example Textarea Field is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_search_value_multiple_select_test","title":"<code>test_example_input_one_search_value_multiple_select_test(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies multiple select search functionality properly</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_search_value_multiple_select_test(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies multiple select search functionality properly\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.multiple_select_test.deselect_all()\n    self.assert_util(\n        input_page.entity1.multiple_select_test.search_get_list,\n        [\"A\"],\n        left_args={\"value\": \"A\"},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_search_value_single_select_group_test","title":"<code>test_example_input_one_search_value_single_select_group_test(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies singleSelect search functionality</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_search_value_single_select_group_test(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies singleSelect search functionality\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    self.assert_util(\n        input_page.entity1.single_select_group_test.search_get_list,\n        [\"one\", \"One\"],\n        left_args={\"value\": \"one\"},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_select_multiple_values_multiple_select_test","title":"<code>test_example_input_one_select_multiple_values_multiple_select_test(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies selected multiple values of Multiple Select Test dropdown in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_select_multiple_values_multiple_select_test(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies selected multiple values of Multiple Select Test dropdown in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    selected_values = [\"A\", \"B\"]\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.multiple_select_test.deselect_all()\n    for each in selected_values:\n        input_page.entity1.multiple_select_test.select(each)\n    self.assert_util(\n        input_page.entity1.multiple_select_test.get_values, selected_values\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_select_value_example_radio","title":"<code>test_example_input_one_select_value_example_radio(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies selected value of example radio in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_select_value_example_radio(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies selected value of example radio in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_radio.select(\"No\")\n    self.assert_util(input_page.entity1.example_radio.get_value, \"No\")\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_select_value_multiple_select_test","title":"<code>test_example_input_one_select_value_multiple_select_test(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies selected single value of Multiple Select Test dropdown in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_select_value_multiple_select_test(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies selected single value of Multiple Select Test dropdown in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    selected_value = [\"A\"]\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.multiple_select_test.deselect_all()\n    for each in selected_value:\n        input_page.entity1.multiple_select_test.select(each)\n    self.assert_util(\n        input_page.entity1.multiple_select_test.get_values, selected_value\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_select_value_single_select_group_test","title":"<code>test_example_input_one_select_value_single_select_group_test(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies selected value of Single Select Group Test dropdown in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_select_value_single_select_group_test(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies selected value of Single Select Group Test dropdown in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    selected_value = \"Two\"\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.single_select_group_test.select(selected_value)\n    self.assert_util(\n        input_page.entity1.single_select_group_test.get_value, selected_value\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_unchecked_example_checkbox","title":"<code>test_example_input_one_unchecked_example_checkbox(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies Uncheck in example checkbox in example input one</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_unchecked_example_checkbox(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies Uncheck in example checkbox in example input one\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_checkbox.check()\n    self.assert_util(input_page.entity1.example_checkbox.uncheck, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_valid_input_interval","title":"<code>test_example_input_one_valid_input_interval(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies whether adding non numeric values, interval field displays validation error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_valid_input_interval(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies whether adding non numeric values, interval field displays validation error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.name.set_value(\"test_name\")\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.interval.set_value(\"abc\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Interval must be either a non-negative number, CRON interval or -1.\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_valid_input_name","title":"<code>test_example_input_one_valid_input_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies whether adding special characters, name field displays validation error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_valid_input_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies whether adding special characters, name field displays validation error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"$$test_name\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_valid_input_query_start_date","title":"<code>test_example_input_one_valid_input_query_start_date(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies whether adding wrong format, Query Start Date field displays validation error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_valid_input_query_start_date(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies whether adding wrong format, Query Start Date field displays validation error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.name.set_value(\"test_name\")\n    input_page.entity1.interval.set_value(\"120\")\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.object_fields.set_value(\"test_object_field\")\n    input_page.entity1.query_start_date.set_value(\"2020/01/01\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Invalid date and time format\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_one_valid_length_name","title":"<code>test_example_input_one_valid_length_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the name field should not be more than 100 characters</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_one_valid_length_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the name field should not be more than 100 characters\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    name_value = \"a\" * 101\n    input_page.entity1.name.set_value(name_value)\n    self.assert_util(\n        input_page.entity1.save,\n        r\"Length of input name should be between 1 and 100\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_add_cancel_entity","title":"<code>test_example_input_two_add_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies cancel functionality at time of add</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_add_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies cancel functionality at time of add\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(input_page.entity2.cancel, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_add_close_entity","title":"<code>test_example_input_two_add_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies close functionality at time of add</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_add_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies close functionality at time of add\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(input_page.entity2.close, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_add_duplicate_names","title":"<code>test_example_input_two_add_duplicate_names(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies by saving an entity with duplicate name it displays and error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_add_duplicate_names(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies by saving an entity with duplicate name it displays and error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_name = \"dummy_input_two\"\n    input_page.entity2.name.set_value(input_name)\n    self.assert_util(\n        input_page.entity2.save,\n        f\"Name {input_name} is already in use\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_add_frontend_backend_validation","title":"<code>test_example_input_two_add_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the frontend and backend after adding an Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.sanity_test\ndef test_example_input_two_add_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the frontend and backend after adding an Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"dummy_input\")\n    input_page.entity2.example_checkbox.check()\n    input_page.entity2.example_radio.select(\"No\")\n    input_page.entity2.example_multiple_select.select(\"Option One\")\n    input_page.entity2.example_multiple_select.select(\"Option Two\")\n    input_page.entity2.index.select(\"main\")\n    input_page.entity2.interval.set_value(\"90\")\n    input_page.entity2.example_account.select(\"test_input\")\n    input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    self.assert_util(input_page.entity2.save, True)\n    input_page.table.wait_for_rows_to_appear(1)\n    self.assert_util(\n        input_page.table.get_table()[\"dummy_input\"],\n        {\n            \"name\": \"dummy_input\",\n            \"account\": \"test_input\",\n            \"interval\": \"90\",\n            \"index\": \"main\",\n            \"input type\": \"Example Input Two\",\n            \"input service\": \"example_input_two\",\n            \"status\": \"Active\",\n            \"actions\": \"Edit | Clone | Search | Delete\",\n        },\n    )\n    value_to_test = {\n        \"account\": \"test_input\",\n        \"index\": \"main\",\n        \"input_two_checkbox\": \"1\",\n        \"input_two_radio\": \"0\",\n        \"interval\": \"90\",\n        \"input_two_multiple_select\": \"one,two\",\n        \"start_date\": \"2020-12-11T20:00:32.000z\",\n        \"disabled\": 0,\n    }\n    backend_stanza = input_page.backend_conf.get_stanza(\n        \"example_input_two://dummy_input\"\n    )\n    for each_key, each_value in value_to_test.items():\n        self.assert_util(each_key, backend_stanza, operator=\"in\")\n        self.assert_util(each_value, backend_stanza[each_key])\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_add_valid_title","title":"<code>test_example_input_two_add_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the title of the \u2018Add Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_add_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the title of the 'Add Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(\n        input_page.entity2.title.container.get_attribute(\"textContent\").strip(),\n        \"Add Example Input Two\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_checked_example_checkbox","title":"<code>test_example_input_two_checked_example_checkbox(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies Check in example checkbox in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_checked_example_checkbox(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies Check in example checkbox in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(input_page.entity2.example_checkbox.check, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_clone_cancel_entity","title":"<code>test_example_input_two_clone_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies cancel functionality at time of clone</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_clone_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies cancel functionality at time of clone\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_two\")\n    self.assert_util(input_page.entity2.cancel, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_clone_close_entity","title":"<code>test_example_input_two_clone_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies close functionality at time of clone</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_clone_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies close functionality at time of clone\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_two\")\n    self.assert_util(input_page.entity2.close, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_clone_default_values","title":"<code>test_example_input_two_clone_default_values(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies the frontend default fields at time of clone for Example Input Two entity</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_clone_default_values(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies the frontend default fields at time of clone for Example Input Two entity\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(input_page.entity2.name.get_value, \"\")\n    self.assert_util(input_page.entity2.example_checkbox.is_checked, True)\n    self.assert_util(input_page.entity2.example_radio.get_value, \"No\")\n    self.assert_util(\n        input_page.entity2.example_multiple_select.get_values,\n        [\"Option One\", \"Option Two\"],\n    )\n    self.assert_util(input_page.entity2.interval.get_value, \"100\")\n    self.assert_util(input_page.entity2.index.get_value, \"main\")\n    self.assert_util(input_page.entity2.example_account.get_value, \"test_input\")\n    self.assert_util(\n        input_page.entity2.query_start_date.get_value, \"2016-10-10T12:10:15.000z\"\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_clone_duplicate_names","title":"<code>test_example_input_two_clone_duplicate_names(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies by saving an entity with duplicate name at time of clone it displays and error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_clone_duplicate_names(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies by saving an entity with duplicate name at time of clone it displays and error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_name = \"dummy_input_two\"\n    input_page.entity2.name.set_value(input_name)\n    self.assert_util(\n        input_page.entity2.save,\n        f\"Name {input_name} is already in use\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_clone_frontend_backend_validation","title":"<code>test_example_input_two_clone_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies the frontend and backend clone functionality of the Example Input Two entity</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.sanity_test\ndef test_example_input_two_clone_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies the frontend and backend clone functionality of the Example Input Two entity\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.wait_for_rows_to_appear(1)\n    input_page.table.clone_row(\"dummy_input_two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"dummy_input_two_Clone_Test\")\n    input_page.entity2.interval.set_value(\"180\")\n    self.assert_util(input_page.entity2.save, True)\n    input_page.table.wait_for_rows_to_appear(2)\n    self.assert_util(\n        input_page.table.get_table()[\"dummy_input_two_Clone_Test\"],\n        {\n            \"name\": \"dummy_input_two_Clone_Test\",\n            \"account\": \"test_input\",\n            \"interval\": \"180\",\n            \"input type\": \"Example Input Two\",\n            \"input service\": \"example_input_two\",\n            \"index\": \"main\",\n            \"status\": \"Active\",\n            \"actions\": \"Edit | Clone | Search | Delete\",\n        },\n    )\n    value_to_test = {\n        \"account\": \"test_input\",\n        \"input_two_checkbox\": \"1\",\n        \"input_two_radio\": \"0\",\n        \"interval\": \"180\",\n        \"index\": \"main\",\n        \"input_two_multiple_select\": \"one,two\",\n        \"start_date\": \"2016-10-10T12:10:15.000z\",\n        \"disabled\": 0,\n    }\n    backend_stanza = input_page.backend_conf.get_stanza(\n        \"example_input_two://dummy_input_two_Clone_Test\"\n    )\n    for each_key, each_value in value_to_test.items():\n        self.assert_util(each_key, backend_stanza, operator=\"in\")\n        self.assert_util(each_value, backend_stanza[each_key])\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_clone_valid_input_name","title":"<code>test_example_input_two_clone_valid_input_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies whether adding special characters, name field displays validation error while cloning a row</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_clone_valid_input_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies whether adding special characters, name field displays validation error while cloning a row\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"$$test_name_two\")\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_clone_valid_title","title":"<code>test_example_input_two_clone_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies the title of the \u2018Clone Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_clone_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies the title of the 'Clone Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.clone_row(\"dummy_input_two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(\n        input_page.entity2.title.container.get_attribute(\"textContent\").strip(),\n        \"Clone Example Input Two\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_default_value_index","title":"<code>test_example_input_two_default_value_index(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of field index in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_default_value_index(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of field index in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    default_index = \"default\"\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(input_page.entity2.index.get_value, default_index)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_delete_cancel_entity","title":"<code>test_example_input_two_delete_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies cancel functionality at time of delete</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_delete_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies cancel functionality at time of delete\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        input_page.table.delete_row,\n        True,\n        left_args={\"name\": \"dummy_input_two\", \"cancel\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_delete_close_entity","title":"<code>test_example_input_two_delete_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies close functionality at time of delete</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_delete_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies close functionality at time of delete\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        input_page.table.delete_row,\n        True,\n        left_args={\"name\": \"dummy_input_two\", \"close\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_delete_row_frontend_backend_validation","title":"<code>test_example_input_two_delete_row_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies the frontend and backend delete functionality</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.sanity_test\ndef test_example_input_two_delete_row_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies the frontend and backend delete functionality\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.input_status_toggle(\"dummy_input_two\", enable=False)\n    input_page.table.delete_row(\"dummy_input_two\")\n    input_page.table.wait_for_rows_to_appear(0)\n    self.assert_util(\"dummy_input_two\", input_page.table.get_table, \"not in\")\n    self.assert_util(\n        \"example_input_two://dummy_input_two\",\n        input_page.backend_conf.get_all_stanzas().keys(),\n        \"not in\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_delete_valid_prompt_message","title":"<code>test_example_input_two_delete_valid_prompt_message(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies the prompt message of the \u2018Delete Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_delete_valid_prompt_message(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies the prompt message of the 'Delete Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_name = \"dummy_input_two\"\n    prompt_message = input_page.table.delete_row(\"dummy_input_two\", prompt_msg=True)\n    self.assert_util(\n        prompt_message, f'Are you sure you want to delete \"{input_name}\" ?'\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_delete_valid_title","title":"<code>test_example_input_two_delete_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies the title of the \u2018Delete Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_delete_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies the title of the 'Delete Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.delete_row(\"dummy_input_two\", prompt_msg=True)\n    self.assert_util(\n        input_page.entity2.title.container.get_attribute(\"textContent\").strip(),\n        \"Delete Confirmation\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_edit_cancel_entity","title":"<code>test_example_input_two_edit_cancel_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies cancel functionality at time of edit</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_edit_cancel_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies cancel functionality at time of edit\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_two\")\n    self.assert_util(input_page.entity2.cancel, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_edit_close_entity","title":"<code>test_example_input_two_edit_close_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies close functionality at time of edit</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_edit_close_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies close functionality at time of edit\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_two\")\n    self.assert_util(input_page.entity2.close, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_edit_frontend_backend_validation","title":"<code>test_example_input_two_edit_frontend_backend_validation(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies the frontend and backend edit functionality of the Example Input Two entity</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.sanity_test\ndef test_example_input_two_edit_frontend_backend_validation(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies the frontend and backend edit functionality of the Example Input Two entity\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.example_checkbox.uncheck()\n    input_page.entity2.example_radio.select(\"Yes\")\n    input_page.entity2.example_account.select(\"test_input\")\n    input_page.entity2.example_multiple_select.deselect(\"Option One\")\n    input_page.entity2.interval.set_value(\"3600\")\n    input_page.entity2.query_start_date.set_value(\"2020-20-20T20:20:20.000z\")\n    self.assert_util(input_page.entity2.save, True)\n    input_page.table.wait_for_rows_to_appear(1)\n    self.assert_util(\n        input_page.table.get_table()[\"dummy_input_two\"],\n        {\n            \"name\": \"dummy_input_two\",\n            \"account\": \"test_input\",\n            \"interval\": \"3600\",\n            \"input type\": \"Example Input Two\",\n            \"input service\": \"example_input_two\",\n            \"index\": \"main\",\n            \"status\": \"Active\",\n            \"actions\": \"Edit | Clone | Search | Delete\",\n        },\n    )\n    value_to_test = {\n        \"account\": \"test_input\",\n        \"input_two_checkbox\": \"0\",\n        \"input_two_radio\": \"1\",\n        \"interval\": \"3600\",\n        \"index\": \"main\",\n        \"input_two_multiple_select\": \"two\",\n        \"start_date\": \"2020-20-20T20:20:20.000z\",\n        \"disabled\": 0,\n    }\n    backend_stanza = input_page.backend_conf.get_stanza(\n        \"example_input_two://dummy_input_two\"\n    )\n    for each_key, each_value in value_to_test.items():\n        self.assert_util(each_key, backend_stanza, operator=\"in\")\n        self.assert_util(each_value, backend_stanza[each_key])\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_edit_uneditable_field_name","title":"<code>test_example_input_two_edit_uneditable_field_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies the frontend uneditable fields at time of edit of the Example Input Two entity</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_edit_uneditable_field_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies the frontend uneditable fields at time of edit of the Example Input Two entity\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(input_page.entity2.name.is_editable, False)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_edit_valid_title","title":"<code>test_example_input_two_edit_valid_title(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two)</code>","text":"<p>Verifies the title of the \u2018Edit Entity\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_edit_valid_title(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_two\n):\n    \"\"\"Verifies the title of the 'Edit Entity'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(\n        input_page.entity2.title.container.get_attribute(\"textContent\").strip(),\n        \"Update Example Input Two\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_fields_label_entity","title":"<code>test_example_input_two_fields_label_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies example input two field label</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_fields_label_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies example input two field label\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    self.assert_util(input_page.entity2.name.get_input_label, \"Name\")\n    self.assert_util(input_page.entity2.interval.get_input_label, \"Interval\")\n    self.assert_util(input_page.entity2.index.get_input_label, \"Index\")\n    self.assert_util(\n        input_page.entity2.example_account.get_input_label, \"Example Account\"\n    )\n    self.assert_util(\n        input_page.entity2.example_multiple_select.get_input_label,\n        \"Example Multiple Select\",\n    )\n    self.assert_util(\n        input_page.entity2.example_checkbox.get_input_label, \"Example Checkbox\"\n    )\n    self.assert_util(\n        input_page.entity2.example_radio.get_input_label, \"Example Radio\"\n    )\n    self.assert_util(\n        input_page.entity2.query_start_date.get_input_label, \"Query Start Date\"\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_help_text_entity","title":"<code>test_example_input_two_help_text_entity(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies help text for the field name</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_help_text_entity(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies help text for the field name\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    self.assert_util(\n        input_page.entity2.example_multiple_select.get_help_text,\n        \"This is an example multipleSelect for input two entity\",\n    )\n    self.assert_util(\n        input_page.entity2.name.get_help_text, \"A unique name for the data input.\"\n    )\n    self.assert_util(\n        input_page.entity2.interval.get_help_text,\n        \"Time interval of the data input, in seconds.\",\n    )\n    self.assert_util(\n        input_page.entity2.example_checkbox.get_help_text,\n        \"This is an example checkbox for the input two entity\",\n    )\n    self.assert_util(\n        input_page.entity2.example_radio.get_help_text,\n        \"This is an example radio button for the input two entity\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_list_example_multiple_select","title":"<code>test_example_input_two_list_example_multiple_select(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies values of Multiple Select Test dropdown in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_list_example_multiple_select(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies values of Multiple Select Test dropdown in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    example_multiple_select_list = [\"Option One\", \"Option Two\"]\n    self.assert_util(\n        input_page.entity2.example_multiple_select.list_of_values(),\n        example_multiple_select_list,\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_required_field_example_example_account","title":"<code>test_example_input_two_required_field_example_example_account(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field Account in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_required_field_example_example_account(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field Account in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"dummy_input\")\n    input_page.entity2.example_checkbox.check()\n    input_page.entity2.example_radio.select(\"No\")\n    input_page.entity2.example_multiple_select.select(\"Option One\")\n    input_page.entity2.index.select(\"main\")\n    input_page.entity2.interval.set_value(\"90\")\n    input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Field Example Account is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_required_field_example_multiple_select","title":"<code>test_example_input_two_required_field_example_multiple_select(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field Example Multiple Select in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_required_field_example_multiple_select(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field Example Multiple Select in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"dummy_input\")\n    input_page.entity2.example_checkbox.check()\n    input_page.entity2.example_radio.select(\"No\")\n    input_page.entity2.index.select(\"main\")\n    input_page.entity2.interval.set_value(\"90\")\n    input_page.entity2.example_account.select(\"test_input\")\n    input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Field Example Multiple Select is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_required_field_example_radio","title":"<code>test_example_input_two_required_field_example_radio(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of example radio in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_required_field_example_radio(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of example radio in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"dummy_input\")\n    input_page.entity2.example_checkbox.check()\n    input_page.entity2.example_multiple_select.select(\"Option One\")\n    input_page.entity2.index.select(\"main\")\n    input_page.entity2.interval.set_value(\"90\")\n    input_page.entity2.example_account.select(\"test_input\")\n    input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Field Example Radio is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_required_field_index","title":"<code>test_example_input_two_required_field_index(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field index in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_required_field_index(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field index in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"dummy_input\")\n    input_page.entity2.example_checkbox.check()\n    input_page.entity2.example_account.select(\"test_input\")\n    input_page.entity2.example_radio.select(\"No\")\n    input_page.entity2.example_multiple_select.select(\"Option One\")\n    input_page.entity2.interval.set_value(\"90\")\n    input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    input_page.entity2.index.cancel_selected_value()\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Field Index is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_required_field_interval","title":"<code>test_example_input_two_required_field_interval(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field interval in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_required_field_interval(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field interval in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"dummy_input\")\n    input_page.entity2.example_checkbox.check()\n    input_page.entity2.example_radio.select(\"No\")\n    input_page.entity2.example_multiple_select.select(\"Option One\")\n    input_page.entity2.index.select(\"main\")\n    input_page.entity2.example_account.select(\"test_input\")\n    input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Field Interval is required\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_required_field_name","title":"<code>test_example_input_two_required_field_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies required field name in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_required_field_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies required field name in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.example_checkbox.check()\n    input_page.entity2.example_radio.select(\"No\")\n    input_page.entity2.example_multiple_select.select(\"Option One\")\n    input_page.entity2.index.select(\"main\")\n    input_page.entity2.interval.set_value(\"90\")\n    input_page.entity2.example_account.select(\"test_input\")\n    input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Field Name is required\",\n        left_args={\"expect_error\": True},\n    )\n    input_page.entity2.name.set_value(\"test_name_two\")\n    self.assert_util(input_page.entity2.is_error_closed, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_select_multiple_values_example_multiple_select","title":"<code>test_example_input_two_select_multiple_values_example_multiple_select(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies selected multiple values of Multiple Select Test dropdown in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_select_multiple_values_example_multiple_select(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies selected multiple values of Multiple Select Test dropdown in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    selected_values = [\"Option One\", \"Option Two\"]\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.index.select(\"main\")\n    for each in selected_values:\n        input_page.entity2.example_multiple_select.select(each)\n    self.assert_util(\n        input_page.entity2.example_multiple_select.get_values, selected_values\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_select_select_value_example_multiple_select","title":"<code>test_example_input_two_select_select_value_example_multiple_select(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies selected single value of Multiple Select Test dropdown in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_select_select_value_example_multiple_select(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies selected single value of Multiple Select Test dropdown in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    selected_value = [\"Option One\"]\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.index.select(\"main\")\n    for each in selected_value:\n        input_page.entity2.example_multiple_select.select(each)\n    self.assert_util(\n        input_page.entity2.example_multiple_select.get_values, selected_value\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_select_value_example_radio","title":"<code>test_example_input_two_select_value_example_radio(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies default value of example radio in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_select_value_example_radio(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies default value of example radio in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.example_radio.select(\"No\")\n    self.assert_util(input_page.entity2.example_radio.get_value, \"No\")\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_unchecked_example_checkbox","title":"<code>test_example_input_two_unchecked_example_checkbox(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies Uncheck in example checkbox in Example Input Two</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_unchecked_example_checkbox(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies Uncheck in example checkbox in Example Input Two\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.example_checkbox.check()\n    self.assert_util(input_page.entity2.example_checkbox.uncheck, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_valid_input_interval","title":"<code>test_example_input_two_valid_input_interval(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies whether adding non numeric values, interval field displays validation error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_valid_input_interval(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies whether adding non numeric values, interval field displays validation error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"test_name_two\")\n    input_page.entity2.interval.set_value(\"abc\")\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Interval must be either a non-negative number, CRON interval or -1.\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_valid_input_name","title":"<code>test_example_input_two_valid_input_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies whether adding special characters, name field displays validation error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_valid_input_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies whether adding special characters, name field displays validation error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"$$test_name_two\")\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_valid_input_query_start_date","title":"<code>test_example_input_two_valid_input_query_start_date(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies whether adding wrong format, Query Start Date field displays validation error</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_valid_input_query_start_date(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies whether adding wrong format, Query Start Date field displays validation error\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    input_page.entity2.name.set_value(\"test_name_two\")\n    input_page.entity2.interval.set_value(\"120\")\n    input_page.entity2.example_account.select(\"test_input\")\n    input_page.entity2.example_multiple_select.select(\"Option One\")\n    input_page.entity2.example_radio.select(\"Yes\")\n    input_page.entity2.query_start_date.set_value(\"2020/01/01\")\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Invalid date and time format\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_two_valid_length_name","title":"<code>test_example_input_two_valid_length_name(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the name field should not be more than 100 characters</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_two_valid_length_name(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the name field should not be more than 100 characters\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n    name_value = \"a\" * 101\n    input_page.entity2.name.set_value(name_value)\n    self.assert_util(\n        input_page.entity2.save,\n        r\"Length of input name should be between 1 and 100\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_with_complex_validation_too_short","title":"<code>test_example_input_with_complex_validation_too_short(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies correct errors when validation fails due to length</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_with_complex_validation_too_short(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies correct errors when validation fails due to length\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Group One\")\n    input_page.create_new_input.select(\"Service 1 Inside Menu\")\n\n    input_page.entity3.name.set_value(\"dummy_input_name_complex_validators\")\n    input_page.entity3.interval.set_value(\"900\")\n    input_page.entity3.text_with_validators.set_value(\"1\")\n\n    self.assert_util(\n        input_page.entity3.save,\n        r\"Length of Query parameters should be between 2 and 8192\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_input_with_complex_validation_wrong_start","title":"<code>test_example_input_with_complex_validation_wrong_start(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies correct errors when validation fails due to wrong start text</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_input_with_complex_validation_wrong_start(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies correct errors when validation fails due to wrong start text\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Group One\")\n    input_page.create_new_input.select(\"Service 1 Inside Menu\")\n\n    input_page.entity3.name.set_value(\"dummy_input_name_complex_validators\")\n    input_page.entity3.interval.set_value(\"900\")\n    input_page.entity3.text_with_validators.set_value(\n        \"invalid as should start with $\"\n    )\n\n    self.assert_util(\n        input_page.entity3.save,\n        r\"Query parameters should start with '$'\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_inputs_same_name_different_service","title":"<code>test_example_inputs_same_name_different_service(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies that same name can not be used for different services</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_example_inputs_same_name_different_service(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n    _add_input_one,\n):\n    \"\"\"\n    Verifies that same name can not be used for different services\n    \"\"\"\n    existing_name_for_service_one = \"dummy_input_one\"\n\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.create_new_input.select(\"Example Input Two\")\n    input_page.entity2.example_account.wait_for_values()\n\n    input_page.entity2.name.set_value(existing_name_for_service_one)\n    input_page.entity2.example_checkbox.check()\n    input_page.entity2.example_radio.select(\"No\")\n    input_page.entity2.example_multiple_select.select(\"Option One\")\n    input_page.entity2.index.select(\"main\")\n    input_page.entity2.interval.set_value(\"90\")\n    input_page.entity2.example_account.select(\"test_input\")\n    input_page.entity2.query_start_date.set_value(\"2020-12-11T20:00:32.000z\")\n\n    input_page.entity2.save_btn.click()\n    self.assert_util(\n        input_page.entity1.save,\n        f\"Name {existing_name_for_service_one} is already in use\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_inputs_with_not_valid_interval","title":"<code>test_example_inputs_with_not_valid_interval(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, interval)</code>","text":"Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.parametrize(\n    \"interval\",\n    [\n        \"-2\",\n        \"0a 0,11 2 */2 *\",\n        \"a b * * *\",\n    ],\n)\ndef test_example_inputs_with_not_valid_interval(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, interval\n):\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    name = \"dummy_input\"\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.name.set_value(name)\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n\n    input_page.entity1.interval.set_value(interval)\n\n    self.assert_util(\n        input_page.entity2.save,\n        \"Interval must be either a non-negative number, CRON interval or -1.\",\n        left_args={\"expect_error\": True},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_example_inputs_with_valid_interval","title":"<code>test_example_inputs_with_valid_interval(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, interval)</code>","text":"Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\n@pytest.mark.parametrize(\n    \"interval\",\n    [\n        \"-1\",\n        \"1\",\n        \"0 0,11 2 */2 *\",\n        \"* * * * *\",\n    ],\n)\ndef test_example_inputs_with_valid_interval(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, interval\n):\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    # for input_pos, interval in enumerate(intervals, 1):\n    name = \"dummy_input\"\n    input_page.create_new_input.select(\"Example Input One\")\n    input_page.entity1.example_account.wait_for_values()\n    input_page.entity1.example_account.select(\"test_input\")\n    input_page.entity1.object.set_value(\"test_object\")\n    input_page.entity1.name.set_value(name)\n    input_page.entity1.object_fields.set_value(\"test_field\")\n    input_page.entity1.text_area.set_value(\"line1\\nline2\\nline3\\nline4\\nline5\")\n\n    input_page.entity1.interval.set_value(interval)\n\n    input_page.entity1.save_btn.click()\n    input_page.table.wait_for_rows_to_appear(1)\n\n    self.assert_util(\n        input_page.table.get_table()[name],\n        {\n            \"name\": name,\n            \"account\": \"test_input\",\n            \"interval\": interval,\n            \"input type\": \"Example Input One\",\n            \"input service\": \"example_input_one\",\n            \"index\": \"default\",\n            \"status\": \"Active\",\n            \"actions\": \"Edit | Clone | Search | Delete\",\n        },\n    )\n\n    backend_stanza = input_page.backend_conf.get_stanza(\n        f\"example_input_one://{name}\"\n    )\n    assert backend_stanza.get(\"interval\") == interval\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_count","title":"<code>test_inputs_count(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one, _add_input_two)</code>","text":"<p>Verifies count on table</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_count(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n    _add_input_one,\n    _add_input_two,\n):\n    \"\"\"Verifies count on table\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        input_page.table.get_count_title,\n        f\"{input_page.table.get_row_count()} Inputs\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_create_new_input_list_values","title":"<code>test_inputs_create_new_input_list_values(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies input list dropdown</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_create_new_input_list_values(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies input list dropdown\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    create_new_input_list = [\n        \"Example Input One\",\n        \"Example Input Two\",\n        \"Example Input Three\",\n        \"Example Input Four Creates disabled input\",\n        \"Service hidden for cloud\",\n        \"Service with conf param\",\n        \"Group One\",\n        \"Group Two\",\n    ]\n    self.assert_util(\n        input_page.create_new_input.get_inputs_list, create_new_input_list\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_default_rows_in_table","title":"<code>test_inputs_default_rows_in_table(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the default number of rows in the table</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_default_rows_in_table(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the default number of rows in the table\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(input_page.table.get_row_count, 0)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_disable_all_close","title":"<code>test_inputs_disable_all_close(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies that closing the \u2018Deactivate All\u2019 prompt behaves correctly.</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_disable_all_close(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"\n    Verifies that closing the 'Deactivate All' prompt behaves correctly.\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.disable_all_inputs()\n    self.assert_util(input_page.interact_all_prompt_entity.close, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_disable_all_deny","title":"<code>test_inputs_disable_all_deny(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies that when \u2018Deactivate All\u2019 is followed by \u2018Deny,\u2019 inputs remain enabled.</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_disable_all_deny(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"\n    Verifies that when 'Deactivate All' is followed by 'Deny,' inputs remain enabled.\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    inputs_enabled_table = input_page.table.get_table()\n    input_page.disable_all_inputs()\n    input_page.interact_all_prompt_entity.deny()\n    self.assert_util(input_page.table.get_table(), inputs_enabled_table)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_disable_all_enable_all_input_one_input_two","title":"<code>test_inputs_disable_all_enable_all_input_one_input_two(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one, _add_input_two)</code>","text":"<p>Verifies that various types of inputs are correctly disabled and enabled when using the \u2018Deactivate All\u2019 and \u2018Activate All\u2019 buttons. This test covers scenarios with both Input One and Input Two added.</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_disable_all_enable_all_input_one_input_two(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n    _add_input_one,\n    _add_input_two,\n):\n    \"\"\"\n    Verifies that various types of inputs are correctly disabled and enabled\n    when using the 'Deactivate All' and 'Activate All' buttons.\n    This test covers scenarios with both Input One and Input Two added.\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    inputs_enabled_table = input_page.table.get_table()\n    inputs_disabled_table = copy.deepcopy(inputs_enabled_table)\n    for i in inputs_disabled_table:\n        inputs_disabled_table[i][\"status\"] = \"Inactive\"\n    input_page.disable_all_inputs()\n    input_page.interact_all_prompt_entity.confirm()\n    time.sleep(1)\n    self.assert_util(input_page.table.get_table(), inputs_disabled_table)\n    input_page.enable_all_inputs()\n    input_page.interact_all_prompt_entity.confirm()\n    time.sleep(1)\n    self.assert_util(input_page.table.get_table(), inputs_enabled_table)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_disable_all_some_already_disabled","title":"<code>test_inputs_disable_all_some_already_disabled(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one, _add_input_two)</code>","text":"<p>Verifies that all inputs are disabled correctly. This test covers scenario where one input is already disabled.</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_disable_all_some_already_disabled(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n    _add_input_one,\n    _add_input_two,\n):\n    \"\"\"\n    Verifies that all inputs are disabled correctly.\n    This test covers scenario where one input is already disabled.\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    inputs_enabled_table = input_page.table.get_table()\n    inputs_disabled_table = copy.deepcopy(inputs_enabled_table)\n    for i in inputs_disabled_table:\n        inputs_disabled_table[i][\"status\"] = \"Inactive\"\n    self.assert_util(\n        input_page.table.input_status_toggle,\n        True,\n        left_args={\"name\": \"dummy_input_one\", \"enable\": False},\n    )\n    input_page.disable_all_inputs()\n    input_page.interact_all_prompt_entity.confirm()\n    time.sleep(1)\n    self.assert_util(input_page.table.get_table(), inputs_disabled_table)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_disable_all_title_message","title":"<code>test_inputs_disable_all_title_message(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies title and message of disable all prompt</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_disable_all_title_message(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies title and message of disable all prompt\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.disable_all_inputs()\n    self.assert_util(\n        input_page.interact_all_prompt_entity.prompt_title.container.get_attribute(\n            \"textContent\"\n        ).strip(),\n        \"Deactivate all\",\n    )\n    self.assert_util(\n        input_page.interact_all_prompt_entity.prompt_message.container.get_attribute(\n            \"textContent\"\n        ).strip(),\n        \"Do you want to deactivate all? It may take a while.\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_disable_enable_all","title":"<code>test_inputs_disable_enable_all(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_inputs)</code>","text":"<p>Verifies that all inputs are disabled after clicking \u2018Deactivate all\u2019</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_disable_enable_all(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_inputs\n):\n    \"\"\"Verifies that all inputs are disabled after clicking 'Deactivate all'\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    inputs_enabled_table = input_page.table.get_table()\n    inputs_disabled_table = copy.deepcopy(inputs_enabled_table)\n    for i in inputs_disabled_table:\n        inputs_disabled_table[i][\"status\"] = \"Inactive\"\n    input_page.disable_all_inputs()\n    input_page.interact_all_prompt_entity.confirm()\n    time.sleep(10)\n    self.assert_util(input_page.table.get_table(), inputs_disabled_table)\n    input_page.enable_all_inputs()\n    input_page.interact_all_prompt_entity.confirm()\n    time.sleep(10)\n    self.assert_util(input_page.table.get_table(), inputs_enabled_table)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_displayed_columns","title":"<code>test_inputs_displayed_columns(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies headers of input table</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_displayed_columns(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies headers of input table\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    header_list = [\n        \"Name\",\n        \"Account\",\n        \"Interval\",\n        \"Input Type\",\n        \"Input Service\",\n        \"Index\",\n        \"Status\",\n        \"Actions\",\n    ]\n    self.assert_util(input_page.table.get_headers, header_list)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_enable_all_close","title":"<code>test_inputs_enable_all_close(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies that closing the \u2018Activate All\u2019 prompt behaves correctly.</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_enable_all_close(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"\n    Verifies that closing the 'Activate All' prompt behaves correctly.\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.enable_all_inputs()\n    self.assert_util(input_page.interact_all_prompt_entity.close, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_enable_all_deny","title":"<code>test_inputs_enable_all_deny(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies that when \u2018Activate All\u2019 is followed by \u2018Deny,\u2019 inputs remain disabled.</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_enable_all_deny(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"\n    Verifies that when 'Activate All' is followed by 'Deny,' inputs remain disabled.\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    inputs_enabled_table = input_page.table.get_table()\n    inputs_disabled_table = copy.deepcopy(inputs_enabled_table)\n    for i in inputs_disabled_table:\n        inputs_disabled_table[i][\"status\"] = \"Inactive\"\n    input_page.disable_all_inputs()\n    input_page.interact_all_prompt_entity.confirm()\n    input_page.enable_all_inputs()\n    input_page.interact_all_prompt_entity.deny()\n    self.assert_util(input_page.table.get_table(), inputs_disabled_table)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_enable_all_some_already_enabled","title":"<code>test_inputs_enable_all_some_already_enabled(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one, _add_input_two)</code>","text":"<p>Verifies that all inputs are enabled correctly. This test covers scenario where one input is already enabled.</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_enable_all_some_already_enabled(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n    _add_input_one,\n    _add_input_two,\n):\n    \"\"\"\n    Verifies that all inputs are enabled correctly.\n    This test covers scenario where one input is already enabled.\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    inputs_enabled_table = input_page.table.get_table()\n    self.assert_util(\n        input_page.table.input_status_toggle,\n        True,\n        left_args={\"name\": \"dummy_input_one\", \"enable\": False},\n    )\n    input_page.enable_all_inputs()\n    time.sleep(1)\n    input_page.interact_all_prompt_entity.confirm()\n    self.assert_util(input_page.table.get_table(), inputs_enabled_table)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_enable_all_title_message","title":"<code>test_inputs_enable_all_title_message(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies title and message of enable all prompt</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_enable_all_title_message(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies title and message of enable all prompt\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.enable_all_inputs()\n    self.assert_util(\n        input_page.interact_all_prompt_entity.prompt_title.container.get_attribute(\n            \"textContent\"\n        ).strip(),\n        \"Activate all\",\n    )\n    self.assert_util(\n        input_page.interact_all_prompt_entity.prompt_message.container.get_attribute(\n            \"textContent\"\n        ).strip(),\n        \"Do you want to activate all? It may take a while.\",\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_enable_disable","title":"<code>test_inputs_enable_disable(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies enable and disable functionality of the input</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_enable_disable(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies enable and disable functionality of the input\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        input_page.table.input_status_toggle,\n        True,\n        left_args={\"name\": \"dummy_input_one\", \"enable\": False},\n    )\n    self.assert_util(\n        input_page.table.get_cell_value,\n        \"Inactive\",\n        left_args={\"name\": \"dummy_input_one\", \"column\": \"Status\"},\n    )\n    self.assert_util(\n        input_page.table.input_status_toggle,\n        True,\n        left_args={\"name\": \"dummy_input_one\", \"enable\": True},\n    )\n    self.assert_util(\n        input_page.table.get_cell_value,\n        \"Active\",\n        left_args={\"name\": \"dummy_input_one\", \"column\": \"Status\"},\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_filter_functionality_negative","title":"<code>test_inputs_filter_functionality_negative(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one, _add_input_two)</code>","text":"<p>Verifies the filter functionality (Negative)</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_filter_functionality_negative(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n    _add_input_one,\n    _add_input_two,\n):\n    \"\"\"Verifies the filter functionality (Negative)\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.set_filter(\"hello\")\n    self.assert_util(input_page.table.get_row_count, 0)\n    self.assert_util(\n        input_page.table.get_count_title,\n        f\"{input_page.table.get_row_count()} Input\",\n    )\n    input_page.table.clean_filter()\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_filter_functionality_positive","title":"<code>test_inputs_filter_functionality_positive(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one, _add_input_two)</code>","text":"<p>Verifies the filter functionality (Positive)</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_filter_functionality_positive(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n    _add_input_one,\n    _add_input_two,\n):\n    \"\"\"Verifies the filter functionality (Positive)\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.set_filter(\"dummy\")\n    self.assert_util(input_page.table.get_row_count, 2)\n    self.assert_util(\n        input_page.table.get_count_title,\n        f\"{input_page.table.get_row_count()} Inputs\",\n    )\n    input_page.table.clean_filter()\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_input_type_list_values","title":"<code>test_inputs_input_type_list_values(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one, _add_input_two)</code>","text":"<p>Verifies input type filter list</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_input_type_list_values(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n    _add_input_one,\n    _add_input_two,\n):\n    \"\"\"Verifies input type filter list\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    type_filter_list = [\n        \"All\",\n        \"Example Input One\",\n        \"Example Input Two\",\n        \"Example Input Three\",\n        \"Example Input Four\",\n        \"Service hidden for cloud\",\n        \"Service hidden for enterprise\",\n        \"Service with conf param\",\n        \"Service 1 Inside Menu\",\n        \"Service 2 Inside Menu\",\n        \"Service 3 Inside Menu - style Dialog\",\n        \"Service 4 Inside Menu - style page\",\n    ]\n    self.assert_util(input_page.type_filter.get_input_type_list, type_filter_list)\n    input_page.type_filter.select_input_type(\n        \"Example Input One\", open_dropdown=False\n    )\n    self.assert_util(input_page.table.get_row_count, 1)\n    input_page.type_filter.select_input_type(\"Example Input Two\")\n    self.assert_util(input_page.table.get_row_count, 1)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_more_info","title":"<code>test_inputs_more_info(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies the expand functionality of the inputs table</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_more_info(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"Verifies the expand functionality of the inputs table\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    interval = \"90\"\n    self.assert_util(\n        input_page.table.get_more_info,\n        {\n            \"Name\": \"dummy_input_one\",\n            \"Interval\": f\"{interval} sec\",\n            \"Index\": \"default\",\n            \"Status\": \"Active\",\n            \"Example Account\": \"test_input\",\n            \"Object\": \"test_object\",\n            \"Object Fields\": \"test_field\",\n            \"Order By\": \"LastModifiedDate\",\n            \"Query Start Date\": \"2020-12-11T20:00:32.000z\",\n            \"Limit\": \"1000\",\n        },\n        left_args={\"name\": \"dummy_input_one\"},\n    )\n    backend_stanza = input_page.backend_conf.get_stanza(\n        \"example_input_one://dummy_input_one\"\n    )\n    # we verify that the conf value is `interval` and only the UI has changed\n    assert backend_stanza.get(\"interval\") == interval\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_pagination","title":"<code>test_inputs_pagination(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_inputs)</code>","text":"<p>Verifies pagination functionality by creating 100 accounts</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_pagination(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_multiple_inputs\n):\n    \"\"\"Verifies pagination functionality by creating 100 accounts\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.open()\n    self.assert_util(\n        input_page.pagination.select_page_option,\n        True,\n        left_args={\"value\": \"50 Per Page\"},\n    )\n    self.assert_util(input_page.table.switch_to_page, True, left_args={\"value\": 2})\n    self.assert_util(input_page.table.switch_to_prev, True)\n    self.assert_util(input_page.table.switch_to_next, True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_pagination_list","title":"<code>test_inputs_pagination_list(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies pagination list</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_pagination_list(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies pagination list\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(\n        input_page.pagination.get_pagination_list,\n        [\"10 Per Page\", \"25 Per Page\", \"50 Per Page\"],\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_sort_functionality","title":"<code>test_inputs_sort_functionality(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one, _add_input_two)</code>","text":"<p>Verifies sorting functionality for name column</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_sort_functionality(\n    self,\n    ucc_smartx_selenium_helper,\n    ucc_smartx_rest_helper,\n    _add_input_one,\n    _add_input_two,\n):\n    \"\"\"Verifies sorting functionality for name column\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.pagination.select_page_option(\"50 Per Page\")\n    input_page.table.sort_column(\"Name\")\n    sort_order = input_page.table.get_sort_order()\n    column_values = list(input_page.table.get_column_values(\"Name\"))\n    column_values = list(str(item) for item in column_values)\n    sorted_values = sorted(column_values, key=str.lower)\n    self.assert_util(sort_order[\"header\"].lower(), \"name\")\n    self.assert_util(column_values, sorted_values)\n    self.assert_util(sort_order[\"ascending\"], True)\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_textarea_big_input","title":"<code>test_inputs_textarea_big_input(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies that textarea can handle big inputs</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_textarea_big_input(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"\n    Verifies that textarea can handle big inputs\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_one\")\n    big_input = \"\"\n    for i in range(1, 100):\n        big_input += f\"{str(i)}\\n\"\n    input_page.entity1.text_area.set_value(big_input)\n    self.assert_util(big_input, input_page.entity1.text_area.get_value())\n    self.assert_util(input_page.entity1.save, True)\n    input_page.table.edit_row(\"dummy_input_one\")\n    self.assert_util(big_input.strip(), input_page.entity1.text_area.get_value())\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_textarea_height","title":"<code>test_inputs_textarea_height(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies that textarea height values.</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_textarea_height(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"\n    Verifies that textarea height values.\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_one\")\n    # get_textarea_height() return 60\n    min_textarea_height = 65\n    max_textarea_height = 305\n    tolerance = 5\n    long_input = \"\"\n    self.assert_util(\n        min_textarea_height - tolerance\n        &lt;= input_page.entity1.text_area.get_textarea_height()\n        &lt;= min_textarea_height + tolerance,\n        True,\n    )\n\n    for i in range(1, 50):\n        long_input += f\"{str(i)}\\n\"\n    input_page.entity1.text_area.append_value(long_input)\n    self.assert_util(\n        max_textarea_height - tolerance\n        &lt;= input_page.entity1.text_area.get_textarea_height()\n        &lt;= max_textarea_height + tolerance,\n        True,\n    )\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_textarea_scroll","title":"<code>test_inputs_textarea_scroll(ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one)</code>","text":"<p>Verifies that textarea height values</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_textarea_scroll(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper, _add_input_one\n):\n    \"\"\"\n    Verifies that textarea height values\n    \"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    input_page.table.edit_row(\"dummy_input_one\")\n    long_input = \"\"\n    screnshot_before = input_page.entity1.text_area.screenshot()\n    for i in range(1, 50):\n        long_input += f\"{str(i)}\\n\"\n    input_page.entity1.text_area.append_value(long_input)\n    input_page.entity1.text_area.scroll(\"UP\", 40)\n    screenshot_after = input_page.entity1.text_area.screenshot()\n    self.assert_util(screnshot_before, screenshot_after, operator=\"!=\")\n</code></pre>"},{"location":"ui_tests_inputs_page/#tests.ui.test_input_page.TestInputPage.test_inputs_title_and_description","title":"<code>test_inputs_title_and_description(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)</code>","text":"<p>Verifies the title and description of the page</p> Source code in <code>tests/ui/test_input_page.py</code> <pre><code>@pytest.mark.execute_enterprise_cloud_true\n@pytest.mark.forwarder\n@pytest.mark.input\ndef test_inputs_title_and_description(\n    self, ucc_smartx_selenium_helper, ucc_smartx_rest_helper\n):\n    \"\"\"Verifies the title and description of the page\"\"\"\n    input_page = InputPage(ucc_smartx_selenium_helper, ucc_smartx_rest_helper)\n    self.assert_util(input_page.title.wait_to_display, \"Inputs\")\n    self.assert_util(\n        input_page.description.wait_to_display, \"Manage your data inputs\"\n    )\n</code></pre>"},{"location":"whats_new/","title":"What\u2019s New","text":""},{"location":"whats_new/#ucc-6","title":"UCC 6","text":"<p>This section describes the changes introduced in version 6.0.0 of addonfactory-ucc-generator. The main emphasis of this update is on eliminating outdated, deprecated, and discouraged features. These changes help streamline the codebase, improve maintainability, and ensure that only supported and recommended functionality remains available for developers.</p>"},{"location":"whats_new/#list-of-changes","title":"List of Changes","text":"<ul> <li>Dropped support for Python 3.7</li> <li>Removed support for the <code>.uccignore</code> feature</li> <li>Removed <code>--ui-source-map</code> option from the UI</li> <li>Removed custom menu component from the UI</li> <li>Removed AMD <code>require</code> for custom components</li> <li>Removed <code>oauth_field</code> parameter in OAuth entities from the UI</li> <li>Removed <code>placeholder</code> usage</li> </ul>"},{"location":"whats_new/#dropped-support-for-python-37","title":"Dropped support for Python 3.7","text":"<p>Current version supports Python 3.9 and above. Related libraries and dependencies have also been updated accordingly.</p> <pre><code>python = \"&gt;=3.9,&lt;3.14\"\njinja2 = \"&gt;=3.1.6,&lt;4\"\njsonschema = \"^4.25.0\"\npackaging = \"&gt;=25.0\"\n</code></pre>"},{"location":"whats_new/#removed-support-for-uccignore","title":"Removed support for .uccignore","text":"<p>This feature was deprecated starting from v5.53.0 and has now been removed in UCC 6.</p> <p>Attempting to use it will result in a build error and the process will exit with code 1.</p> <p>Equivalent functionality can be achieved using additional_packaging.py, specifically with the <code>cleanup_output_files</code> feature to remove files after the source code is copied.</p>"},{"location":"whats_new/#removed-support-for-ui-source-map-flag","title":"Removed support for <code>--ui-source-map</code> flag","text":"<p>The <code>--ui-source-map</code> build command flag is no longer supported.</p>"},{"location":"whats_new/#removed-custom-ui-menu-component","title":"Removed custom UI menu component","text":"<p>Feature was deprecated and removed as it can be replaced by Multilevel Menu feature.</p> <p>Previous configuration:</p> <pre><code>{\n  \"inputs\": {\n    \"title\": \"Inputs\",\n    \"description\": \"Manage your data inputs\",\n    \"services\": [],\n    \"table\": {\n      \"actions\": [\"edit\", \"delete\", \"clone\"],\n      \"header\": [],\n      \"moreInfo\": []\n    },\n    \"menu\": {\n      \"src\": \"custom_menu\",\n      \"type\": \"external\"\n    }\n  }\n}\n</code></pre> <p>and example code:</p> <pre><code>class CustomMenu {\n\n    /**\n    * Custom Menu\n    * @constructor\n    * @param {Object} globalConfig - Global configuration.\n    * @param {element} el - The element of the custom menu.\n    * @param {function} setValue - set value of the custom field.\n    */\n    constructor(globalConfig, el, setValue) {\n        this.globalConfig = globalConfig;\n        this.el = el;\n        this.setValue = setValue;\n        this.services = {};\n    }\n\n    render() {\n        this.el.innerHTML = '&lt;button type=\"button\"&gt;Click Me! I am a button for custom menu&lt;/button&gt;'\n        this.el.onclick = () =&gt; {\n            this.setValue({\n                service: \"example_input_one\" // The value of service can be the name of any services, specified in the globalConfig file.\n            })\n        }\n    }\n}\nexport default CustomMenu;\n</code></pre> <p>Similar effect can be achieved with groupsMenu feature.</p> <pre><code>\"groupsMenu\": [\n{\n    \"groupName\": \"example_input\", \n    \"groupTitle\": \"Click Me! I am a button for custom menu\"\n}\n],\n</code></pre>"},{"location":"whats_new/#removed-amd-require-for-custom-components","title":"Removed AMD <code>require</code> for custom components","text":"<p>We do not recommend to use requireJS approach anymore. Since new version we recommend to use only Standard or Context approach.</p> <p>As a result of this update, custom references must now include both the <code>src</code> and <code>type</code> properties and be structured as follows:</p> <pre><code>{\n    \"src\": \"component_file_name\",\n    \"type\": \"external\"\n}\n</code></pre>"},{"location":"whats_new/#removal-of-oauth_field-parameter-from-oauth","title":"Removal of oauth_field parameter from OAuth","text":"<p>The <code>oauth_field</code> is no longer needed in oauth entities, as right now everything is based on <code>field</code> property itself. We advise to remove <code>oauth_field</code> property from <code>globalConfig.json</code> but if it will end up there, we will remove it during building process.</p>"},{"location":"whats_new/#removed-placeholder","title":"Removed placeholder","text":"<p>The placeholder attribute has been removed. We recommend using the \u201chelp\u201d attribute as an alternative.</p>"},{"location":"advanced/custom_mapping/","title":"Custom Mapping","text":"<p>We can use this feature to map each field with meaningful value to display in the table. For example, the category field contains 1, 2, and 4 values, but when those values are displayed, the user might get confused as those values do not signify the meaning of their mapping. To avoid this confusion, the user can map each field with meaningful value as shown in the following example:</p> <p>If you have fields that are not mandatory but you would like to display them inside table, you can use default value option by providing <code>\"[[default]]\"</code> as one of parameters (check example bellow). It is a way to provide some meaningful information for form fields that have not been filled (fill empty cells in table).</p>"},{"location":"advanced/custom_mapping/#usage","title":"Usage","text":"<pre><code>{\n    \"name\": \"account\",\n    \"title\": \"Account\",\n    \"table\": {\n        \"header\": [\n            {\n                \"field\": \"name\",\n                \"label\": \"Name\"\n            },\n            {\n                \"field\": \"key_id\",\n                \"label\": \"Key ID\"\n            },\n            {\n                \"field\": \"category\",\n                \"label\": \"Region Category\",\n                \"mapping\": {\n                    \"1\": \"Global\",\n                    \"2\": \"US Gov\",\n                    \"4\": \"China\",\n                    \"[[default]]\": \"Unknown\"\n                }\n            }\n        ],\n        \"actions\": [\n            \"edit\",\n            \"delete\"\n        ]\n    },\n    \"entity\": [\n        {\n            \"field\": \"name\",\n            \"label\": \"Name\",\n            \"type\": \"text\",\n            \"required\": true,\n        },\n        {\n            \"field\": \"key_id\",\n            \"label\": \"Key ID\",\n            \"type\": \"text\",\n        },\n        {\n            \"field\": \"category\",\n            \"label\": \"Region Category\",\n            \"type\": \"singleSelect\",\n            \"required\": false,\n            \"defaultValue\": 1,\n            \"options\": {\n                \"disableSearch\": true,\n                \"autoCompleteFields\": [\n                    {\n                        \"label\": \"Global\",\n                        \"value\": 1\n                    },\n                    {\n                        \"label\": \"GovCloud\",\n                        \"value\": 2\n                    },\n                    {\n                        \"label\": \"China\",\n                        \"value\": 4\n                    }\n                ]\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"advanced/custom_mapping/#output","title":"Output","text":"<p>This is how it looks in the UI:</p> <p></p>"},{"location":"advanced/custom_rest_handler/","title":"Custom REST Handlers","text":"<p>It is possible to extend the default behaviour of the UCC-generated REST handlers.</p> <p>For example, if your add-on requires an API key to operate and you want to validate this API key during its creation, you might want to use the custom REST handlers to achieve that.</p> <p>Note: <code>ucc-gen</code> will not override the REST handler code if you use the correct file name under the <code>bin</code> folder.</p> <p>See the following example of how it can be done. It contains a REST handler for creating an organization, with the <code>organization_id</code> and <code>organization_api_key</code> fields, which are not custom ones, generated by <code>ucc-gen</code>. But, also in the example, there is a custom handler, <code>CustomRestHandler</code> class which has additional steps for configuration creation and edit operations, specifically <code>handleEdit</code> and <code>handleCreate</code> methods:</p> <pre><code>import import_declare_test\n\nimport logging\n\nfrom splunktaucclib.rest_handler import admin_external, util\nfrom splunktaucclib.rest_handler.admin_external import AdminExternalHandler\nfrom splunktaucclib.rest_handler.endpoint import (\n    RestModel,\n    SingleModel,\n    field,\n    validator,\n)\n\nutil.remove_http_proxy_env_vars()\n\n\nfields = [\n    field.RestField(\n        \"organization_id\",\n        required=True,\n        encrypted=False,\n        default=None,\n        validator=validator.AllOf(\n            validator.String(\n                max_len=50,\n                min_len=1,\n            ),\n            validator.Pattern(\n                regex=r\"\"\"^\\d+$\"\"\",\n            ),\n        ),\n    ),\n    field.RestField(\n        \"organization_api_key\",\n        required=True,\n        encrypted=True,\n        default=None,\n        validator=validator.AllOf(\n            validator.String(\n                max_len=50,\n                min_len=1,\n            ),\n            validator.Pattern(\n                regex=r\"\"\"^[a-z0-9]+$\"\"\",\n            ),\n        ),\n    ),\n]\nmodel = RestModel(fields, name=None)\n\n\nendpoint = SingleModel(\n    \"addon_name_organization\", model, config_name=\"organization\"\n)\n\n\ndef _validate_organization(organization_id, organization_api_key):\n    # Some code to validate the API key.\n    # Should return nothing if the configuration is valid.\n    # Should raise an exception splunktaucclib.rest_handler.error.RestError if the configuration is not valid.\n    ...\n\n\nclass CustomRestHandler(AdminExternalHandler):\n    def __init__(self, *args, **kwargs):\n        AdminExternalHandler.__init__(self, *args, **kwargs)\n\n    def handleList(self, confInfo):\n        AdminExternalHandler.handleList(self, confInfo)\n\n    def handleEdit(self, confInfo):\n        _validate_organization(\n            self.payload.get(\"organization_id\"),\n            self.payload.get(\"organization_api_key\"),\n        )\n        AdminExternalHandler.handleEdit(self, confInfo)\n\n    def handleCreate(self, confInfo):\n        _validate_organization(\n            self.payload.get(\"organization_id\"),\n            self.payload.get(\"organization_api_key\"),\n        )\n        AdminExternalHandler.handleCreate(self, confInfo)\n\n    def handleRemove(self, confInfo):\n        AdminExternalHandler.handleRemove(self, confInfo)\n\n\nif __name__ == \"__main__\":\n    logging.getLogger().addHandler(logging.NullHandler())\n    admin_external.handle(\n        endpoint,\n        handler=CustomRestHandler,\n    )\n</code></pre>"},{"location":"advanced/custom_rest_handler/#native-support-from-ucc-for-modular-inputs","title":"Native support from UCC for Modular Inputs","text":"<p>UCC 5.18.0 natively supports custom REST handlers for the modular inputs.</p> <p>One common scenario is to delete a checkpoint after you delete an input in the Inputs page. Otherwise, users may face strange consequences if they create an input with the same name as the input that was deleted, and this newly created input will reuse the old checkpoint, because the names of the inputs are the same. We would like to avoid this situation in the add-on.</p> <p>This can be done without a need to modify the REST handler code automatically by running <code>ucc-gen</code>.</p> <p>See the following automatically generated REST handler code for a modular input REST handler:</p> <pre><code>import import_declare_test\n\nfrom splunktaucclib.rest_handler.endpoint import (\n    field,\n    validator,\n    RestModel,\n    DataInputModel,\n)\nfrom splunktaucclib.rest_handler import admin_external, util\nfrom splunktaucclib.rest_handler.admin_external import AdminExternalHandler\nimport logging\n\nutil.remove_http_proxy_env_vars()\n\n\nfields = [\n    field.RestField(\n        'interval',\n        required=True,\n        encrypted=False,\n        default=None,\n        validator=validator.Pattern(\n            regex=r\"\"\"^\\-[1-9]\\d*$|^\\d*$\"\"\", \n        )\n    ),  \n\n    field.RestField(\n        'disabled',\n        required=False,\n        validator=None\n    )\n\n]\nmodel = RestModel(fields, name=None)\n\n\n\nendpoint = DataInputModel(\n    'example_input_one',\n    model,\n)\n\n\nif __name__ == '__main__':\n    logging.getLogger().addHandler(logging.NullHandler())\n    admin_external.handle(\n        endpoint,\n        handler=AdminExternalHandler,\n    )\n</code></pre> <p>New file needs to be created in the <code>bin</code> folder of the add-on. Let\u2019s call it <code>splunk_ta_uccexample_delete_checkpoint_rh.py</code> (name can be different).</p> <p>And put the following content into the file.</p> <pre><code>import import_declare_test\n\nfrom splunktaucclib.rest_handler.admin_external import AdminExternalHandler\n\n\nclass CustomRestHandlerDeleteCheckpoint(AdminExternalHandler):\n    def __init__(self, *args, **kwargs):\n        AdminExternalHandler.__init__(self, *args, **kwargs)\n\n    def handleList(self, confInfo):\n        AdminExternalHandler.handleList(self, confInfo)\n\n    def handleEdit(self, confInfo):\n        AdminExternalHandler.handleEdit(self, confInfo)\n\n    def handleCreate(self, confInfo):\n        AdminExternalHandler.handleCreate(self, confInfo)\n\n    def handleRemove(self, confInfo):\n        # Add your code here to delete the checkpoint!\n        AdminExternalHandler.handleRemove(self, confInfo)\n</code></pre> <p>Then, in globalConfig file you need to change the behaviour of the UCC to reuse the REST handler that was just created.</p> <pre><code>{\n    \"name\": \"example_input_one\",\n    \"restHandlerModule\": \"splunk_ta_uccexample_delete_checkpoint_rh\",  &lt;----- new field\n    \"restHandlerClass\": \"CustomRestHandlerDeleteCheckpoint\",  &lt;----- new field\n    \"entity\": [\n        \"...\"\n    ],\n    \"title\": \"Example Input One\"\n}\n</code></pre> <p>After <code>ucc-gen</code> command is executed again, the generated REST handler for this input will be changed to the following.</p> <pre><code>import import_declare_test\n\nfrom splunktaucclib.rest_handler.endpoint import (\n    field,\n    validator,\n    RestModel,\n    DataInputModel,\n)\nfrom splunktaucclib.rest_handler import admin_external, util\nfrom splunk_ta_uccexample_delete_checkpoint_rh import CustomRestHandlerDeleteCheckpoint  # &lt;----- changed\nimport logging\n\nutil.remove_http_proxy_env_vars()\n\n\nfields = [\n    field.RestField(\n        'interval',\n        required=True,\n        encrypted=False,\n        default=None,\n        validator=validator.Pattern(\n            regex=r\"\"\"^\\-[1-9]\\d*$|^\\d*$\"\"\", \n        )\n    ),  \n\n    field.RestField(\n        'disabled',\n        required=False,\n        validator=None\n    )\n\n]\nmodel = RestModel(fields, name=None)\n\n\n\nendpoint = DataInputModel(\n    'example_input_one',\n    model,\n)\n\n\nif __name__ == '__main__':\n    logging.getLogger().addHandler(logging.NullHandler())\n    admin_external.handle(\n        endpoint,\n        handler=CustomRestHandlerDeleteCheckpoint,  # &lt;----- changed\n    )\n</code></pre>"},{"location":"advanced/custom_rest_handler/#native-support-from-ucc-for-configuration-page","title":"Native support from UCC for Configuration Page","text":"<p>UCC 5.41.0 natively supports custom REST handlers for the configuration page</p> <p>As mentioned at the top, when the API key provided by a user in your add-on and it needs to be validated, you can now directly mention the name of the file that contains the validating code and the class name of it. Hence, your validation script now becomes something as below:</p> <pre><code>import import_declare_test\nfrom splunktaucclib.rest_handler.admin_external import AdminExternalHandler\n# any other imports required for validation\n\ndef _validate_organization(organization_id, organization_api_key):\n    # Some code to validate the API key.\n    # Should return nothing if the configuration is valid.\n    # Should raise an exception splunktaucclib.rest_handler.error.RestError if the configuration is not valid.\n    ...\n\n\nclass CustomAccountValidator(AdminExternalHandler):\n    def __init__(self, *args, **kwargs):\n        AdminExternalHandler.__init__(self, *args, **kwargs)\n\n    def handleList(self, confInfo):\n        AdminExternalHandler.handleList(self, confInfo)\n\n    def handleEdit(self, confInfo):\n        _validate_organization(\n            self.payload.get(\"organization_id\"),\n            self.payload.get(\"organization_api_key\"),\n        )\n        AdminExternalHandler.handleEdit(self, confInfo)\n\n    def handleCreate(self, confInfo):\n        _validate_organization(\n            self.payload.get(\"organization_id\"),\n            self.payload.get(\"organization_api_key\"),\n        )\n        AdminExternalHandler.handleCreate(self, confInfo)\n\n    def handleRemove(self, confInfo):\n        AdminExternalHandler.handleRemove(self, confInfo)\n</code></pre> <p>Place the above content in a file in the <code>bin</code> folder of the add-on. Let\u2019s call it <code>splunk_ta_uccexample_account_validator_rh.py</code> (name can be different).</p> <p>Then, in globalConfig file you need to change the behaviour of the UCC to reuse the REST handler that was just created.</p> <pre><code>{\n    \"configuration\": {\n        \"tabs\": [\n            {\n                \"name\": \"account\",\n                \"title\": \"Account\",\n                \"restHandlerModule\": \"splunk_ta_uccexample_account_validator_rh\",  &lt;----- new field\n                \"restHandlerClass\": \"CustomAccountValidator\",  &lt;----- new field\n                \"table\": {\n                    \"...\" : \"...\"\n                },\n                \"entity\": [\n                    \"...\"\n                ]\n            }\n        ]\n    }\n}\n</code></pre> <p>After <code>ucc-gen</code> command is executed again, the generated REST handler for this configuration page will be updated to the following.</p> <pre><code>import import_declare_test\n\nfrom splunktaucclib.rest_handler.endpoint import (\n    field,\n    validator,\n    RestModel,\n    SingleModel,\n)\nfrom splunktaucclib.rest_handler import admin_external, util\nfrom splunk_ta_uccexample_account_validator_rh import CustomAccountValidator  # &lt;----- changed\nimport logging\n\nutil.remove_http_proxy_env_vars()\n\n\nfields = [\n    # all the fields and its validators mentioned in globalConfig in the configuration page\n    # that are auto generated by UCC framework\n]\nmodel = RestModel(fields, name=None)\n\n\nendpoint = SingleModel(\n    \"addon_name_account\", model, config_name=\"account\"\n)\n\n\nif __name__ == '__main__':\n    logging.getLogger().addHandler(logging.NullHandler())\n    admin_external.handle(\n        endpoint,\n        handler=CustomAccountValidator,  # &lt;----- changed\n    )\n</code></pre>"},{"location":"advanced/custom_warning/","title":"Custom Warning","text":"<p>This feature allows us to pass broarder description on Input and Configuration page displayed under main description.</p>"},{"location":"advanced/custom_warning/#warning-properties","title":"Warning Properties","text":"Property Type Description create object Warning object definition for create form edit object Warning object definition for edit form clone object Warning object definition for clone form config object Warning object definition for config form"},{"location":"advanced/custom_warning/#warning-object-properties","title":"Warning Object Properties","text":"Property Type Description message* string Text used for that description, you can put \\n to add a breakline alwaysDisplay boolean Force warning to be always displayed, even after input changes. Default value is false."},{"location":"advanced/custom_warning/#usage","title":"Usage","text":"<pre><code>\"warning\": {\n    \"create\": {\n        \"message\": \"Some warning for create form\",\n        \"alwaysDisplay\": true\n    },\n    \"edit\": {\n        \"message\": \"Some warning for edit form \"\n    },\n    \"clone\": {\n        \"message\": \"Some warning for clone form\"\n    }\n},\n</code></pre>"},{"location":"advanced/dependent_dropdown/","title":"Dependent Dropdown","text":"<p>This feature allows dynamic loading options for the <code>singleSelect</code> and the <code>multipleSelect</code> fields when the options for that field depend on other fields\u2019 values. It loads options via an API call to the endpoint mentioned in <code>endpointUrl</code> under options when any dependencies field is updated and all required dependencies fields are non-null.</p> <p>All non-required dependencies fields can be of any type, but all required dependencies fields should only be of single-select type.</p> <p>All dependencies fields\u2019 values are added to the endpoint URL as query parameters.</p> <p>If endpoint is refering to internal endpoint, remember to update restmap.conf and web.conf accordingly.</p> <p>If endpoint is refering to external endpoint remember to share content in correct format adjusted to splunk APIs. Remember to provide data in format where data are nested inside entry and content object.</p>"},{"location":"advanced/dependent_dropdown/#usage","title":"Usage","text":"<pre><code>{\n    \"field\": \"bucket_name\",\n    \"label\": \"S3 Bucket\",\n    \"type\": \"singleSelect\",\n    \"required\": true,\n    \"options\": {\n        \"disableonEdit\": true,\n        \"dependencies\": [\n            \"aws_account\",\n            \"aws_iam_role\",\n            \"aws_s3_region\",\n            \"private_endpoint_enabled\",\n            \"sts_private_endpoint_url\",\n            \"s3_private_endpoint_url\"\n        ],\n        \"endpointUrl\": \"splunk_ta_aws/splunk_ta_aws_s3buckets\"\n    }\n}\n</code></pre> <p>Note: When using the text type field, add debounce using the custom hook to reduce the number of API calls.</p>"},{"location":"advanced/dependent_dropdown/#data-format","title":"Data format","text":""},{"location":"advanced/dependent_dropdown/#simplest-format-with-just-name","title":"Simplest format with just name","text":"<p>If you won\u2019t add any specification regarding label or value <code>name</code> property will be used for both.</p> <p>Example data:</p> <pre><code>{\n    \"entry\": [\n        {\n            \"name\": \"firstEntry\"\n        },\n        {\n            \"name\": \"secondEntry\"\n        }\n    ]\n}\n</code></pre> <p>Values in dropdown:</p> <p>First entry =&gt; label <code>firstEntry</code>, value <code>firstEntry</code> Second entry =&gt; label <code>secondEntry</code>, value <code>secondEntry</code></p>"},{"location":"advanced/dependent_dropdown/#format-with-custom-label-and-value","title":"Format with custom label and value","text":"<p>If you will pass <code>labelField</code> or <code>valueField</code> to component configuration, data retrieved from <code>entry.content</code> will be used as corresponding values. For label data from <code>entry.content[labelField]</code> will be assigned. For value data from <code>entry.content[valueField]</code> will be assigned.</p> <p>Example dropdown label configuration:</p> <pre><code>\"options\": {\n    \"labelField\": \"uniqueName\",\n    \"valueField\": \"calculatedValue\"\n}\n</code></pre> <p>Example data:</p> <pre><code>{\n    \"entry\": [\n        {\n            \"name\": \"firstEntry\",\n            \"content\": {\n                \"uniqueName\": \"First entry\",\n                \"calculatedValue\": \"123456\"\n            }\n        },\n        {\n            \"name\": \"secondEntry\",\n            \"content\": {\n                \"uniqueName\": \"Second entry\",\n                \"calculatedValue\": \"654321\"\n            }\n        }\n    ]\n}\n</code></pre> <p>Values in dropdown:</p> <p>First entry =&gt; label <code>First entry</code>, value <code>123456</code> Second entry =&gt; label <code>Second entry</code>, value <code>654321</code></p>"},{"location":"advanced/groups_feature/","title":"Groups Feature","text":"<p>Using this functionality, the Inputs page form can be divided into distinct sections, each comprising relevant fields. If the <code>isExpandable</code> property is set to true in the global configuration file, the group will be in the collapsible panel type.</p> <p>The groups will be displayed at the bottom of the form.</p>"},{"location":"advanced/groups_feature/#properties","title":"Properties","text":"<ul> <li><code>label</code> displays the title of a specific group.</li> <li><code>fields</code> specifies the list of fields in a group. All fields must be present in the entity.</li> <li><code>options</code>:<ul> <li><code>isExpandable</code> can be used to hide/show fields of the group. The default value is false.</li> <li><code>expand</code> can be used to show all fields of the group while opening the form. The default value is false.</li> </ul> </li> </ul>"},{"location":"advanced/groups_feature/#usage","title":"Usage","text":"<pre><code>{\n  \"name\": \"aws_config\",\n  \"title\": \"Config\",\n  \"groups\": [\n    {\n      \"label\": \"AWS Input Configuration\",\n      \"options\": {\n        \"isExpandable\": false\n      },\n      \"fields\": [\n        \"name\",\n        \"aws_account\"\n      ]\n    },\n    {\n      \"label\": \"Splunk-related Configuration\",\n      \"options\": {\n        \"isExpandable\": false\n      },\n      \"fields\": [\n        \"sourcetype\",\n        \"index\"\n      ]\n    },\n    {\n      \"label\": \"Advanced Settings\",\n      \"options\": {\n        \"expand\": false,\n        \"isExpandable\": true\n      },\n      \"fields\": [\n        \"polling_interval\"\n      ]\n    }\n  ],\n  \"entity\": []\n},\n</code></pre>"},{"location":"advanced/groups_feature/#output","title":"Output","text":"<p>This is how it looks in the UI: </p>"},{"location":"advanced/oauth_support/","title":"OAuth Support","text":"<p>UCC allows you to add Auth support in the configuration page.</p> <p>UCC supports two types of authentication:</p> <ul> <li>Basic Authentication</li> <li>OAuth2.0 Authentication</li> </ul> <p>The OAuth2.0 authentication is supported in two ways:</p> <ul> <li>Authorization Code Flow - interactive mode, with <code>grant_type=authorization_code</code>. It is used by specifying <code>oauth</code> in the <code>auth_type</code> field.</li> <li>Client Credentials Flow - non-interactive mode, with <code>grant_type=client_credentials</code>. It is used by specifying <code>oauth_client_credentials</code> in the <code>auth_type</code> field.</li> </ul> <p>More information about the OAuth2.0 authentication can be found in the OAuth2.0 RFC6749.</p> <p>OAuth can be used inside the entity tag. Use <code>type: \"oauth\"</code> in the entity list and specify the <code>options</code> next to the <code>type: \"oauth\"</code>.</p>"},{"location":"advanced/oauth_support/#properties","title":"Properties","text":"<ul> <li><code>type</code> field value must be oauth.</li> <li> <p><code>options</code>:</p> <ul> <li><code>auth_type</code> must be present. The following values are available: [\u201cbasic\u201d, \u201coauth\u201d, \u201coauth_client_credentials\u201d]</li> <li><code>basic</code> must be present only if the auth_type is [\u201cbasic\u201d].<ul> <li>This will have a list of fields for you to add in the basic authentication flow. In the given example, it is username, password, and security_token.</li> <li>Note: As of now, if you are selecting basic as auth_type, then the username and password fields are mandatory.</li> </ul> </li> <li><code>oauth</code> will have a list of fields for you to add in the oauth authentication flow. In the given example, it is <code>client_id</code>, <code>client_secret</code>, <code>redirect_url</code>, <code>scope</code>, and <code>endpoint</code>.</li> <li>These fields are mandatory:<ul> <li><code>client_id</code> is the client id for applying auth to your app or apps.</li> <li><code>client_secret</code> is the client secret for applying auth to your app or apps.</li> <li><code>redirect_url</code> will show the redirect url, which needs to be put in the app\u2019s redirect url.</li> <li><code>endpoint</code> will be the endpoint for you to build oauth support. For example, for salesforce, it will either  be \u201clogin.salesforce.com\u201d, \u201ctest.salesforce.com\u201d, or any other custom endpoint.<ul> <li>There is also the ability to specify separate endpoints for authorize and token. To do this, instead of the single \u2018endpoint\u2019 field, use two separate ones:<ul> <li><code>endpoint_authorize</code> specifies the endpoint used for authorization, for example, login.salesforce.com.</li> <li><code>endpoint_token</code> specifies the endpoint used for the token acquisition, for example, api.login.salesforce.com.</li> </ul> </li> </ul> </li> </ul> </li> <li><code>oauth_client_credentials</code> is a non-interactive flow with Client Credentials grant.</li> <li>For the <code>oauth_client_credentials</code> flow, the following fields are mandatory:<ul> <li><code>client_id_oauth_credentials</code> is the client id for applying auth to your app or apps.</li> <li><code>client_secret_oauth_credentials</code> is the client secret for applying auth to your app or apps.</li> <li><code>endpoint_token_oauth_credentials</code> specifies the endpoint used for the token acquisition, for example, api.login.salesforce.com.</li> </ul> </li> <li>Optional field is <code>scope</code> - the scope of the access request.</li> <li><code>auth_code_endpoint</code> must be present and its value should be the endpoint value for getting the auth_code using the app. If the url to get the auth_code is https://login.salesforce.com/services/oauth2/authorize, then this will have the value /services/oauth2/authorize.</li> <li><code>access_token_endpoint</code> must be present and its value should be the endpoint value for getting the ccess_token using the auth_code received. If the url to get the access token is https://login.salesforce.com/services/oauth2/token, then it will have the value /services/oauth2/token.</li> <li><code>auth_label</code> allows the user to have the custom label for the Auth Type dropdown.</li> <li><code>oauth_popup_width</code> is the width in pixels of the pop-up window that will open for oauth authentication (Optional, defaults to 600).</li> <li><code>oauth_popup_height</code> is the height in pixels of the pop-up window that will open for oauth authentication (Optional, defaults to 600).</li> <li><code>oauth_timeout</code> is the timeout in seconds for oauth authentication (Optional, defaults to 180 seconds).</li> <li><code>oauth_state_enabled</code> is used to include the state for oauth authentication (default value is false).</li> <li><code>auth_endpoint_token_access_type</code> is an optional parameter that is mapped into the value of the token_access_type query param in the authorisation url.</li> <li>The <code>oauth_type_labels</code> property lets you customize the display names of OAuth methods in the UI. For example, <code>{ \"basic\": \"Basic Auth\" }</code> will show the basic authorization option as \u2018Basic Auth\u2019 instead of the default \u2018Basic Authentication\u2019.</li> <li> <p>You can also introduce custom authorization methods from the front-end. To enable this, the backend REST handler must be updated to support the new method. To add a custom method, include it in the <code>auth_type</code> array (for example, <code>additional_authorization_method</code>) and define a property with the same name, listing all required entities for that method. (See <code>additional_authorization_method</code> in the example below.) To set a user-friendly label, add it to <code>oauth_type_labels</code>.</p> </li> <li> <p>The fields allowed in the basic and oauth fields are the following:</p> <ul> <li><code>label</code> can be changed if the user wants to change the label of the field in UI.</li> <li><code>field</code> must keep it as it is for mandatory fields as mentioned before.</li> <li><code>help</code> can be changed the if user wants to change the help text displayed below the field.</li> <li><code>encrypted</code> should be true if the user wants that particular field encrypted, otherwise, there is no need to have this parameter.</li> <li><code>required</code> specifies whether the field is required or not. The default value is true.</li> <li><code>defaultValue</code> is the initial input value (string, number, or boolean).</li> <li><code>validators</code> array that is used to validate the values of fields using various validators. It is strongly advised to specify validators for every entity.</li> <li><code>options</code>:<ul> <li><code>disableonEdit</code>: When the form is in edit mode, the field becomes unable to be edited. The default value is false.</li> <li><code>enable</code>: The enable property sets whether a field is enabled or not. The default value is true.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"advanced/oauth_support/#usage","title":"Usage","text":"<pre><code>\"configuration\": {\n    \"title\": \"Configurations\",\n    \"description\": \"Configure your servers and templates.\",\n    \"tabs\": [\n        {\n            \"name\": \"account\",\n            \"title\": \"Account\",\n            \"entity\": [\n                {\n                    \"field\": \"name\",\n                    \"label\": \"Name\",\n                    \"type\": \"text\",\n                    \"required\": true,\n                    \"help\": \"Enter a unique name for each Crowdstrike falcon host account.\",\n                },\n                {\n                    \"type\": \"oauth\",\n                    \"field\": \"oauth\",\n                    \"label\": \"Not used\",\n                    \"options\": {\n                        \"auth_type\": [\n                            \"basic\",\n                            \"oauth\",\n                            \"oauth_client_credentials\",\n                            \"additional_authorization_method\"\n                        ],\n                        \"basic\": [\n                            {\n                                \"label\": \"User Name\",\n                                \"field\": \"username\",\n                                \"help\": \"Enter Account name.\"\n                            },\n                            {\n                                \"label\": \"Password\",\n                                \"field\": \"password\",\n                                \"encrypted\": true,\n                                \"help\": \"Enter Password.\"\n                            },\n                            {\n                                \"label\": \"Securtiy Token\",\n                                \"field\": \"security_token\",\n                                \"encrypted\": true,\n                                \"help\": \"Enter Security Token.\"\n                            }\n                        ],\n                        \"oauth\": [\n                            {\n                                \"label\": \"Client Id\",\n                                \"field\": \"client_id\",\n                                \"help\": \"Enter Client Id.\"\n                            },\n                            {\n                                \"label\": \"Client Secret\",\n                                \"field\": \"client_secret\",\n                                \"encrypted\": true,\n                                \"help\": \"Enter Client Secret.\"\n                            },\n                            {\n                                \"label\": \"Redirect url\",\n                                \"field\": \"redirect_url\",\n                                \"help\": \"Please add this redirect URL in your app.\"\n                            },\n                            {\n                                \"label\": \"Scope\",\n                                \"field\": \"scope\",\n                                \"help\": \"Enter the scope for the authorization code with ',' separating each scope.\",\n                                \"required\": false\n                            },\n                            {\n                                \"label\": \"Endpoint\",\n                                \"field\": \"endpoint\",\n                                \"help\": \"Enter Endpoint\"\n                            }\n                        ],\n                        \"oauth_client_credentials\": [\n                            {\n                                \"label\": \"Client Id\",\n                                \"field\": \"client_id_oauth_credentials\",\n                                \"help\": \"Enter Client Id.\"\n                            },\n                            {\n                                \"label\": \"Client Secret\",\n                                \"field\": \"client_secret_oauth_credentials\",\n                                \"encrypted\": true,\n                                \"help\": \"Enter Client Secret.\"\n                            },\n                            {\n                                \"label\": \"Scope\",\n                                \"field\": \"scope\",\n                                \"help\": \"Enter the scope for the authorization code with ',' separating each scope.\",\n                                \"required\": false\n                            },\n                            {\n                                \"label\": \"Endpoint\",\n                                \"field\": \"endpoint_token_oauth_credentials\",\n                                \"help\": \"Enter Endpoint\"\n                            }\n                        ],\n                        \"additional_authorization_method\": [\n                            {\n                                \"label\": \"Username\",\n                                \"field\": \"additional_username\",\n                                \"help\": \"Additional Authorization method \"\n                            },\n                            {\n                                \"label\": \"Certificate\",\n                                \"field\": \"additional_method_certificate\",\n                                \"encrypted\": true,\n                                \"help\": \"Enter Certificate\"\n                            },\n                            {\n                                \"label\": \"Securtiy Token(Optional)\",\n                                \"field\": \"additional_authorization_param\",\n                                \"encrypted\": true,\n                                \"help\": \"Security Token (Optional).\"\n                            }\n                        ],\n                        \"auth_label\": \"Auth Type\",\n                        \"oauth_popup_width\": 600,\n                        \"oauth_popup_height\": 600,\n                        \"oauth_timeout\": 180,\n                        \"auth_code_endpoint\": \"/services/oauth2/authorize\",\n                        \"access_token_endpoint\": \"/services/oauth2/token\",\n                        \"auth_endpoint_token_access_type\": \"offline\"\n                    }\n                }\n            ],\n        }\n    ]\n}\n</code></pre>"},{"location":"advanced/oauth_support/#output","title":"Output","text":"<p>This is how the Add Account modal looks after adding the above code to the globalConfig.json file:</p> <p>This is how Add Account looks when the auth_type is <code>basic</code>: </p> <p>This is how Add Account looks when the auth_type is <code>oauth</code>: </p>"},{"location":"advanced/os-dependent_libraries/","title":"OS-dependent libraries","text":"<p>This feature allows you to download and unpack libraries with appropriate binaries for the indicated operating system during the build process. To do this, you need to expand the meta section in the global configuration with the os-dependentLibraries field. This field takes the following attributes:</p> Property Type Description default value name* string is the name of the library we want to download. - version* string is the specific version of the given library. - dependencies boolean (Optional) is the parameter which determines whether the <code>--no-deps</code> flag will be used when installing the package from <code>pip</code>. When the value is set to <code>true</code>, the library will be installed along with all its dependencies. When the value is set to <code>false</code> (default) <code>{name}={version}</code>, it must be present in packages <code>requirements.txt</code>. false platform* string is the platform for downloading the specified library. The value depends on the available wheels for a given library, for example, for this wheel, cryptography-41.0.5-cp37-abi3-manylinux_2_28_x86_64.whl, the platform is manylinux_2_28_x86_64. - python_version* string is the Python version compatible with the library. - target* string is the path where the selected library will be unpacked. - os* string is the name of the operating system which the library is intended for. Using this parameter, an appropriate insert into sys.path will be created. It takes 3 values windows, linux, and darwin. - ignore_requires_python boolean (Optional) (default: False). Determines whether the \u2013ignore-requires-python flag is added to the pip install command. If set to True, the flag will be included, allowing the package to be installed regardless of the Python version the add-on was built with. -"},{"location":"advanced/os-dependent_libraries/#about-wheels-files","title":"About wheels files","text":"<p>Generally, the wheel name convention is {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl. For example, for this particular library, grpcio-1.54.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl , your pip parameters are:</p> <ul> <li>name = grpcio</li> <li>version = 1.54.2</li> <li>platform = manylinux_2_17_x86_64 or manylinux2014_x86_64</li> <li>python_version = 37</li> <li>target = your/path/to/target</li> <li>os = linux</li> </ul> <p>and your pip command should look like this: <code>pip install --no-deps --platform manylinux_2_17_x86_64 --python-version 37 --target your/path/to/target --only-binary=:all: grpcio==1.54.2</code></p> <p>A dot in the platform part indicates that a given distribution supports several platforms. In this case, \u201c.\u201d in manylinux_2_17_x86_64.manylinux2014_x86_64 means this distribution supports both * manylinux_2_17_x86_64 and manylinux2014_x86_64*.</p> <p><code>python_version</code> parameter follow the same syntax as <code>--python-version</code> flag in <code>pip download</code> command, see documentation for more details.</p> <p>If there are libraries specified for different Python versions, they must have different target paths.</p> <pre><code>            \"os-dependentLibraries\": [\n            {\n                \"name\": \"cryptography\",\n                \"version\": \"41.0.5\",\n                \"platform\": \"manylinux2014_x86_64\",\n                \"python_version\": \"37\",\n                \"os\": \"linux\",\n                \"target\": \"3rdparty/linux_libs\"\n            },\n            {\n                \"name\": \"cryptography\",\n                \"version\": \"41.0.5\",\n                \"dependencies\": true,\n                \"platform\": \"manylinux2014_x86_64\",\n                \"python_version\": \"3.9\",\n                \"os\": \"linux\",\n                \"target\": \"3rdparty/linux_lib_py39\"\n            },\n</code></pre> <p>For more information, see .whl and manylinux platform.</p>"},{"location":"advanced/os-dependent_libraries/#usage","title":"Usage","text":"<pre><code>    ...\n    \"meta\": {\n        \"name\": \"&lt;TA name&gt;\",\n        \"restRoot\": \"&lt;restRoot&gt;\",\n        \"version\": \"&lt;TA version&gt;\",\n        \"displayName\": \"&lt;TA display name&gt;\",\n        \"schemaVersion\": \"&lt;schema version&gt;\",\n        \"os-dependentLibraries\": [\n            {\n                \"name\": \"cryptography\",\n                \"version\": \"41.0.5\",\n                \"platform\": \"manylinux2014_x86_64\",\n                \"python_version\": \"37\",\n                \"os\": \"linux\",\n                \"target\": \"3rdparty/linux\"\n            },\n            {\n                \"name\": \"cryptography\",\n                \"version\": \"41.0.5\",\n                \"platform\": \"win_amd64\",\n                \"python_version\": \"37\",\n                \"os\": \"windows\",\n                \"target\": \"3rdparty/windows\"\n            },\n            {\n                \"name\": \"cryptography\",\n                \"version\": \"41.0.5\",\n                \"dependencies\": true,\n                \"platform\": \"manylinux2014_x86_64\",\n                \"python_version\": \"37\",\n                \"os\": \"linux\",\n                \"target\": \"3rdparty/linux_with_deps\"\n            },\n            {\n                \"name\": \"cffi\",\n                \"version\": \"1.15.1\",\n                \"platform\": \"win_amd64\",\n                \"python_version\": \"37\",\n                \"os\": \"windows\",\n                \"target\": \"3rdparty/windows\"\n            }\n        ]\n    }\n</code></pre>"},{"location":"advanced/os-dependent_libraries/#result","title":"Result","text":"<p>Running the build for the above configuration will result in the creation of the following structure:</p> <pre><code>output\n    \u2514\u2500\u2500&lt;TA&gt;\n        \u251c\u2500\u2500 bin\n        ...\n        \u2514\u2500\u2500 lib\n            \u2514\u2500\u2500 3rdparty\n                \u251c\u2500\u2500 linux\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cryptography\n                \u2502\u00a0\u00a0 \u2514\u2500\u2500 cryptography-41.0.5.dist-info\n                \u251c\u2500\u2500 linux_with_deps\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 _cffi_backend.cpython-37m-x86_64-linux-gnu.so\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cffi\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cffi-1.15.1.dist-info\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cryptography\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 cryptography-41.0.5.dist-info\n                \u2502\u00a0\u00a0 \u251c\u2500\u2500 pycparser\n                \u2502\u00a0\u00a0 \u2514\u2500\u2500 pycparser-2.21.dist-info\n                \u2514\u2500\u2500 windows\n                    \u251c\u2500\u2500 _cffi_backend.cp37-win_amd64.pyd\n                    \u251c\u2500\u2500 cffi\n                    \u251c\u2500\u2500 cffi-1.15.1.dist-info\n                    \u251c\u2500\u2500 cryptography\n                    \u2514\u2500\u2500 cryptography-41.0.5.dist-info\n</code></pre> <p>During the build process, a python script \u201cimport_declare_test.py\u201d will be created in output/ta_name/bin to manipulate system paths. In each input using the specified libraries, this script must be imported. Currently, three operating systems are supported: Windows, Linux, and Darwin. If, for development purposes, there is a need to create other custom manipulations on sys.path, create your own script called \u201cimport_declare_test.py\u201d and place it in the package/bin folder. This way, when building the TA, the default script will be replaced with the one created by the developer. The default script for this configuration will look like this:</p> <pre><code>import os\nimport sys\nimport re\nfrom os.path import dirname\n\nta_name = 'demo_addon_for_splunk'\npattern = re.compile(r'[\\\\/]etc[\\\\/]apps[\\\\/][^\\\\/]+[\\\\/]bin[\\\\/]?$')\nnew_paths = [path for path in sys.path if not pattern.search(path) or ta_name in path]\nnew_paths.insert(0, os.path.join(dirname(dirname(__file__)), \"lib\"))\nnew_paths.insert(0, os.path.sep.join([os.path.dirname(__file__), ta_name]))\nsys.path = new_paths\n\nbindir = os.path.dirname(os.path.realpath(os.path.dirname(__file__)))\nlibdir = os.path.join(bindir, \"lib\")\nplatform = sys.platform\nif platform.startswith(\"linux\"):\n    sys.path.insert(0, os.path.join(libdir, \"3rdparty/linux_with_deps\"))\n    sys.path.insert(0, os.path.join(libdir, \"3rdparty/linux\"))\nif platform.startswith(\"win\"):\n    sys.path.insert(0, os.path.join(libdir, \"3rdparty/windows\"))\n</code></pre>"},{"location":"advanced/requirements/","title":"Requirements","text":"<p>UCC allows you to specify Python package dependencies for your add-on using standard pip requirements files. This feature provides control over which packages are installed and which should be excluded from the final build.</p>"},{"location":"advanced/requirements/#requirements-file","title":"Requirements File","text":"<p>You can specify Python packages to be installed in your add-on by creating a <code>requirements.txt</code> file in the <code>package/lib/</code> directory. UCC will use pip to install these packages during the build process.</p>"},{"location":"advanced/requirements/#location","title":"Location","text":"<pre><code>&lt;your_project&gt;/\n\u251c\u2500\u2500 package/\n\u2502   \u2514\u2500\u2500 lib/\n\u2502       \u251c\u2500\u2500 requirements.txt\n\u2502       \u2514\u2500\u2500 exclude.txt (optional)\n</code></pre>"},{"location":"advanced/requirements/#format","title":"Format","text":"<p>The <code>requirements.txt</code> file follows the standard pip requirements file format:</p> <pre><code># Standard packages\nrequests&gt;=2.25.0\npyyaml\ncryptography==41.0.5\n\n# From VCS\ngit+https://github.com/user/repo.git@v1.0#egg=package-name\n\n# Local package\n./local-package\n\n# Packages with extras\nrequests[security]\n</code></pre>"},{"location":"advanced/requirements/#example","title":"Example","text":"<pre><code>splunktaucclib\nsplunk-sdk\nsolnlib\nrequests&gt;=2.25.0\npyyaml\ncryptography\n</code></pre>"},{"location":"advanced/requirements/#exclude-file","title":"Exclude File","text":"<p>The <code>exclude.txt</code> file allows you to specify packages that should be removed after installation. This is particularly useful for excluding packages that are already shipped with Splunk by default, avoiding conflicts and reducing add-on size.</p>"},{"location":"advanced/requirements/#location_1","title":"Location","text":"<p>The <code>exclude.txt</code> file should be placed in the same <code>package/lib/</code> directory as <code>requirements.txt</code>.</p>"},{"location":"advanced/requirements/#format_1","title":"Format","text":"<p>The exclude file contains one package name per line. Comments are supported using the <code>#</code> symbol.</p> <p>Similarly to <code>requirements.txt</code>, a line that begins with <code>#</code> is treated as a comment and ignored. Whitespace followed by a <code>#</code> causes the <code>#</code> and the remainder of the line to be treated as a comment.</p>"},{"location":"advanced/requirements/#example_1","title":"Example","text":"<pre><code># Exclude packages shipped with Splunk\nurllib3\ncertifi\n\nsetuptools # Exclude setuptools\n</code></pre> <p>The above example will exclude the <code>urllib3</code>, <code>certifi</code>, and <code>setuptools</code> packages from the final add-on package.</p>"},{"location":"advanced/requirements/#build-process","title":"Build Process","text":"<p>During the build process, UCC will:</p> <ol> <li>Install all packages listed in <code>requirements.txt</code> using pip 1.Remove any packages listed in <code>exclude.txt</code> from the installed libraries 1.Copy the remaining packages to the add-on\u2019s <code>lib</code> directory</li> </ol>"},{"location":"advanced/requirements/#usage-notes","title":"Usage Notes","text":"<ul> <li>If <code>requirements.txt</code> doesn\u2019t exist, no packages will be installed</li> <li>If <code>exclude.txt</code> doesn\u2019t exist, no packages will be excluded</li> <li>Package exclusion happens after installation, so dependencies of excluded packages may still be present unless explicitly excluded</li> <li>The exclude file only accepts package names without version specifiers, markers, URLs, or extras</li> </ul>"},{"location":"advanced/save_validator/","title":"Save Validator","text":"<p>This feature allows you to pass a Javascript function as a string to apply customized validation to form data.</p> <p>By using this approach, you can write custom JavaScript code where you can write your business logic, and validating can return error messages which will be displayed at the top of the form.</p> <p>This custom javascript function has a parameter, (for example, dataDict), which contains the form data object.</p> <p>This function will be called after all validators have validated the data form.</p>"},{"location":"advanced/save_validator/#usage","title":"Usage","text":"<pre><code>{\n    \"name\": \"example_input_one\",\n    \"title\": \"Example Input One\",\n    \"entity\": [],\n    \"options\": {\n        \"saveValidator\": \"function start_data_validator(dataDict) { const provided_datetime = new Date(dataDict['start_date']).getTime(); const current_datetime = new Date().getTime(); if (provided_datetime &gt; current_datetime) { return 'Start date should not be in future'; }}\"\n    }\n}\n</code></pre>"},{"location":"advanced/sub_description/","title":"Sub Description","text":"<p>This feature allows us to pass a broader description on the Input and Configuration pages displayed under main description.</p>"},{"location":"advanced/sub_description/#sub-descritpion-properties","title":"Sub Descritpion Properties","text":"Property Type Description text* string is text used for the description, you can put <code>\\n</code> to add a breakline. links object enables including links inside description"},{"location":"advanced/sub_description/#links","title":"Links","text":"Property Type Description slug* string is used to identify the place for the link to appear. Put it inside the text, surrounded by 2 squared brackets. link* string is the link to be used. linkText* string is the text to be inserted, instead of slug."},{"location":"advanced/sub_description/#usage","title":"Usage","text":"<pre><code>{\n  \"name\": \"example_input_one\",\n  \"title\": \"Example Input One\",\n  \"entity\": [],\n  \"subDescription\": {\n    \"text\": \"Ingesting data from to Splunk Cloud?\\nRead our [[blogPost]] to learn more about Data Manager and it's availability on your Splunk Cloud instance.\",\n    \"links\": [\n      {\n        \"slug\": \"blogPost\",\n        \"link\": \"https://splk.it/31oy2b2\",\n        \"linkText\": \"blog post\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"alert_actions/","title":"Alert Actions","text":"<p>The alert action can help a user to take action on the alerts that have been triggered. The knowledge from Splunk can be sent to an outside service or to pull additional or detailed information related to the trigger details. An add-on can have multiple alert actions based on the use cases the add-on provides. You can know more about alert actions from this documentation.</p> <p>Developers are required to add alerts in the global config file to create an Alert Action. All the alerts (belonging to all the add-ons and apps) present on a Splunk instance would be shown in the \u201cTrigger Actions\u201d section when creating an alert.</p>"},{"location":"alert_actions/#properties","title":"Properties","text":"Property Type Description name* string Alphanumeric name that would be used to generate the Python file for the alert action. label* string User-friendly name of the alert action that would be seen in the Trigger Actions. entity* array Array of inputs that would be available in the alert action. iconFileName string The name of the icon to be shown in the Alert Action UI. It has to be present in <code>&lt;YOUR_ADD-ON_NAME&gt;/appserver/static/</code> directory. Default file name (and icon): <code>alerticon.png</code> that comes with UCC framework. description* string Description of the alert action. activeResponse object Define only if the alert action will be visible for AR in Splunk Enterprise Security app. Note: DEPRECATED. Use <code>adaptiveResponse</code> instead. adaptiveResponse object Define only if the alert action will be visible for AR in Splunk Enterprise Security app. Refer this section for complete details. customScript string A Python script that would have validation and logic for alert action execution. The script should be present at <code>&lt;YOUR_ADD-ON_NAME&gt;/bin/</code>. Refer this section for more information."},{"location":"alert_actions/#alert-properties","title":"Alert Properties","text":"Property Type Description type* string The type of the user input in the alert. Available choices: \u201ctext\u201d, \u201ctextarea\u201d, \u201ccheckbox\u201d, \u201csingleSelect\u201d, \u201cradio\u201d, \u201csingleSelectSplunkSearch\u201d. label* string The text that would be shown in the alert action UI. field* string The field that would be used in the scripts to get the value from the user input. These are defined as <code>param.&lt;field_mentioned&gt;</code> in the <code>alert_actions.conf</code>. options array Static choices that a user can select in the alert action UI. required boolean Whether the mentioned field is required or not. Default: false help string Help text to be shown under the field of the alert. search string A Splunk SPL that would query and return some result. Query the REST API, a lookup table, or indexed data. valueField string Field name to use for drop-down option values that correspond to the option labels. In some cases, you can use the same results field for the label-field and value-field. In other cases, you might need to display human-readable labels from one field and use the corresponding values from another field. Note: Applicable when a <code>search</code> property is defined. labelField string Field name to use for drop-down option labels. Labels generated from this field are visible in the drop-down interface. Note: Applicable when a <code>search</code> property is defined."},{"location":"alert_actions/#usage","title":"Usage","text":"<p>This is how the global configuration looks like for an alert action:</p> <pre><code>\"alerts\": [\n        {\n            \"name\": \"test_alert\",\n            \"label\": \"Test Alert\",\n            \"description\": \"Description for your Alert Action\",\n            \"entity\": [\n                {\n                    \"type\": \"singleSelectSplunkSearch\",\n                    \"label\": \"Select Account\",\n                    \"field\": \"account\",\n                    \"search\": \"| rest /servicesNS/nobody/Splunk_TA_UCCExample/splunk_ta_uccexample_account splunk_server=local | dedup title\",\n                    \"options\": {\n                        \"items\": [\n                            {\n                                \"label\": \"earliest\",\n                                \"value\": \"-4@h\"\n                            },\n                            {\n                                \"label\": \"latest\",\n                                \"value\": \"now\"\n                            }\n                        ]\n                    },\n                    \"valueField\": \"title\",\n                    \"labelField\": \"title\",\n                    \"help\": \"Select an account from the dropdown\",\n                    \"required\": true\n                },\n                {\n                    \"type\": \"text\",\n                    \"label\": \"Name\",\n                    \"field\": \"name\",\n                    \"defaultValue\": \"my_name\",\n                    \"required\": true,\n                    \"help\": \"Please enter your Name\"\n                },\n                {\n                    \"type\": \"checkbox\",\n                    \"label\": \"Run for All\",\n                    \"field\": \"run_for_all\",\n                    \"defaultValue\": 0,\n                    \"required\": false,\n                    \"help\": \"Check if you want to run alert action for all \"\n                },\n                {\n                    \"type\": \"singleSelect\",\n                    \"label\": \"Item List\",\n                    \"field\": \"item_list\",\n                    \"options\": {\n                        \"items\": [\n                            {\n                                \"value\": \"option_1\",\n                                \"label\": \"Option 1\"\n                            },\n                            {\n                                \"value\": \"option_2\",\n                                \"label\": \"Option 2\"\n                            }\n                        ]\n                    },\n                    \"help\": \"Select any one option from the list\",\n                    \"required\": false,\n                    \"defaultValue\": \"option_1\"\n                },\n                {\n                    \"type\": \"radio\",\n                    \"label\": \"Action:\",\n                    \"field\": \"action\",\n                    \"options\": {\n                        \"items\": [\n                            {\n                                \"value\": \"update\",\n                                \"label\": \"Update\"\n                            },\n                            {\n                                \"value\": \"insert\",\n                                \"label\": \"Insert\"\n                            }\n                        ]\n                    },\n                    \"help\": \"Select the action you want to perform\",\n                    \"required\": true,\n                    \"defaultValue\": \"insert\"\n                }\n            ]\n        }\n    ]\n</code></pre>"},{"location":"alert_actions/#output","title":"Output","text":"<p>This is how the alert action looks like in the UI:</p> <p> Refer the Alert Scripts section to know what all files are created and how they can be updated to achieve the use case of your add-on.</p>"},{"location":"alert_actions/adaptive_response/","title":"Adaptive Response","text":"<p>The Adaptive Response framework provides a mechanism for running preconfigured actions within the Splunk platform or by integrating with external applications. These actions can be automatically triggered by correlation search results or manually run on an ad hoc basis from the Incident Review dashboard inside the Enterpise Security app. You can read more about this framework here.</p> <p>In case your add-on is integrated with Enterprise Security, you can define the configurations in the alert action details in your add-on\u2019s <code>globalConfig</code> and it will create the necessary triggers for it.</p>"},{"location":"alert_actions/adaptive_response/#adaptive-response-properties","title":"Adaptive Response Properties","text":"Property Type Description task* string The function or functions performed by the modular action. subject* string The object or objects that the modular action\u2019s task(s) can be performed on (i.e. \u201cendpoint.file\u201d). category* array The category or categories the modular action belongs to. technology* string The technology or technologies that the modular action supports. supportsAdhoc boolean Specifies if the modular action supports adhoc invocations. Default: false supportsCloud boolean Specifies if the modular actions supports the \u201ccloud\u201d model. Default: true drilldownUri string Specifies a custom target for viewing the events outputted as a result of the action. Custom target can specify app and/or view depending on syntax. sourcetype string The sourcetype in which the result of the AR alert action would be written to. The value is updated in the alert action script. If you don\u2019t specify any value you can update your alert action script manually once it is generated. <p>An example of adaptive response in globalConfig:</p> <pre><code>\"alerts\": [\n    {\n        \"name\": \"test_alert\",\n        \"label\": \"Test Alert\",\n        \"description\": \"Description for test Alert Action\",\n        \"iconFileName\": \"test icon.png\",\n        \"adaptiveResponse\": {\n            \"task\": [\n                \"Create\",\n                \"Update\"\n            ],\n            \"supportsAdhoc\": true,\n            \"supportsCloud\": true,\n            \"subject\": [\n                \"endpoint\"\n            ],\n            \"category\": [\n                \"Information Conveyance\",\n                \"Information Portrayal\"\n            ],\n            \"technology\": [\n                {\n                    \"version\": [\n                        \"1.0.0\"\n                    ],\n                    \"product\": \"Test Incident Update\",\n                    \"vendor\": \"Splunk\"\n                }\n            ],\n            \"drilldownUri\": \"search?q=search%20index%3D\\\"_internal\\\"&amp;earliest=0&amp;latest=\",\n            \"sourcetype\": \"test:incident\"\n        },\n        \"entity\": [ \"...\" ]\n    }\n]\n</code></pre> <p>The above would create an attribute in <code>output/&lt;YOUR_ADDON_NAME&gt;/default/alert_action.conf</code> as following:</p> <pre><code>[test_alert]\nlabel = Test Alert\ndescription = Description for test Alert Action\nicon_path = test icon.png\nis_custom = 1\nparam._cam = {\"task\": [\"Create\", \"Update\"], \"subject\": [\"endpoint\"], \"category\": [\"Information Conveyance\", \"Information Portrayal\"], \"technology\": [{\"version\": [\"1.0.0\"], \"product\": \"Test Incident Update\", \"vendor\": \"Splunk\"}], \"supports_adhoc\": true, \"supports_cloud\": true, \"drilldown_uri\": \"search?q=search%20index%3D\\\"_internal\\\"&amp;earliest=0&amp;latest=\"}\n# ... rest of the properties mentioned in the alert action configuration\n</code></pre> <p>You can refer this dev documentation for details on updating alert action scripts such that they can be used in the Adaptive Response framework.</p>"},{"location":"alert_actions/alert_scripts/","title":"Alert Action Scripts","text":"<p>The following files would be created/ updated in the output folder once you executed the <code>ucc-gen</code> command:</p> File Location Content Description Action output/&lt;YOUR_ADD-ON_NAME&gt;/bin/&lt;NAME_OF_THE_ALERT&gt;.py The logic that will be executed when the alert action would be executed. Created output/&lt;YOUR_ADD-ON_NAME&gt;/default/alert_actions.conf Helps Splunk determine the parameters supported by the alert action when using <code>sendalert</code> Splunk command. A stanza with the name as &lt;NAME_OF_THE_ALERT&gt; is created in this conf file. output/&lt;YOUR_ADD-ON_NAME&gt;/default/data/ui/alerts/&lt;NAME_OF_THE_ALERT&gt;.html HTML page of the Alert Action that will be rendered in the UI. Created <p>In the python file that is created, below are the methods that you can use or override for varying use cases:</p> <ul> <li><code>process_event()</code><ul> <li>This is the start point of where you require to write the logic of sending data from Splunk to any other service via its APIs. Additionally, you can validate the parameters that are provided in the alert action as client side validation (via JavaScript) isn\u2019t allowed in Splunk\u2019s alert action\u2019s HTML page for security reasons.  Note: This method must be overwritten.</li> </ul> </li> <li><code>get_events()</code> -&gt; List[dict]<ul> <li>Used to get the events that triggered the alert. It returns a list of dictionary. A dictionary points to an event that triggered the alert, and each dictionary has the fields extracted by Splunk.</li> </ul> </li> <li><code>addevent(raw: str, sourcetype: str)</code><ul> <li>If you are bringing additional information from an outer service, you can write that information using this method. You write a single record using the method. This method will append all the records and will dump it to Splunk when <code>writeevents()</code> method is called.</li> </ul> </li> <li><code>writeevents(index: str, host: str, source: str)</code><ul> <li>All the events added to the queue using <code>addevent()</code> method are written to Splunk with the details passed in the arguments.</li> </ul> </li> </ul> <p>An example of a script with validations:</p> <pre><code>import import_declare_test\nimport sys\n\nfrom splunktaucclib.alert_actions_base import ModularAlertBase\nfrom splunk_ta_uccexample import modalert_test_alert_helper\n\nclass AlertActionWorkertest_alert(ModularAlertBase):\n\n    def __init__(self, ta_name, alert_name):\n        super(AlertActionWorkertest_alert, self).__init__(ta_name, alert_name)\n\n    def validate_params(self):\n\n\n        if not self.get_param(\"name\"):\n            self.log_error('name is a mandatory parameter, but its value is None.')\n            return False\n\n        if not self.get_param(\"action\"):\n            self.log_error('action is a mandatory parameter, but its value is None.')\n            return False\n\n        if not self.get_param(\"account\"):\n            self.log_error('account is a mandatory parameter, but its value is None.')\n            return False\n        return True\n\n    def process_event(self, *args, **kwargs):\n        status = 0\n        try:\n            if not self.validate_params():\n                return 3\n            status = modalert_test_alert_helper.process_event(self, *args, **kwargs)\n        except (AttributeError, TypeError) as ae:\n            self.log_error(\"Error: {}. Please double check spelling and also verify that a \"\n                \"compatible version of Splunk_SA_CIM is installed.\".format(str(ae)))\n            return 4\n        except Exception as e:\n            msg = \"Unexpected error: {}.\"\n            if str(e):\n                self.log_error(msg.format(str(e)))\n            else:\n                import traceback\n                self.log_error(msg.format(traceback.format_exc()))\n            return 5\n        return status\n\nif __name__ == \"__main__\":\n    exitcode = AlertActionWorkertest_alert(\"Splunk_TA_UCCExample\", \"test_alert\").run(sys.argv)\n    sys.exit(exitcode)\n</code></pre> <p>In this example, <code>modalert_test_alert_helper</code>\u2019s <code>process_event()</code> method contains the logic of the actions to be performed when the alert is triggered. It could either be fetch additional information from a service into Splunk or to send any data from Splunk to a service via its APIs.</p>"},{"location":"alert_actions/alert_scripts/#custom-script-for-alert-action","title":"Custom Script for Alert Action","text":"<p>Alternatively, you can provide the <code>process_event()</code> and <code>validate_params()</code> in the script you mentioned in the <code>customScript</code> parameter in the globalConfig. If the parameter isn\u2019t provided in the globalConfig, UCC framework would provide a boiler plate code that you can leverage in writing your logic for alert action.</p> <p>This script should be present at <code>&lt;YOUR_ADD-ON_REPOSITORY_PACKAGE&gt;/bin/</code> in your respository and it should have <code>process_event()</code> function defined. An example declaration could be:</p> <pre><code>def my_custom_validation(helper):\n    # custom validation logic for the params that are passed\n    return 0 # for successful custom validations\n\ndef process_event(helper, *args, **kwargs):\n    if not my_custom_validation(helper):\n        return 3\n\n    helper.log_info(\"Alert action test_alert started.\")\n    # TODO: Implement your alert action logic here\n\n\n    # if clean execution, return 0, \n    # else non-zero number\n    return 0\n</code></pre> <p>This function then can have validations and the alert action logic required for your add-on. The preliminary check for required field validations is already provided by the UCC framework. However, if you have any other validations or pre-checks, you can call that function from <code>process_event()</code>. The <code>helper</code> variable would be an object of <code>splunktaucclib.alert_actions_base.ModularAlertBase</code> class. This script would be then be copied to <code>output/</code> directory after you execute the <code>ucc-gen</code> command.</p>"},{"location":"configurations/","title":"Configuration","text":"<p>The <code>Configuration</code> tab can have multiple subtabs, for example, a tab for account configuration (to configure the account by adding account credentials), proxy configuration, and logging level configuration.</p>"},{"location":"configurations/#configuration-properties","title":"Configuration Properties","text":"Property Type Description title* string - description string To provide a brief summary of an configuration page. subDescription object To provide broader description of an configuration page tabs* array To specify a list of tab. capabilities object Specifies the capabilities required for the given methods. The provided capabilities will be generated in restmap.conf. For more information, refer to the Splunk documentation on restmap.conf."},{"location":"configurations/#tabs-properties","title":"Tabs properties","text":"Property Type Description name* string To define the particular tab name. title* string To show the title of the tab. entity* array A list of fields and their properties. groups array It is used to divide forms into distinct sections, each comprising relevant fields. table object To display accounts stanza in table style string By specifying this property in the global config file, the forms can either be opened as a new page or in a dialog. Supported values are \u201cpage\u201d or \u201cdialog\u201d.  Default value is dialog. options object This property allows you to enable the saveValidator feature. hook object It is used to add custom behaviour to forms. Visit the Custom Hook page to learn more. warning object It is used to add custom warning message for each of modes (\u2018create\u2019, \u2018edit\u2019, \u2018config\u2019, \u2018clone\u2019), message is displayed on form conf string Configuration name for a rest handler. restHandlerName string It specify name of the REST handler script, that provides fields, models and validators for the fields supported under the specified input and any specific actions to be performed on CRUD operations for the given input. (Do NOT use with restHandlerModule or restHandlerClass) restHandlerModule string It specify name of the REST handler script that implements the custom actions to be performed on CRUD operations for the given input. (Use with restHandlerClass) restHandlerClass string It specify name of the class present in the restHandlerModule, which implements methods like handleCreate, handleEdit, handleList, handleDelete and is child class of splunktaucclib.rest_handler.admin_external.AdminExternalHandler. (Use with restHandlerModule) customTab Object This property allows you to enable the custom tab feature. hideForPlatform string Defines for which platform element should be hidden from UI perspective. Currently only two platforms are supported <code>cloud</code> or <code>enterprise</code>. formTitle string When provided, the <code>formTitle</code> parameter will override the default modal title format of <code>\"Add selectedTab\"</code>. The modal will display <code>Add</code> followed by the value of formTitle, allowing for a custom, context-specific title. This customization also applies to modals for <code>Clone</code>, <code>Edit</code>, and <code>Delete</code> actions."},{"location":"configurations/#tab-components","title":"Tab components","text":"<p>Instead of specifying a tab from scratch with above fields, you can add a predefined tab.</p> <p>Currently available tab components:</p> <ul> <li>Logging tab</li> <li>Proxy tab</li> </ul>"},{"location":"configurations/#usage","title":"Usage","text":"<pre><code>\"configuration\": {\n    \"title\": \"Configuration\",\n    \"description\": \"Set up your add-on\",\n    \"tabs\": [\n        {\n            \"name\": \"account\",\n            \"title\": \"Account\",\n            \"table\": {},\n            \"entity\": []\n        },\n        {\n            \"type\": \"proxyTab\",\n             \"warning\": {\n                \"config\": {\n                    \"message\": \"Some warning message\"\n                }\n            },\n            \"proxy_type\": true,\n            \"username\": true,\n            \"password\": true,\n            \"dns_resolution\": true\n        },\n        {\n            \"type\": \"loggingTab\"\n        }\n    ],\n    \"capabilities\": {\n        \"put\": \"admin_all_objects\",\n        \"post\": \"list_storage_passwords\"\n    }\n}\n</code></pre> <p>Note: The example above creates a Configuration page with an empty Account tab. Specify your properties in <code>\"table\"</code> and <code>\"entity\"</code>.</p>"},{"location":"configurations/#output","title":"Output","text":"<p>This is how table looks in the UI:</p> <p></p> <p>This is how Proxy tab looks in the UI:</p> <p></p> <p>More information about how to set Proxy tab, can be found here.</p> <p>This is how custom header look in the UI:</p>"},{"location":"configurations/logging/","title":"Logging","text":"<p>The logging tab is a predefined component that allows to create the page for changing the log level. It is added in the <code>pages.configuration.tabs</code> array</p> <p></p>"},{"location":"configurations/logging/#minimal-definition","title":"Minimal definition","text":"<pre><code>{\n  \"type\": \"loggingTab\"\n}\n</code></pre> <p>This creates the tab seen in the image above with log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL. INFO is the default level. The value is saved in <code>loglevel</code> config parameter.</p>"},{"location":"configurations/logging/#usage","title":"Usage","text":"<p>It is placed just like every other configuration tab.</p> <pre><code>{\n    \"pages\": {\n        \"configuration\": {\n            \"tabs\": [\n              {\n                \"type\": \"loggingTab\"\n              }\n            ],\n            \"title\": \"Configuration\",\n            \"description\": \"...\"\n        }\n    }\n}\n</code></pre>"},{"location":"configurations/logging/#optional-fields","title":"Optional Fields","text":"Field Name Description name Tab name. Default is <code>logging</code> title Tab title. Default is <code>Logging</code> label Label text displayed next to the log level dropdown. Default is <code>Log level</code> field Configuration field name. Default is <code>loglevel</code> levels List of all possible log levels. Default is <code>[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]</code> defaultLevel Default log level at the beginning. Default is <code>INFO</code> help It is displayed directly below the input field. By default it is not shown."},{"location":"configurations/logging/#example","title":"Example","text":"<pre><code>{\n    \"type\": \"loggingTab\",\n    \"name\": \"logging_other\",\n    \"title\": \"Logging other\",\n    \"label\": \"Log level\",\n    \"field\": \"loglevel\",\n    \"levels\": [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"],\n    \"defaultLevel\": \"INFO\",\n    \"help\": \"The logging level you want to use\"\n}\n</code></pre>"},{"location":"configurations/proxy/","title":"Proxy","text":"<p>The Proxy tab is a predefined component that allows to create a proxy tab with default configurations. It is added in the <code>pages.configuration.tabs</code> array</p> <p></p>"},{"location":"configurations/proxy/#minimal-definition","title":"Minimal definition","text":"<pre><code>{\n  \"type\": \"proxyTab\"\n}\n</code></pre> <p>This creates the tab seen in the image above with 3 default entities that are <code>Enable</code> (checkbox for enabling proxy), <code>Host</code> (proxy host) and <code>Port</code> (proxy port).</p>"},{"location":"configurations/proxy/#available-configurations","title":"Available configurations","text":"<p>Below are the available properties that can be used while configuring <code>proxy</code>. Properties like <code>name</code>, <code>title</code>, <code>enable proxy</code>, <code>host</code> and <code>port</code> are auto generated (if minimal defination of proxy is provided).</p> <ul> <li>Name (auto generated):</li> </ul> <pre><code>proxy\n</code></pre> <ul> <li>Title (auto generated):</li> </ul> <pre><code>Proxy\n</code></pre> <ul> <li>Enable proxy (auto generated) :</li> </ul> <pre><code>{\n    \"type\": \"checkbox\", \n    \"label\": \"Enable\",\n    \"field\": \"proxy_enabled\"\n}\n</code></pre> <ul> <li>Proxy type :</li> </ul> <pre><code>{\n    \"type\": \"singleSelect\",\n    \"label\": \"Proxy Type\",\n    \"required\": false,\n    \"options\": {\n        \"disableSearch\": true,\n        \"autoCompleteFields\": [\n            {\"value\": \"http\", \"label\": \"http\"},\n            {\"value\": \"socks4\", \"label\": \"socks4\"},\n            {\"value\": \"socks5\", \"label\": \"socks5\"},\n        ],\n    },\n    \"defaultValue\": \"http\",\n    \"field\": \"proxy_type\",\n}\n</code></pre> <ul> <li>Host (auto generated) :</li> </ul> <pre><code>{\n    \"type\": \"text\",\n    \"label\": \"Host\",\n    \"validators\": [\n        {\n            \"type\": \"string\",\n            \"errorMsg\": \"Max host length is 4096\",\n            \"minLength\": 1,\n            \"maxLength\": 4096,\n        },\n        {\n            \"type\": \"regex\",\n            \"errorMsg\": \"Proxy Host should not have special characters\",\n            \"pattern\": \"^[a-zA-Z]\\\\w*$\",\n        },\n    ],\n    \"field\": \"proxy_url\",\n    \"required\": true\n}\n</code></pre> <ul> <li>Port (auto generated) :</li> </ul> <pre><code>{\n    \"type\": \"text\",\n    \"label\": \"Port\",\n    \"validators\": [{\"type\": \"number\", \"range\": [1, 65535], \"isInteger\": true}],\n    \"field\": \"proxy_port\",\n    \"required\": true\n}\n</code></pre> <ul> <li>Username :</li> </ul> <pre><code>{\n    \"type\": \"text\",\n    \"label\": \"Username\",\n    \"validators\": [\n        {\n            \"type\": \"string\",\n            \"errorMsg\": \"Max length of username is 50\",\n            \"minLength\": 0,\n            \"maxLength\": 50,\n        }\n    ],\n    \"field\": \"proxy_username\",\n}\n</code></pre> <ul> <li>Password :</li> </ul> <pre><code>{\n    \"type\": \"text\",\n    \"label\": \"Password\",\n    \"validators\": [\n        {\n            \"type\": \"string\",\n            \"errorMsg\": \"Max length of password is 8192\",\n            \"minLength\": 0,\n            \"maxLength\": 8192,\n        }\n    ],\n    \"encrypted\": true,\n    \"field\": \"proxy_password\",\n}\n</code></pre> <ul> <li>DNS Resolution checkbox :</li> </ul> <pre><code>{\n    \"type\": \"checkbox\",\n    \"label\": \"DNS resolution\",\n    \"field\": \"proxy_rdns\",\n}\n</code></pre> <p>When only <code>\"type\": \"proxyTab\"</code> is specified in the globalConfig file, the following entities will be generated by default <code>host</code>, <code>port</code>, <code>enable proxy</code>.</p> <p>Entities such as <code>proxy_type</code>, <code>username</code>, <code>password</code>, and <code>dns_resolution</code> will not be included by default. To include these optional entities in your add-on, you must explicitly set them to <code>True</code> in your configuration. For details on available configurations, refer to the available configurations section.</p>"},{"location":"configurations/proxy/#usage","title":"Usage","text":"<p>It is placed just like every other configuration tab.</p> <pre><code>{\n    \"pages\": {\n        \"configuration\": {\n            \"tabs\": [\n              {\n                \"type\": \"proxyTab\"\n              }\n            ],\n            \"title\": \"Configuration\",\n            \"description\": \"...\"\n        }\n    }\n}\n</code></pre> <p>To customize these default configurations, you can define them in JSON format by specifying certain keys unique to each entity (refer the keys section for details on the required keys for each entity). When creating the JSON, you only need to include the values you want to customize. For example, if you don\u2019t need to modify fields like <code>lable</code> or <code>field</code>, you can skip including them in your globalConfig.  For better understanding, refer to the provided Example which demonstrates how to apply customizations effectively.</p> <p>NOTE:     There are 2 ways to exclude optional entities in your add-on, either omit them from the proxy tab, or set the entities to false.</p>"},{"location":"configurations/proxy/#keys","title":"Keys","text":"Key Name Description name Name of the proxy title Title of proxy tab enable_proxy Whether proxy should be enabled proxy_type Type of Proxy communication protocols supported. Default: <code>SOCKS4</code>, <code>SOCKS5</code>, <code>HTTP</code> host Hostname (FQDN, IPv6 or IPv4) of the Proxy server port Port of the Proxy server that accepts the connection username Username used to authenticate the access to Proxy Server password Password for the provided username to authenticate access to Proxy Server dns_resolution Whether DNS resolution should be done by Proxy server or not"},{"location":"configurations/proxy/#example","title":"Example","text":"<pre><code>{\n   \"type\": \"proxyTab\",\n   \"name\": \"custom_proxy\",\n   \"warning\": {\n        \"config\": {\n        \"message\": \"Some warning message\"\n        }\n    },\n   \"port\": {\n       \"label\": \"Proxy port\",\n       \"validators\": [\n           {\n               \"type\": \"number\",\n               \"range\": [\n                   1025,\n                   65535\n               ],\n               \"isInteger\": true\n           }\n       ]\n   },\n   \"username\": true,\n   \"password\": {\n       \"label\": \"Password for Proxy\"\n   },\n   \"dns_resolution\": false,\n}\n</code></pre> <p>The above will get converted to the older definition (mentioned below) in your output directory.</p> <p></p> <pre><code>{\n        \"name\": \"custom_proxy\",\n        \"title\": \"Proxy\",\n        \"entity\": [\n            {\"type\": \"checkbox\", \"label\": \"Enable\", \"field\": \"proxy_enabled\"},\n            {\n                \"type\": \"text\",\n                \"label\": \"Host\",\n                \"validators\": [\n                    {\n                        \"type\": \"string\",\n                        \"errorMsg\": \"Max host length is 4096\",\n                        \"minLength\": 1,\n                        \"maxLength\": 4096,\n                    },\n                    {\n                        \"type\": \"regex\",\n                        \"errorMsg\": \"Proxy Host should not have special characters\",\n                        \"pattern\": \"^[a-zA-Z]\\\\w*$\",\n                    },\n                ],\n                \"field\": \"proxy_url\",\n                \"required\": True,\n            },\n            {\n                \"label\": \"Proxy port\",\n                \"validators\": [\n                    {\"type\": \"number\", \"range\": [1025, 65535], \"isInteger\": True}\n                ],\n                \"type\": \"text\",\n                \"field\": \"proxy_port\",\n                \"required\": True,\n            },\n            {\n                \"type\": \"text\",\n                \"label\": \"Username\",\n                \"validators\": [\n                    {\n                        \"type\": \"string\",\n                        \"errorMsg\": \"Max length of username is 50\",\n                        \"minLength\": 0,\n                        \"maxLength\": 50,\n                    }\n                ],\n                \"field\": \"proxy_username\",\n            },\n            {\n                \"label\": \"Password for Proxy\",\n                \"type\": \"text\",\n                \"validators\": [\n                    {\n                        \"type\": \"string\",\n                        \"errorMsg\": \"Max length of password is 8192\",\n                        \"minLength\": 0,\n                        \"maxLength\": 8192,\n                    }\n                ],\n                \"encrypted\": True,\n                \"field\": \"proxy_password\",\n            },\n        ],\n        \"warning\": {\"config\": {\"message\": \"Some warning message\"}},\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_cell_context/","title":"Custom Cell","text":"<p>A Custom Cell is used to update the content of a table cell.</p> <p><code>customCell</code> attribute will be used in the table header on the inputs and configuration page.</p>"},{"location":"custom_ui_extensions/context/custom_cell_context/#properties","title":"Properties","text":"Property Description globalConfig is a hierarchical object that contains the globalConfig file\u2019s properties and values. el is used to render a custom cell element in a table. serviceName is the name of the service/tab specified in the globalConfig file. row is the object of the record for which the CustomRowInput constructor is called. field is the name of the field as specified in the globalConfig file."},{"location":"custom_ui_extensions/context/custom_cell_context/#methods","title":"Methods","text":"Property Description render is a method which should have logic for the custom cell component, and it will be executed automatically when the create, edit, or clone actions performed."},{"location":"custom_ui_extensions/context/custom_cell_context/#usage","title":"Usage","text":"<p>Modify files accordingly:</p>"},{"location":"custom_ui_extensions/context/custom_cell_context/#globalconfigjson","title":"globalConfig.json","text":"<pre><code>{\n    \"name\": \"account\",\n    \"title\": \"Account\",\n    \"entity\": [],\n    \"table\": {\n        \"actions\": [\"edit\", \"delete\", \"clone\"],\n        \"header\": [{\n            \"label\": \"Name\",\n            \"field\": \"name\"\n        }, {\n            \"label\": \"Auth Type\",\n            \"field\": \"auth_type\"\n        }, {\n            \"label\": \"Test Custom Cell\",\n            \"field\": \"test_custom_cell\",\n            \"customCell\": {\n                \"src\": \"CustomInputCell\",\n                \"type\": \"external\"\n            }\n        }]\n    }\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_cell_context/#component-example","title":"Component Example","text":"<p>Index.tsx</p> <pre><code>import React from \"react\";\nimport { CustomCellBase, GlobalConfig, RowDataFields } from \"@splunk/add-on-ucc-framework\";\nimport ReactDOM from \"react-dom\";\n\nconst CustomDateInput = React.lazy(() =&gt; import(\"./AdvancedCell.tsx\"));\n\nexport default class AdvancedCellClass extends CustomCellBase {\n  constructor(\n    globalConfig: GlobalConfig,\n    serviceName: string,\n    el: HTMLElement,\n    row: RowDataFields,\n    field: string\n  ) {\n    super(globalConfig, serviceName, el, row, field);\n  }\n\n  render() {\n    ReactDOM.render(\n      &lt;React.Suspense fallback={&lt;div&gt;Loading ...&lt;/div&gt;}&gt;\n        &lt;CustomDateInput value={this.row.account_multiple_select} /&gt;\n      &lt;/React.Suspense&gt;,\n      this.el\n    );\n  }\n}\n</code></pre> <p>AdvancedCell.tsx</p> <pre><code>import React from \"react\";\nimport { AcceptableFormValueOrNull } from \".\";\nimport { SplunkThemeProvider } from \"@splunk/themes\";\n\nexport const AdvancedCell = ({\n  value,\n}: {\n  value: AcceptableFormValueOrNull;\n}) =&gt; {\n  return (\n    &lt;SplunkThemeProvider&gt;\n      &lt;div&gt;\n        {value === null || value === undefined || value === \"\" ? (\n          &lt;span&gt;No value&lt;/span&gt;\n        ) : (\n          &lt;span&gt;{String(value)}&lt;/span&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/SplunkThemeProvider&gt;\n  );\n};\n\nexport default AdvancedCell;\n</code></pre> <p>ucc-ui.ts</p> <pre><code>import { uccInit } from \"@splunk/add-on-ucc-framework\";\nimport AdvancedCellClass from \"./ucc-ui-extensions/AdvancedCell\";\n\nuccInit({\n  AdvancedInputsTab: {\n    component: AdvancedCellClass,\n    type: \"cell\",\n  },\n}).catch((error) =&gt; {\n  console.error(\"Could not load UCC\", error);\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_control_context/","title":"Custom Control","text":"<p>The Custom Control feature allows you to display any customised input component in a form. The developer can easily design and render any complex input component with this feature. Modern add-ons frequently require the use of complex input components, and this feature will allow you to use the custom component in the form that is best suited to your needs, without relying on newer releases of UCC for support.</p>"},{"location":"custom_ui_extensions/context/custom_control_context/#properties","title":"Properties","text":"Property Description globalConfig It is a hierarchical object that contains the globalConfig file\u2019s properties and values. el The <code>el</code> is used to render a custom input element in a form. data The <code>data</code> object holds details regarding the execution: <li>mode - one of create, edit, clone, or config. Defines state of entity form.</li><li>value - value of the field,</li><li>serviceName - name of service where this custom component is being rendered.</li> setValue This method is used to set the value of the custom component. Usage: <code>setValue(newValue)</code> util This is a utility object with various functions that can be used to manipulate the UI. There are 4 associated methods: <ul><li><code>clearAllErrorMsg</code> - removes errors from form logic. Visual aspects wont be reflected until form state update. Message stays until next state update.Usage</li><li><code>setErrorFieldMsg</code> - sets up error message for any field. Message displayed on top of form and incorrect field marked red (you can pass even custom field value). Message stays until next state update.Usage</li><li><code>setErrorMsg</code> - sets error message for current custom field, does not mark this field visually.Usage</li><li><code>setState</code> - handles current state update. Usage</li></ul>"},{"location":"custom_ui_extensions/context/custom_control_context/#methods","title":"Methods","text":"Property Description render is a method which should have logic for the custom component, and it will be executed automatically when the create, edit, or clone actions are performed. validation This method should contain the validation logic for the value of the custom component."},{"location":"custom_ui_extensions/context/custom_control_context/#usage","title":"Usage","text":"<pre><code>{\n    \"name\": \"account\",\n    \"table\": {},\n    \"entity\": [\n        {\n            \"type\": \"custom\",\n            \"label\": \"Example Custom Control\",\n            \"field\": \"custom_control_field\",\n            \"help\": \"This is an example multipleSelect for account entity\",\n            \"options\":{\n                \"src\": \"custom_control\",\n                \"type\": \"external\"\n            },\n            \"required\": true\n        },\n        {\n            \"type\": \"text\",\n            \"label\": \"Name\",\n            \"field\": \"name\",\n            \"help\": \"Enter a unique name for this account.\",\n            \"required\": true\n        },\n    ]\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_control_context/#example","title":"Example","text":"<p>index.tsx</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CustomControlBase } from \"@splunk/add-on-ucc-framework\";\nimport { DateChangeHandler } from \"@splunk/react-ui/Date\";\n\nconst CustomDateInput = React.lazy(() =&gt; import(\"./DateInput\"));\n\nexport default class DateInputClass extends CustomControlBase {\n  onDateChange: DateChangeHandler = (_event, data) =&gt; {\n    this.setValue(data.value);\n  };\n\n  render() {\n    const dateValue = this.data.value;\n    const date =\n      typeof dateValue === \"string\" &amp;&amp; dateValue.length !== 0\n        ? dateValue\n        : undefined;\n\n    ReactDOM.render(\n      &lt;React.Suspense fallback={&lt;div&gt;&lt;/div&gt;}&gt;\n        &lt;CustomDateInput value={date} onChange={this.onDateChange} /&gt;\n      &lt;/React.Suspense&gt;,\n      this.el,\n    );\n  }\n}\n</code></pre> <p>DateInput.tsx</p> <pre><code>import React from \"react\";\nimport DateSuiInput, { DateChangeHandler } from \"@splunk/react-ui/Date\";\n\nfunction DateInput(props: { value?: string; onChange: DateChangeHandler }) {\n  const today = props.value ?? new Date().toISOString().split(\"T\")[0];\n\n  return &lt;DateSuiInput defaultValue={today} onChange={props.onChange} /&gt;;\n}\n\nexport default DateInput;\n</code></pre> <p>ucc-ui.tsx</p> <pre><code>import { uccInit } from \"@splunk/add-on-ucc-framework\";\nimport DateInputClass from \"./ucc-ui-extensions/DateInput\";\n\nuccInit({\n  DateInput: {\n    component: DateInputClass,\n    type: \"control\",\n  },\n}).catch((error) =&gt; {\n  console.error(\"Could not load UCC\", error);\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_control_context/#properties-usage","title":"Properties usage","text":""},{"location":"custom_ui_extensions/context/custom_control_context/#clearallerrormsg","title":"clearAllErrorMsg","text":"<pre><code>this.util.clearAllErrorMsg(newState) // newState is updated form state\n</code></pre> <p>or</p> <pre><code>this.util.clearAllErrorMsg()\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_control_context/#seterrorfieldmsg","title":"setErrorFieldMsg","text":"<pre><code>this.util.setErrorFieldMsg('customFieldKey', 'Custom Field was filed incorrectly')\n</code></pre> <pre><code>this.util.setErrorFieldMsg('otherFieldValue', 'Due to custom field changes, action on otherFieldValue is required')\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_control_context/#seterrormsg","title":"setErrorMsg","text":"<pre><code>this.util.setErrorMsg('New Error message for current custom field.')\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_control_context/#setstate","title":"setState","text":"<pre><code>this.util.setState((oldState) =&gt; {\n    const newState = {...oldState}\n    newState.data.fieldKey = newFieldValue;\n    return newState\n})\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_hook_context/","title":"Custom Hook","text":"<p>Custom Hook is a JavaScript function that allows us to reuse some code throughout the app. It is used to validate form/dialog inputs.</p> <p>Hook is nothing more than a Javascript event handling on the events <code>onCreate</code>, <code>onChange</code>, <code>onRender</code>, <code>onSave</code>, <code>onSaveSuccess</code>, <code>onSaveFail</code>, and <code>onEditLoad</code>.</p> <p>Hooks can be used inside the services and tabs that are placed next to the entity tag.</p> <p>The <code>type</code> key needs to be set as external to webpack the custom extensions. UCC  expects scripts marked as external to follow the ESM syntax for exporting and importing modules. Aditionally, the custom javascript file and the imported modules will not get webpack-ed.</p>"},{"location":"custom_ui_extensions/context/custom_hook_context/#properties","title":"Properties","text":"Property Description globalConfig It is a hierarchical object that contains the globalConfig file\u2019s properties and values. serviceName It is the name of the service/tab specified in the globalConfig. state <code>state</code> is an object that represents the actual state value of the components in the service/tab when the hook\u2019s constructor is called. Updating this object will not update the state of the page. Use the <code>util.setState</code> method to update the page\u2019s state. The <code>state</code> object contains the actual state data along with the  <code>errorMsg</code> and <code>warningMsg</code> properties. mode There are three possible modes: Edit, Clone, and Delete. These are used in service/tab components. util This is a utility object with various functions that can be used to manipulate the page UI. There are 4 associated methods: <ul><li><code>clearAllErrorMsg</code>: \u0192 (State)</li><li><code>setErrorFieldMsg</code>: \u0192 (field, msg)</li><li><code>setErrorMsg</code>: \u0192 (msg)</li><li><code>setState</code>: \u0192 setState(callback)</li></ul> groupName The name of the menu group from which the inputs service is called. This parameter should only be used with the multi-level menu feature."},{"location":"custom_ui_extensions/context/custom_hook_context/#methods","title":"Methods","text":"<p>We can use these methods to override existing methods according to the desired functionality:</p> Property Description onCreate is called when we click on the \u201cAdd/Create\u201d button to create a new record on the page. debounce is used to create another special method which does not get executed on every call. This functionality can be useful when listening for an event. <p>For Example, if you might want to show the help text/error when the user has stopped typing for 500ms in a text-box, instead of every key press.  In this scenario, the debounce method will induce a time wait every time a key is pressed and the method will only execute when there is no other call to it within that wait time.</p> onChange is called when the value of any field is changed. onRender is called once whenever the user clicks on an \u201cAdd\u201d, \u201cEdit\u201d, or \u201cClone\u201d button. onSave is called when the user clicks the \u201cSave\u201d button after creating, editing, or cloning a record. onSaveSuccess is called when a record has been successfully saved. onSaveFail is called when a record fails to save due to any error. onEditLoad is called when the user clicks on an \u201cEdit\u201d button for an existing record."},{"location":"custom_ui_extensions/context/custom_hook_context/#usage","title":"Usage","text":"<pre><code>{\n  \"inputs\": {\n    \"title\": \"Inputs\",\n    \"description\": \"Manage your data inputs\",\n    \"services\": [\n      {\n        \"name\": \"example_input_one\",\n        \"title\": \"Example Input One\",\n        \"hook\": {\n          \"src\": \"input_hook\",\n          \"type\": \"external\"\n        },\n        \"entity\": []\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_hook_context/#example","title":"Example","text":"<p>index.tsx</p> <pre><code>import {\n  BaseFormState,\n  CustomHookBase,\n  GlobalConfig,\n  Mode,\n  NullishFormRecord,\n  UtilBaseForm,\n} from \"@splunk/add-on-ucc-framework\";\nimport { AcceptableFormValueOrNullish } from \"../AdvancedCell\";\n\nexport default class AdvancedHook extends CustomHookBase {\n  debouncedNameChange: (...args: unknown[]) =&gt; void;\n\n  constructor(\n    globalConfig: GlobalConfig,\n    serviceName: string,\n    state: BaseFormState,\n    mode: Mode,\n    util: UtilBaseForm,\n    groupName?: string\n  ) {\n    super(globalConfig, serviceName, state, mode, util, groupName);\n\n    this.globalConfig = globalConfig;\n    this.serviceName = serviceName;\n    this.state = state;\n    this.mode = mode;\n    this.util = util;\n    this.groupName = groupName;\n\n    this.debouncedNameChange = this.debounce(this.nameChange.bind(this), 200);\n  }\n\n  debounce(func: Function, wait: number) {\n    let timeout: ReturnType&lt;typeof setTimeout&gt;;\n    // This is the function that is returned and will be executed many times\n    // We spread (...args) to capture any number of parameters we want to pass\n    return function executedFunction(...args: unknown[]) {\n      // The callback function to be executed after\n      // the debounce time has elapsed\n      // This will reset the waiting every function execution.\n      // This is the step that prevents the function from\n      // being executed because it will never reach the\n      // inside of the previous setTimeout\n      clearTimeout(timeout);\n\n      // Restart the debounce waiting period.\n      // setTimeout returns a truthy value\n      timeout = setTimeout(() =&gt; {\n        func(...args);\n      }, wait);\n    };\n  }\n\n  onCreate() {\n    if (this.mode == \"create\") {\n      console.log(\"in Hook: onCreate\");\n      // This is an example of how to store groupName value for a particular form field.\n      this.util.setState((prevState) =&gt; {\n        let data = { ...prevState.data };\n        data.test_field.value = this.groupName;\n        return { data };\n      });\n    }\n  }\n\n  onChange(\n    field: string,\n    value: AcceptableFormValueOrNullish,\n    dataDict: BaseFormState\n  ) {\n    console.log(\"in Hook: onChange \", field, \" value : \", value);\n    console.log(\"in Hook: onChange state: \", this.state);\n    if (field === \"name\") {\n      this.debouncedNameChange(dataDict);\n    }\n  }\n\n  onRender() {\n    console.log(\"in Hook: onRender\");\n  }\n\n  /* \n        Put form validation logic here.\n        Return true if validation pass, false otherwise.\n        Call displayErrorMsg when validation failed.\n    */\n  onSave(dataDict: NullishFormRecord) {\n    console.log(\"in Hook: onSave with data: \", dataDict);\n    var accountname = dataDict.name;\n    var auth_type = dataDict.auth_type;\n    var endpoint = dataDict.url;\n\n    this.util.setState((prevState) =&gt; {\n      /*\n            Example usage of util.clearAllErrorMsg. It just returns the modified state object after clearing the error messages.\n            It won't update the UI.\n            */\n      let new_state = this.util.clearAllErrorMsg(prevState);\n      return new_state;\n    });\n\n    if (\n      accountname === null ||\n      (typeof accountname === \"string\" &amp;&amp; accountname.trim().length === 0)\n    ) {\n      var msg = \"Field account name is required\";\n      this.util.setErrorMsg(msg);\n      return false;\n    } else if (\n      endpoint === null ||\n      (typeof endpoint === \"string\" &amp;&amp; endpoint.trim().length === 0)\n    ) {\n      var msg = \"Field URL is required\";\n      this.util.setErrorMsg(msg);\n      return false;\n    } else if (\n      typeof endpoint === \"string\" &amp;&amp;\n      endpoint.indexOf(\"https://\") !== 0\n    ) {\n      var msg =\n        \"URL should start with 'https://' as only secure URLs are supported.\";\n      this.util.setErrorFieldMsg(\"url\", msg);\n      return false;\n    } else if (typeof endpoint === \"string\" &amp;&amp; auth_type == \"oauth\") {\n      endpoint = endpoint.replace(\"https://\", \"\"); //removing the https schema from the endpoint\n      this.util.setState((prevState) =&gt; {\n        let data = { ...prevState.data };\n        data.endpoint.value = endpoint;\n        return { data };\n      });\n    }\n    return true;\n  }\n\n  onSaveSuccess() {\n    console.log(\"in Hook: onSaveSuccess\");\n  }\n\n  onSaveFail() {\n    console.log(\"in Hook: onSaveFail\");\n  }\n\n  /*\n    Put logic here to execute javascript after loading edit UI.\n    */\n  onEditLoad() {\n    console.log(\"in Hook: onEditLoad\");\n  }\n\n  nameChange(dataDict: BaseFormState) {\n    console.log(\"in Hook: nameChange dataDict\", dataDict);\n  }\n}\n</code></pre> <p>ucc-ui.tsx</p> <pre><code>import { uccInit } from \"@splunk/add-on-ucc-framework\";\nimport AdvancedHook from \"./ucc-ui-extensions/AdvancedHook\";\n\nuccInit({\n  AdvancedHook: {\n    component: AdvancedHook,\n    type: \"hook\",\n  },\n}).catch((error) =&gt; {\n  console.error(\"Could not load UCC\", error);\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_project_init/","title":"UI Sub-Project Setup Guide","text":"<p>This guide outlines the recommended steps and configuration for initializing a UI sub-project as part of a Splunk Technology Add-on (TA), using the Unified Configuration Console (UCC) framework.</p>"},{"location":"custom_ui_extensions/context/custom_project_init/#prerequisites","title":"Prerequisites","text":"<p>Ensure the following are installed on your system:</p> <ul> <li>Node.js (version \u2265 22)</li> <li>npm (version \u2265 10)</li> </ul>"},{"location":"custom_ui_extensions/context/custom_project_init/#step-1-initialize-the-ui-sub-project","title":"Step 1: Initialize the UI Sub-Project","text":"<p>Run the following commands to create a new Node.js project and configure TypeScript:</p> <pre><code>npm init -y\nnpm install --save-dev typescript\nnpx tsc --init\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_project_init/#step-2-configure-project-files","title":"Step 2: Configure Project Files","text":"<p>After initializing the project, you need to configure essential project files such as tsconfig.json and package.json. These configurations ensure compatibility with TypeScript, React, and the UCC framework used for Splunk TA development.</p> <p>Below are the recommended contents for these files.</p>"},{"location":"custom_ui_extensions/context/custom_project_init/#tsconfigjson","title":"tsconfig.json","text":"tsconfig.json  <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es2016\", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\n    \"jsx\": \"react\", /* Specify what JSX code is generated. */\n\n    /* Modules */\n    \"module\": \"commonjs\", /* Specify what module code is generated. */\n    \"allowImportingTsExtensions\": true, /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */\n\n    /* Emit */\n    \"noEmit\": true, /* Disable emitting files from a compilation. */\n\n    /* Interop Constraints */\n    \"esModuleInterop\": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */\n    \"forceConsistentCasingInFileNames\": true, /* Ensure that casing is correct in imports. */\n\n    /* Type Checking */\n    \"strict\": true, /* Enable all strict type-checking options. */\n    \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */\n    \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */\n    \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */\n\n    /* Completeness */\n    \"skipLibCheck\": true /* Skip type checking all .d.ts files. */\n  }\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_project_init/#packagejson","title":"package.json","text":"<p>Note: In the \u201cscripts\u201d section of package.json, update the placeholder Splunk_TA_Name to match the exact name of your Splunk Technology Add-on (TA) project.</p> package.json  <pre><code>{\n  \"name\": \"ui\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"ucc-gen-ui ta_name=Splunk_TA_Name init_file_dir=src/ucc-ui.ts\"\n  },\n  \"dependencies\": {\n    \"@splunk/add-on-ucc-framework\": \"^5.65.0\",\n    \"@splunk/react-ui\": \"^4.42.0\",\n    \"@splunk/splunk-utils\": \"^3.1.0\",\n    \"@splunk/themes\": \"^0.23.0\",\n    \"react\": \"16.14.0\",\n    \"react-dom\": \"16.14.0\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.20.0\",\n    \"@types/node\": \"^22.13.1\",\n    \"@types/react\": \"16.14.62\",\n    \"@types/react-dom\": \"16.9.25\",\n    \"typescript\": \"^5.8.2\"\n  },\n  \"overrides\": {\n    \"react\": \"16.14.0\",\n    \"react-dom\": \"16.14.0\",\n    \"@types/react\": \"16.14.62\",\n    \"@types/react-dom\": \"16.9.25\"\n  },\n  \"engines\": {\n    \"node\": \"&gt;=22\",\n    \"npm\": \"&gt;=10\"\n  }\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_project_init/#additionally","title":"Additionally","text":"<p>We also recommend using the <code>--build-custom-ui</code> flag with the ucc-gen build command, which automatically triggers the UI build process (if you use the default build name for building command).</p> <p>Alternatively, you can do the following code adaptations.</p> <ol> <li> <p>To avoid committing large files or unnecessary dependencies, add the following line to your <code>.gitignore</code> file: <code>ui/node_modules/</code></p> </li> <li> <p>Add following script to <code>additional_packaging.py</code>. Thanks to that during building process you do not need to enter UI filder manually inside job.</p> </li> </ol> additional_packaging.py  <pre><code>import os\nfrom os import path\n\n\ndef additional_packaging(addon_name: str) -&gt; None:\n    build_ui_script = os.path.join(\n        os.path.dirname(os.path.realpath(**file**)), \"scripts\", \"build_ui.sh\"\n    )\n    if path.exists(build_ui_script):\n        os.system(f\"chmod +x {build_ui_script}\")\n        return_code = os.system(build_ui_script)\n        if return_code != 0:\n            os._exit(os.WEXITSTATUS(return_code))\n</code></pre> <p>Along with creating <code>build_ui.sh</code> script containing the following code:</p> build_ui.sh  <pre><code># !/bin/bash\n\n# Determine the directory of the script\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &amp;&amp; pwd)\"\n\n# Check if npm is installed\n\nif ! command -v node &amp;&gt; /dev/null\nthen\n    echo \"Node.JS is not installed. Please install Node.JS to continue.\"\n    exit 1\nfi\n\nif [ \"$CI\" = \"true\" ]; then\n    npm --prefix \"$SCRIPT_DIR/../ui\" ci\nelse\n    npm --prefix \"$SCRIPT_DIR/../ui\" install\nfi\n\nnpm --prefix \"$SCRIPT_DIR/../ui\" run build\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_project_init/#step-3-create-entry-file","title":"Step 3: Create entry file","text":"<p>We recommend creating a src subdirectory to organize your project files.</p> <p>Inside src, include an entry file named <code>ucc-ui.ts</code>, along with a directory called <code>ucc-ui-extensions</code> to house all your custom elements.</p> <p>You can create this structure using the following commands:</p> <pre><code>mkdir src\ntouch ./src/ucc-ui.ts\nmkdir ./src/ucc-ui-extensions\n</code></pre> <p>At the beginning fill ucc-ui.ts with following code:</p> <pre><code>import { uccInit } from \"@splunk/add-on-ucc-framework\";\n\nuccInit().catch((error) =&gt; {\n  console.error(\"Could not load UCC\", error);\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_project_init/#step-4-creating-example-component","title":"Step 4: Creating example component","text":"<p>As mentioned for components we recommend to create them inside <code>ucc-ui-extensions</code> folder.</p> <p>As an example we can create AdvancedInputsTabClass as a custom tab component.</p>"},{"location":"custom_ui_extensions/context/custom_project_init/#create-files","title":"Create files","text":"<p>You can create files with following code.</p> <pre><code>mkdir ./src/ucc-ui-extensions/AdvancedInputsTab\ntouch ./src/ucc-ui-extensions/AdvancedInputsTab/index.tsx\ntouch ./src/ucc-ui-extensions/AdvancedInputsTab/AdvancedInputsTab.tsx\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_project_init/#implement-components","title":"Implement Components","text":"<p>As for the example you can fill those files with following code:</p> index.tsx  <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { CustomTabBase } from \"@splunk/add-on-ucc-framework\";\n\nconst CustomAdvancedInputsTab = React.lazy(\n  () =&gt; import(\"./AdvancedInputsTab.tsx\")\n);\n\nexport default class AdvancedInputsTabClass extends CustomTabBase {\n  render(): void {\n    ReactDOM.render(\n      &lt;React.Suspense fallback={&lt;div&gt;&lt;/div&gt;}&gt;\n        &lt;CustomAdvancedInputsTab /&gt;\n      &lt;/React.Suspense&gt;,\n      this.el\n    );\n  }\n}\n</code></pre> AdvancedInputsTab.tsx  <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { CustomTabBase } from \"@splunk/add-on-ucc-framework\";\n\nconst CustomAdvancedInputsTab = React.lazy(\n  () =&gt; import(\"./AdvancedInputsTab.tsx\")\n);\n\nexport default class AdvancedInputsTabClass extends CustomTabBase {\n  render(): void {\n    ReactDOM.render(\n      &lt;React.Suspense fallback={&lt;div&gt;&lt;/div&gt;}&gt;\n        &lt;CustomAdvancedInputsTab /&gt;\n      &lt;/React.Suspense&gt;,\n      this.el\n    );\n  }\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_project_init/#add-to-uccinit","title":"Add to uccInit","text":"<p>After creating custom component last thing to do is to include it in uccInit function.</p> <p>To include it modify ucc-ui.ts file accordingly</p> <pre><code>import { uccInit } from \"@splunk/add-on-ucc-framework\";\nimport AdvancedInputsTabClass from \"./ucc-ui-extensions/AdvancedInputsTab\";\n\nuccInit({\n  AdvancedInputsTab: {\n    component: AdvancedInputsTabClass,\n    type: \"tab\",\n  },\n}).catch((error) =&gt; {\n  console.error(\"Could not load UCC\", error);\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_project_init/#step-5-finish","title":"Step 5: Finish","text":"<p>After completing the previous steps, your custom UI should build correctly into directory located from following method execution (if output param is not defined)</p> <p><code>resolve(uiDir, '../output', TA_NAME, 'appserver/static/js/build');</code></p>"},{"location":"custom_ui_extensions/context/custom_row_context/","title":"Custom Row","text":"<p>When a row is expanded on the Inputs table or Configuration Table, Custom Row is utilized to incorporate a customized element. By clicking on the icon provided on the left side of each row, the input-specific details are displayed.</p>"},{"location":"custom_ui_extensions/context/custom_row_context/#properties","title":"Properties","text":"Property Description globalConfig is a hierarchical object that contains the globalConfig file\u2019s properties and values. el is used to render a customized element on the Inputs table when a row is expanded. serviceName is the name of the service/tab specified in the globalConfig file. row is the object of the record for which the CustomRowInput constructor is called."},{"location":"custom_ui_extensions/context/custom_row_context/#methods","title":"Methods","text":"Property Description render is a method which contains the logic to display the custom row component. This method is automatically executed when the row is expanded getDLRows is a method which contains the logic to update the custom row values, return a key-value pair. <p>Note</p> <ul> <li>Atleast one method should be present</li> <li>If both method is present then the getDLRows method have the high priority.</li> </ul>"},{"location":"custom_ui_extensions/context/custom_row_context/#usage","title":"Usage","text":"<p>globalConfig.json</p> <pre><code>\"inputs\": {\n    \"title\": \"Inputs\",\n    \"description\": \"Manage your data inputs\",\n    \"services\": [],\n    \"table\": {\n        \"actions\": [\"edit\", \"delete\", \"clone\"],\n        \"header\": [],\n        \"customRow\": {\n            \"src\": \"custom_input_row\",\n            \"type\": \"external\"\n        }\n    }\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_row_context/#example","title":"Example","text":"<p>index.tsx</p> <pre><code>import { CustomRowBase, RowDataFields } from \"@splunk/add-on-ucc-framework\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst AdvancedRow = React.lazy(() =&gt; import(\"./AdvancedRow\"));\n\nexport default class AdvancedRowClass extends CustomRowBase {\n  getDLRows(): RowDataFields {\n    return {\n      ...this.row,\n      ...Object.fromEntries(\n        Object.entries(this.row).map(([key, value]) =&gt; [\n          key,\n          key === \"interval\" ? `${value} sec` : value,\n        ])\n      ),\n    };\n  }\n\n  render(): void {\n    ReactDOM.render(\n      &lt;React.Suspense fallback={&lt;div&gt;&lt;/div&gt;}&gt;\n        &lt;AdvancedRow row={this.row} /&gt;\n      &lt;/React.Suspense&gt;,\n      this.el\n    );\n  }\n}\n</code></pre> <p>AdvancedRow.tsx</p> <pre><code>import React from \"react\";\nimport { SplunkThemeProvider } from \"@splunk/themes\";\nimport { RowDataFields } from \"@splunk/add-on-ucc-framework\";\nimport Table from \"@splunk/react-ui/Table\";\n\nexport const AdvancedRow = ({ row }: { row: RowDataFields }) =&gt; {\n  return (\n    &lt;SplunkThemeProvider&gt;\n      &lt;Table.Row&gt;\n        {Object.entries(row).map(([key, value]) =&gt; {\n          // Skip the __toggleShowSpinner field\n          if (key === \"__toggleShowSpinner\") {\n            return null;\n          }\n          // Render each field in a Table.Cell\n          return (\n            &lt;Table.Cell key={key} data-testid={`cell-${key}`}&gt;\n              {typeof value === \"object\" &amp;&amp; value !== null\n                ? JSON.stringify(value)\n                : String(value)}\n            &lt;/Table.Cell&gt;\n          );\n        })}\n      &lt;/Table.Row&gt;\n    &lt;/SplunkThemeProvider&gt;\n  );\n};\n\nexport default AdvancedRow;\n</code></pre> <p>ucc-ui.tsx</p> <pre><code>import { uccInit } from \"@splunk/add-on-ucc-framework\";\nimport AdvancedRow from \"./ucc-ui-extensions/AdvancedRow\";\n\nuccInit({\n  AdvancedRow: {\n    component: AdvancedRow,\n    type: \"row\",\n  },\n}).catch((error) =&gt; {\n  console.error(\"Could not load UCC\", error);\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_tab_context/","title":"Custom Tab","text":"<p>Custom Tab feature can be used to render any customized UI component in the Configuration tabs. With this feature, you can design and render any complex input with ease. This is an advanced feature and can be leveraged with limitless functionalities. Modern add-ons are receiving complex use cases and this feature will allow you to design the UI perfectly for your case without having to depend on newer releases of UCC for support.</p>"},{"location":"custom_ui_extensions/context/custom_tab_context/#properties","title":"Properties","text":"Property Description tab is an object with the properties and values of a custom tab object from the global config file. el is used to render a customized component on the Configuration tabs."},{"location":"custom_ui_extensions/context/custom_tab_context/#methods","title":"Methods","text":"Property Description render is a method which should have logic for the custom component, and it will be executed automatically when the configuration page is rendered."},{"location":"custom_ui_extensions/context/custom_tab_context/#usage","title":"Usage","text":"<pre><code>\"configuration\": {\n    \"title\": \"Configuration\",\n    \"descriptions\": \"Set up your add-on\",\n    \"tabs\": [\n        {\n            \"name\": \"account\",\n            \"title\": \"Account\",\n            \"entity\": [],\n            \"table\": {}\n        },\n        {\n            \"name\": \"logging\",\n            \"title\": \"Logging\",\n            \"entity\": []\n        },\n        {\n            \"name\": \"proxy\",\n            \"title\": \"Proxy\",\n            \"entity\": []\n        },\n        {\n            \"name\": \"custom_tab\",\n            \"title\": \"Customized Tab\",\n            \"customTab\": {\n                \"src\": \"custom_tab\",\n                \"type\": \"external\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_tab_context/#example","title":"Example","text":"<p>index.tsx</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { CustomTabBase } from \"@splunk/add-on-ucc-framework\";\n\nconst CustomAdvancedInputsTab = React.lazy(\n  () =&gt; import(\"./AdvancedInputsTab.tsx\"),\n);\n\nexport default class AdvancedInputsTabClass extends CustomTabBase {\n  render(): void {\n    ReactDOM.render(\n      &lt;React.Suspense fallback={&lt;div&gt;&lt;/div&gt;}&gt;\n        &lt;CustomAdvancedInputsTab /&gt;\n      &lt;/React.Suspense&gt;,\n      this.el,\n    );\n  }\n}\n</code></pre> <p>AdvancedInputsTab.tsx</p> <pre><code>import React from \"react\";\nimport Table from \"@splunk/react-ui/Table\";\nimport { SplunkThemeProvider } from \"@splunk/themes\";\n\nimport Message from \"@splunk/react-ui/Message\";\n\nexport function AdvancedInputsTab() {\n  const { data, error } = {\n    error: { message: \"No data\" },\n    data: { entry: [] },\n  }; // Replace with actual data fetching logic\n\n  const inputs = data?.entry;\n\n  return (\n    &lt;SplunkThemeProvider&gt;\n      {error &amp;&amp; &lt;Message type=\"error\"&gt;{error.message}&lt;/Message&gt;}\n      {data &amp;&amp; (\n        &lt;Table&gt;\n          &lt;Table.Head&gt;\n            &lt;Table.HeadCell&gt;Name&lt;/Table.HeadCell&gt;\n            &lt;Table.HeadCell align=\"right\"&gt;Interval&lt;/Table.HeadCell&gt;\n            &lt;Table.HeadCell&gt;Account&lt;/Table.HeadCell&gt;\n          &lt;/Table.Head&gt;\n          &lt;Table.Body&gt;\n            {inputs?.map(\n              (row: {\n                name: string;\n                content: {\n                  disabled: boolean;\n                  interval: string;\n                  account: string;\n                };\n              }) =&gt; (\n                &lt;Table.Row key={row.name} disabled={row.content.disabled}&gt;\n                  &lt;Table.Cell&gt;{row.name}&lt;/Table.Cell&gt;\n                  &lt;Table.Cell align=\"right\"&gt;{row.content.interval}&lt;/Table.Cell&gt;\n                  &lt;Table.Cell&gt;{row.content.account}&lt;/Table.Cell&gt;\n                &lt;/Table.Row&gt;\n              )\n            )}\n          &lt;/Table.Body&gt;\n        &lt;/Table&gt;\n      )}\n    &lt;/SplunkThemeProvider&gt;\n  );\n}\n\nexport default AdvancedInputsTab;\n</code></pre> <p>ucc-ui.ts</p> <pre><code>import { uccInit } from \"@splunk/add-on-ucc-framework\";\nimport AdvancedInputsTabClass from \"./ucc-ui-extensions/AdvancedInputsTab\";\n\nuccInit({\n  AdvancedInputsTab: {\n    component: AdvancedInputsTabClass,\n    type: \"tab\",\n  },\n}).catch((error) =&gt; {\n  console.error(\"Could not load UCC\", error);\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/","title":"Testing UI Components in UCC Framework","text":"<p>This guide shows you how to test custom UI components in your Splunk Technology Add-on (TA) using the Unified Configuration Console (UCC) framework.</p>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#what-youll-need","title":"What You\u2019ll Need","text":"<p>Before starting, make sure you have:</p> <ul> <li>Node.js version 22 or higher</li> <li>npm version 10 or higher</li> </ul>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#getting-started","title":"Getting Started","text":""},{"location":"custom_ui_extensions/context/custom_test_ui_command/#1-set-up-your-ui-project","title":"1. Set Up Your UI Project","text":"<p>First, create your UI sub-project by following the UI Sub-Project Setup Guide.</p>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#2-create-your-test-files","title":"2. Create Your Test Files","text":"<p>Create test files anywhere in your <code>src</code> directory. Use any of these file extensions:</p> <ul> <li><code>.test.js</code>, <code>.test.ts</code>, <code>.test.jsx</code>, <code>.test.tsx</code></li> <li><code>.spec.js</code>, <code>.spec.ts</code>, <code>.spec.jsx</code>, <code>.spec.tsx</code></li> </ul> <p>The testing framework will automatically find files matching the pattern <code>src/**/*.{js,jsx,ts,tsx}</code>.</p>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#3-add-the-test-command","title":"3. Add the Test Command","text":"<p>Update your <code>package.json</code> file to include the test command:</p> <pre><code>{\n  \"scripts\": {\n    \"ucc-test\": \"test-ucc-ui\"\n  }\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#complete-packagejson-example","title":"Complete package.json Example","text":"<p>If you followed the UI Sub-Project Setup Guide, your <code>package.json</code> should look like this:</p> View complete package.json <pre><code>{\n  \"name\": \"ui\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"ucc-gen-ui ta_name=Splunk_TA_Name init_file_dir=src/ucc-ui.ts\",\n    \"ucc-test\": \"test-ucc-ui\"\n  },\n  \"dependencies\": {\n    \"@splunk/add-on-ucc-framework\": \"^5.65.0\",\n    \"@splunk/react-ui\": \"^4.42.0\",\n    \"@splunk/splunk-utils\": \"^3.1.0\",\n    \"@splunk/themes\": \"^0.23.0\",\n    \"react\": \"16.14.0\",\n    \"react-dom\": \"16.14.0\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.20.0\",\n    \"@types/node\": \"^22.13.1\",\n    \"@types/react\": \"16.14.62\",\n    \"@types/react-dom\": \"16.9.25\",\n    \"typescript\": \"^5.8.2\"\n  },\n  \"overrides\": {\n    \"react\": \"16.14.0\",\n    \"react-dom\": \"16.14.0\",\n    \"@types/react\": \"16.14.62\",\n    \"@types/react-dom\": \"16.9.25\"\n  },\n  \"engines\": {\n    \"node\": \"&gt;=22\",\n    \"npm\": \"&gt;=10\"\n  }\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#testing-your-ui-components","title":"Testing Your UI Components","text":"<p>The UCC framework provides two main functions to help you test your pages:</p>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#testing-configuration-pages","title":"Testing Configuration Pages","text":"<p>Use <code>renderConfigurationPage()</code> to test your configuration pages (like account settings).</p> <p>Parameters:</p> <ul> <li><code>globalConfig</code> (required): Your globalConfig.json file content</li> <li><code>customComponents</code> (optional): Object containing your custom UI components</li> </ul> <p>Example:</p> <pre><code>import { screen, waitForElementToBeRemoved } from \"@testing-library/react\";\nimport { it, expect } from \"vitest\";\nimport userEvent from \"@testing-library/user-event\";\n\nimport { getGlobalConfig } from \"./utils\";\nimport AdvancedInputsTabClass from \"../ucc-ui-extensions/AdvancedInputsTab\";\nimport DateInputClass from \"../ucc-ui-extensions/DateInput\";\n\nit(\"Should open account addition form\", async () =&gt; {\n  mockResponse();\n\n  renderConfigurationPage(getGlobalConfig(), {\n    DateInput: {\n      component: DateInputClass,\n      type: \"control\",\n    },\n    AdvancedInputsTab: {\n      component: AdvancedInputsTabClass,\n      type: \"tab\",\n    },\n  });\n\n  // Wait for page to load\n  await waitForElementToBeRemoved(() =&gt; screen.getByText(\"Waiting\"));\n\n  // Check if page elements are present\n  expect(screen.getByText(\"Configuration\")).toBeInTheDocument();\n  expect(await screen.findByText(\"Mocked Account name\")).toBeInTheDocument();\n\n  // Test clicking the Add button\n  const addButton = screen.getByRole(\"button\", { name: \"Add\" });\n  expect(addButton).toBeInTheDocument();\n\n  await userEvent.click(addButton);\n  expect(await screen.findByText(\"Add Accounts\")).toBeInTheDocument();\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#testing-input-pages","title":"Testing Input Pages","text":"<p>Use <code>renderInputsPage()</code> to test your input pages (like data input configurations).</p> <p>Parameters: Same as <code>renderConfigurationPage()</code></p> <ul> <li><code>globalConfig</code> (required): Your globalConfig.json file content</li> <li><code>customComponents</code> (optional): Object containing your custom UI components</li> </ul> <p>Example:</p> <pre><code>import { screen, waitForElementToBeRemoved } from \"@testing-library/react\";\nimport { it, expect } from \"vitest\";\nimport userEvent from \"@testing-library/user-event\";\n\nimport { getGlobalConfig } from \"./utils\";\nimport AdvancedInputsTabClass from \"../ucc-ui-extensions/AdvancedInputsTab\";\nimport DateInputClass from \"../ucc-ui-extensions/DateInput\";\n\nit(\"Should open inputs addition form\", async () =&gt; {\n  mockResponse();\n\n  renderInputsPage(getGlobalConfig(), {\n    DateInput: {\n      component: DateInputClass,\n      type: \"control\",\n    },\n    AdvancedInputsTab: {\n      component: AdvancedInputsTabClass,\n      type: \"tab\",\n    },\n  });\n\n  // Wait for page to load\n  await waitForElementToBeRemoved(() =&gt; screen.getByText(\"Waiting\"));\n\n  // Check if page elements are present\n  expect(screen.getByText(\"Inputs\")).toBeInTheDocument();\n  expect(await screen.findByText(\"Mocked Input name\")).toBeInTheDocument();\n\n  // Test clicking the Create button\n  const createButton = screen.getByRole(\"button\", { name: \"Create New Input\" });\n  expect(createButton).toBeInTheDocument();\n\n  await userEvent.click(createButton);\n  expect(await screen.findByText(\"Add Example service name\")).toBeInTheDocument();\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"custom_ui_extensions/context/custom_test_ui_command/#mock-api-responses","title":"Mock API Responses","text":"<p>We recommend using MSW (Mock Service Worker) to mock API calls in your tests.</p> <p>1. Set up the server (server.ts):</p> <pre><code>import { setupServer } from \"msw/node\";\nimport { afterAll, afterEach } from \"vitest\";\n\nexport const server = setupServer();\n\nserver.listen({\n  onUnhandledRequest: \"warn\",\n});\n\nafterEach(() =&gt; server.resetHandlers());\nafterAll(() =&gt; server.close());\n\nprocess.once(\"SIGINT\", () =&gt; server.close());\nprocess.once(\"SIGTERM\", () =&gt; server.close());\n</code></pre> <p>2. Mock responses in your tests:</p> <pre><code>function mockResponse() {\n  server.use(\n    http.get(`/servicesNS/nobody/-/:endpointUrl/:serviceName`, () =&gt; {\n      return HttpResponse.json(mockServerResponseWithContent);\n    }),\n    http.get(`/servicesNS/nobody/-/:endpointUrl`, () =&gt; {\n      return HttpResponse.json(mockServerResponseWithContent);\n    })\n  );\n}\n</code></pre> <p>3. Use standard response format:</p> <pre><code>export const mockServerResponseWithContent = {\n  links: {\n    create: `/servicesNS/nobody/Splunk_TA_Example/account/_new`,\n  },\n  updated: \"2023-08-21T11:54:12+00:00\",\n  entry: [\n    {\n      id: 1,\n      name: \"Mocked Input name\",\n      content: {\n        disabled: true,\n        fields1: \"value1\",\n        fields2: \"value2\",\n      },\n    },\n  ],\n  messages: [],\n};\n</code></pre>"},{"location":"custom_ui_extensions/context/custom_test_ui_command/#running-your-tests","title":"Running Your Tests","text":"<p>Once everything is set up, run your tests with:</p> <pre><code>npm run ucc-test\n</code></pre> <p>This will execute all test files in your <code>src</code> directory and show you the results.</p>"},{"location":"custom_ui_extensions/context/overview/","title":"Overview","text":"<p>Early Stage Feature</p> <p>This feature is in its early stages. While the main concepts are expected to remain consistent, minor configuration changes may occur in future releases.</p> <p>The UCC package simplifies the deployment of React applications featuring the Splunk UI by eliminating the need for NodeJS, Yarn, or front-end dependency installations. The core requirement for deployment is a <code>globalConfig.json</code> file. While UCC supports a broad range of use cases, there may be scenarios where the provided API options do not fully meet your needs.</p> <p>For such instances, UCC offers a component context-based loading mechanism. Similar to standard extensions (runtime custom JavaScript), this feature enables the invocation of specific functionalities at pivotal moments in the application lifecycle, such as <code>onChange</code> and <code>onRender</code> events.</p> <p>Note: Unlike standard extensions, this feature requires NodeJS and other libraries to function correctly. However, it facilitates easier and faster development through type checking and type interfaces that describe allowed properties and functionalities.</p>"},{"location":"custom_ui_extensions/context/overview/#integrating-custom-components","title":"Integrating Custom Components","text":""},{"location":"custom_ui_extensions/context/overview/#example-globalconfigjson","title":"Example <code>globalConfig.json</code>","text":"<pre><code>{\n  \"inputs\": {\n    \"title\": \"Inputs\",\n    \"description\": \"Manage your data inputs\",\n    \"services\": [\n      {\n        \"name\": \"example_input_one\",\n        \"title\": \"Example Input One\",\n        \"hook\": {\n          \"src\": \"CustomHook\",\n          \"type\": \"external\"\n        },\n        \"entity\": [{\n          \"field\": \"custom_input_field\",\n          \"label\": \"My Custom Input\",\n          \"type\": \"custom\",\n          \"options\": {\n            \"src\": \"CustomInput\",\n            \"type\": \"external\"\n          }\n        }]\n      }\n    ]\n  }\n}\n</code></pre> <p>Key Notes:</p> <ul> <li>Specify the <code>type</code> key as <code>external</code> to indicate that these scripts should use the ESM syntax for module exporting and importing.</li> </ul> <p>To integrate custom components, you can configure the <code>globalConfig.json</code> file as follows. For example, custom JavaScript files can be located at:</p> <pre><code>ta_directory/ui/src/ui_extensions/\n</code></pre>"},{"location":"custom_ui_extensions/context/overview/#component-initialization","title":"Component Initialization","text":"<p>Although UCC does not directly support components due to its design choices, you can integrate them through JavaScript. Below is an example of integrating a React component to create a custom date picker.</p>"},{"location":"custom_ui_extensions/context/overview/#example-customcomponentdatepickerts","title":"Example: <code>CustomComponentDatePicker.ts</code>","text":"<p>File path:  </p> <pre><code>ta_directory/ui/src/ucc-ui-extensions/CustomComponentDatePicker.ts\n</code></pre> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CustomControlBase } from \"@splunk/add-on-ucc-framework\";\nimport { DateChangeHandler } from \"@splunk/react-ui/Date\";\n\nconst CustomDateInput = React.lazy(() =&gt; import(\"./DateInput\"));\n\nexport default class CustomComponentDatePicker extends CustomControlBase {\n  onDateChange: DateChangeHandler = (_event, data) =&gt; {\n    this.setValue(data.value);\n  };\n\n  render() {\n    const dateValue = this.data.value;\n    const date =\n      typeof dateValue === \"string\" &amp;&amp; dateValue.length !== 0\n        ? dateValue\n        : undefined;\n\n    ReactDOM.render(\n      &lt;React.Suspense fallback={&lt;div&gt;&lt;/div&gt;}&gt;\n        &lt;CustomDateInput value={date} onChange={this.onDateChange} /&gt;\n      &lt;/React.Suspense&gt;,\n      this.el\n    );\n  }\n}\n</code></pre>"},{"location":"custom_ui_extensions/context/overview/#initializing-components-in-ucc-uits","title":"Initializing Components in <code>ucc-ui.ts</code>","text":"<p>To initialize front-end code, you need to provide an <code>uccInit</code> function in the <code>ucc-ui.ts</code> file. The execution must follow the proper format:</p> <pre><code>{\n  ComponentNameFromGlobalConfig: {\n    component: ComponentClassUsedForRendering,\n    type: 'control',\n  }\n}\n</code></pre> <p>Key Properties:</p> <ul> <li><code>ComponentNameFromGlobalConfig</code>: Matches the <code>src</code> defined in the <code>globalConfig.json</code> file.</li> <li><code>component</code>: Refers to a component that extends one of the available custom component types (<code>CustomHookBase</code>, <code>CustomControlBase</code>, <code>CustomTabBase</code>, <code>CustomCellBase</code>, <code>CustomRowBase</code>).</li> <li><code>type</code>: Defines the component type. Available types <code>\"hook\"</code>, <code>\"cell\"</code>, <code>\"row\"</code>, <code>\"control\"</code> and <code>\"tab\"</code>.</li> </ul>"},{"location":"custom_ui_extensions/context/overview/#example-ucc-uits","title":"Example: <code>ucc-ui.ts</code>","text":"<p>File path:  </p> <pre><code>ta_directory/ui/src/ucc-ui.ts\n</code></pre> <pre><code>import { uccInit } from \"@splunk/add-on-ucc-framework\";\nimport DateInputClass from \"./ucc-ui-extensions/CustomComponentDatePicker\";\nimport AdvancedInputsTabClass from \"./ucc-ui-extensions/AdvancedInputsTab\";\n\nuccInit({\n  DateInput: {\n    component: DateInputClass,\n    type: 'control',\n  },\n  AdvancedInputsTab: {\n    component: AdvancedInputsTabClass,\n    type: 'tab',\n  },\n}).catch((error) =&gt; {\n  console.error(\"Could not load UCC\", error);\n});\n</code></pre>"},{"location":"custom_ui_extensions/context/overview/#adding-build-commands","title":"Adding Build Commands","text":"<p>To streamline the build process, you may need to adjust the <code>package.json</code> file to include a build command:</p> <pre><code>module.exports = {\n    //...\n    \"scripts\": {\n        \"build\": \"ucc-gen-ui ta_name=Splunk_TA_Example init_file_dir=src/ucc-ui.ts\",\n    },\n}\n</code></pre> <p>The command accepts the following parameters:</p> Parameter Description Default Value <code>ta_name</code> The name of the current TA, used to locate the correct directory in the output folder. None <code>init_file_dir</code> The file containing the <code>uccInit</code> function. While <code>.ts</code> files are recommended, <code>.js</code> files can also be used for easier transitions. <code>src/ucc-ui.ts</code> <code>output</code> The destination directory containing the TA output and all required files. That will be used with method <code>resolve(output, TA_NAME, 'appserver/static/js/build')</code> <code>resolve(uiDir, '../output', TA_NAME, 'appserver/static/js/build')</code> (relative to the UI code)"},{"location":"custom_ui_extensions/context/overview/#smooth-build-process","title":"Smooth Build Process","text":"<p>To streamline the build process:</p> <ul> <li>Utilize the <code>--build-custom-ui</code> flag</li> </ul> <p>The ucc-gen build command supports the <code>--build-custom-ui</code> flag, which automatically initiates the UI build.</p> <p>Alternatively, you can manually incorporate the following steps into your repository:</p> <ul> <li>Create a <code>build-ui.sh</code> Script</li> </ul> <p>File path:  </p> <pre><code>ta_directory/scripts/build-ui.sh\n</code></pre> <pre><code>#!/bin/bash\n\n# Determine the directory of the script\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &amp;&amp; pwd)\"\n\n# Check if Node.js is installed\nif ! command -v node &amp;&gt; /dev/null\nthen\n    echo \"Node.JS is not installed. Please install Node.JS to continue.\"\n    exit 1\nfi\n\nif [ \"$CI\" = \"true\" ]; then\n    npm --prefix \"$SCRIPT_DIR/../ui\" ci\nelse\n    npm --prefix \"$SCRIPT_DIR/../ui\" install\nfi\n\nnpm --prefix \"$SCRIPT_DIR/../ui\" run build output=$(pwd)\n</code></pre> <ul> <li>Extend <code>additional_packaging.py</code> to Execute the Script</li> </ul> <p>File path:  </p> <pre><code>ta_directory/additional_packaging.py\n</code></pre> <pre><code>import os\nfrom os import path\n\ndef additional_packaging(addon_name: str) -&gt; None:\n    # ...\n    build_ui_script = os.path.join(\n        os.path.dirname(os.path.realpath(__file__)), \"scripts\", \"build-ui.sh\"\n    )\n    if path.exists(build_ui_script):\n        os.system(f\"chmod +x {build_ui_script}\")\n        return_code = os.system(build_ui_script)\n        if return_code != 0:\n            os._exit(os.WEXITSTATUS(return_code))\n</code></pre>"},{"location":"custom_ui_extensions/context/overview/#best-practices","title":"Best Practices","text":""},{"location":"custom_ui_extensions/context/overview/#lazy-loading","title":"Lazy Loading","text":"<p>Currently, all components are loaded directly upon initialization. For larger components, we recommend introducing a lazy loading mechanism within the components themselves.</p> <p>Example:</p> <pre><code>const CustomDateInput = React.lazy(() =&gt; import(\"./DateInput\"));\n</code></pre> <p>This approach imports the final <code>DateInput</code> component. The <code>CustomComponentDatePicker</code> acts as a wrapper to control rendering and handle data flow.</p>"},{"location":"custom_ui_extensions/standard/custom_cell/","title":"Custom Cell","text":"<p>A Custom Cell is used to update the content of a table cell.</p> <p><code>customCell</code> attribute will be used in the table header on the inputs and configuration page.</p>"},{"location":"custom_ui_extensions/standard/custom_cell/#properties","title":"Properties","text":"Property Description globalConfig is a hierarchical object that contains the globalConfig file\u2019s properties and values. el is used to render a custom cell element in a table. serviceName is the name of the service/tab specified in the globalConfig file. row is the object of the record for which the CustomRowInput constructor is called. field is the name of the field as specified in the globalConfig file."},{"location":"custom_ui_extensions/standard/custom_cell/#methods","title":"Methods","text":"Property Description render is a method which should have logic for the custom cell component, and it will be executed automatically when the create, edit, or clone actions performed."},{"location":"custom_ui_extensions/standard/custom_cell/#usage","title":"Usage","text":"<pre><code>{\n    \"name\": \"account\",\n    \"title\": \"Account\",\n    \"entity\": [],\n    \"table\": {\n        \"actions\": [\"edit\", \"delete\", \"clone\"],\n        \"header\": [{\n            \"label\": \"Name\",\n            \"field\": \"name\"\n        }, {\n            \"label\": \"Auth Type\",\n            \"field\": \"auth_type\"\n        }, {\n            \"label\": \"Test Custom Cell\",\n            \"field\": \"test_custom_cell\",\n            \"customCell\": {\n                \"src\": \"CustomInputCell\",\n                \"type\": \"external\"\n            }\n        }]\n    }\n}\n</code></pre>"},{"location":"custom_ui_extensions/standard/custom_cell/#example","title":"Example","text":"<pre><code>class CustomInputCell {\n    /**\n     * Custom Row Cell\n     * @constructor\n     * @param {Object} globalConfig - Global configuration.\n     * @param {string} serviceName - Input service name.\n     * @param {element} el - The element of the custom cell.\n     * @param {Object} row - custom row object.\n     * @param {string} field - The cell field name.\n     */\n    constructor(globalConfig, serviceName, el, row, field) {\n        this.globalConfig = globalConfig;\n        this.serviceName = serviceName;\n        this.el = el;\n        this.row = row;\n        this.field = field;\n    }\n    render() {\n        let html = \"\";\n        // Check for missing configuration in account\n        if (this.row.account_multiple_select === \"one\") {\n            html = \"Option One\";\n        } else if (this.row.account_multiple_select === \"two\"){\n            html = \"Option Two\";\n        } else {\n            html = \"Option is not available\"\n       }\n        this.el.innerHTML = html;\n        return this;\n    }\n}\nexport default CustomInputCell; \n</code></pre> <p>Note: The Javascript file for the custom cell should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/standard/custom_cell/#output","title":"Output","text":"<p>This is how it looks in the UI:</p> <p></p>"},{"location":"custom_ui_extensions/standard/custom_control/","title":"Custom Control","text":"<p>The Custom Control feature allows you to display any customised input component in a form. The developer can easily design and render any complex input component with this feature. Modern add-ons frequently require the use of complex input components, and this feature will allow you to use the custom component in the form that is best suited to your needs, without relying on newer releases of UCC for support.</p>"},{"location":"custom_ui_extensions/standard/custom_control/#properties","title":"Properties","text":"Property Description globalConfig It is a hierarchical object that contains the globalConfig file\u2019s properties and values. el The <code>el</code> is used to render a custom input element in a form. data The <code>data</code> object holds details regarding the execution: <li>mode - one of create, edit, clone, or config. Defines state of entity form.</li><li>value - value of the field,</li><li>serviceName - name of service where this custom component is being rendered.</li> setValue This method is used to set the value of the custom component. Usage: <code>setValue(newValue)</code> util This is a utility object with various functions that can be used to manipulate the UI. There are 4 associated methods: <ul><li><code>clearAllErrorMsg</code> - removes errors from form logic. Visual aspects wont be reflected until form state update. Message stays until next state update.Usage</li><li><code>setErrorFieldMsg</code> - sets up error message for any field. Message displayed on top of form and incorrect field marked red (you can pass even custom field value). Message stays until next state update.Usage</li><li><code>setErrorMsg</code> - sets error message for current custom field, does not mark this field visually.Usage</li><li><code>setState</code> - handles current state update. Usage</li></ul>"},{"location":"custom_ui_extensions/standard/custom_control/#methods","title":"Methods","text":"Property Description render is a method which should have logic for the custom component, and it will be executed automatically when the create, edit, or clone actions are performed. validation This method should contain the validation logic for the value of the custom component."},{"location":"custom_ui_extensions/standard/custom_control/#usage","title":"Usage","text":"<pre><code>{\n    \"name\": \"account\",\n    \"table\": {},\n    \"entity\": [\n        {\n            \"type\": \"custom\",\n            \"label\": \"Example Custom Control\",\n            \"field\": \"custom_control_field\",\n            \"help\": \"This is an example multipleSelect for account entity\",\n            \"options\":{\n                \"src\": \"custom_control\",\n                \"type\": \"external\"\n            },\n            \"required\": true\n        },\n        {\n            \"type\": \"text\",\n            \"label\": \"Name\",\n            \"field\": \"name\",\n            \"help\": \"Enter a unique name for this account.\",\n            \"required\": true\n        },\n    ]\n}\n</code></pre>"},{"location":"custom_ui_extensions/standard/custom_control/#example","title":"Example","text":"<pre><code>class CustomControl {\n    /**\n     *\n     * @constructor\n     * @param {object} globalConfig - Global configuration.\n     * @param {element} el - The element of the custom row.\n     * @param {object} data - Mode, serviceName, and value.\n     * @param {string} data.mode - one of `create`, `edit`, `clone`, or `config`\n     * @param {string | boolean | number | undefined} data.value - current value of custom field\n     * @param {string} data.serviceName - name of service in which custom field is rendered\n     * @param {object} util - The utility object.\n     * @param {function} setValue - set value of the custom field.\n     */\n    constructor(globalConfig, el, data, setValue, util) {\n        this.globalConfig = globalConfig;\n        this.el = el;\n        this.data = data;\n        this.util = util;\n        this.setValue = setValue;\n\n        this.onSelectOptionChange = this.onSelectOptionChange.bind(this);\n    }\n\n    onSelectOptionChange(event) {\n        this.setValue(event.target.value);\n    }\n\n    validation(field, value) {\n        // Validation logic for value. Return the error message if failed.\n        if (value === 'input_two') {\n            return 'Wrong value selected.';\n        }\n    }\n\n    render() {\n        let content_html = `\n            &lt;select id=\"custom_control\"&gt;\n                &lt;option value=\"input_one\"&gt;Input One&lt;/option&gt;\n                &lt;option value=\"input_two\"&gt;Input Two&lt;/option&gt;\n            &lt;/select&gt;\n        `;\n\n        this.el.innerHTML = content_html;\n        this.el.addEventListener('change', this.onSelectOptionChange);\n\n        return this;\n    }\n}\n\nexport default CustomControl;\n</code></pre> <p>Note: The Javascript file for the custom control should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/standard/custom_control/#output","title":"Output","text":"<p>This is how it looks in the UI:</p> <p></p>"},{"location":"custom_ui_extensions/standard/custom_control/#properties-usage","title":"Properties usage","text":""},{"location":"custom_ui_extensions/standard/custom_control/#clearallerrormsg","title":"clearAllErrorMsg","text":"<pre><code>this.util.clearAllErrorMsg(newState) // newState is updated form state\n</code></pre> <p>or</p> <pre><code>this.util.clearAllErrorMsg()\n</code></pre>"},{"location":"custom_ui_extensions/standard/custom_control/#seterrorfieldmsg","title":"setErrorFieldMsg","text":"<pre><code>this.util.setErrorFieldMsg('customFieldKey', 'Custom Field was filed incorrectly')\n</code></pre> <pre><code>this.util.setErrorFieldMsg('otherFieldValue', 'Due to custom field changes, action on otherFieldValue is required')\n</code></pre>"},{"location":"custom_ui_extensions/standard/custom_control/#seterrormsg","title":"setErrorMsg","text":"<pre><code>this.util.setErrorMsg('New Error message for current custom field.')\n</code></pre>"},{"location":"custom_ui_extensions/standard/custom_control/#setstate","title":"setState","text":"<pre><code>this.util.setState((oldState) =&gt; {\n    const newState = {...oldState}\n    newState.data.fieldKey = newFieldValue;\n    return newState\n})\n</code></pre>"},{"location":"custom_ui_extensions/standard/custom_hook/","title":"Custom Hook","text":"<p>Custom Hook is a JavaScript function that allows us to reuse some code throughout the app. It is used to validate form/dialog inputs.</p> <p>Hook is nothing more than a Javascript event handling on the events <code>onCreate</code>, <code>onChange</code>, <code>onRender</code>, <code>onSave</code>, <code>onSaveSuccess</code>, <code>onSaveFail</code>, and <code>onEditLoad</code>.</p> <p>Hooks can be used inside the services and tabs that are placed next to the entity tag.</p> <p>The <code>type</code> key needs to be set as external to webpack the custom extensions. UCC  expects scripts marked as external to follow the ESM syntax for exporting and importing modules. Aditionally, the custom javascript file and the imported modules will not get webpack-ed.</p>"},{"location":"custom_ui_extensions/standard/custom_hook/#properties","title":"Properties","text":"Property Description globalConfig It is a hierarchical object that contains the globalConfig file\u2019s properties and values. serviceName It is the name of the service/tab specified in the globalConfig. state <code>state</code> is an object that represents the actual state value of the components in the service/tab when the hook\u2019s constructor is called. Updating this object will not update the state of the page. Use the <code>util.setState</code> method to update the page\u2019s state. The <code>state</code> object contains the actual state data along with the  <code>errorMsg</code> and <code>warningMsg</code> properties. mode There are three possible modes: Edit, Clone, and Delete. These are used in service/tab components. util This is a utility object with various functions that can be used to manipulate the page UI. There are 4 associated methods: <ul><li><code>clearAllErrorMsg</code>: \u0192 (State)</li><li><code>setErrorFieldMsg</code>: \u0192 (field, msg)</li><li><code>setErrorMsg</code>: \u0192 (msg)</li><li><code>setState</code>: \u0192 setState(callback)</li></ul> groupName The name of the menu group from which the inputs service is called. This parameter should only be used with the multi-level menu feature."},{"location":"custom_ui_extensions/standard/custom_hook/#methods","title":"Methods","text":"<p>We can use these methods to override existing methods according to the desired functionality:</p> Property Description onCreate is called when we click on the \u201cAdd/Create\u201d button to create a new record on the page. debounce is used to create another special method which does not get executed on every call. This functionality can be useful when listening for an event. <p>For Example, if you might want to show the help text/error when the user has stopped typing for 500ms in a text-box, instead of every key press.  In this scenario, the debounce method will induce a time wait every time a key is pressed and the method will only execute when there is no other call to it within that wait time.</p> onChange is called when the value of any field is changed. onRender is called once whenever the user clicks on an \u201cAdd\u201d, \u201cEdit\u201d, or \u201cClone\u201d button. onSave is called when the user clicks the \u201cSave\u201d button after creating, editing, or cloning a record. onSaveSuccess is called when a record has been successfully saved. onSaveFail is called when a record fails to save due to any error. onEditLoad is called when the user clicks on an \u201cEdit\u201d button for an existing record."},{"location":"custom_ui_extensions/standard/custom_hook/#usage","title":"Usage","text":"<pre><code>{\n  \"inputs\": {\n    \"title\": \"Inputs\",\n    \"description\": \"Manage your data inputs\",\n    \"services\": [\n      {\n        \"name\": \"example_input_one\",\n        \"title\": \"Example Input One\",\n        \"hook\": {\n          \"src\": \"input_hook\",\n          \"type\": \"external\"\n        },\n        \"entity\": []\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"custom_ui_extensions/standard/custom_hook/#example","title":"Example","text":"<pre><code>import _ from \"underscore\"; // example of a ESM import\n\nclass Hook {\n    /**\n     * Form hook\n     * @constructor\n     * @param {Object} globalConfig - Global configuration.\n     * @param {string} serviceName - Service name\n     * @param {object} state - object with state of the components on the servcice/page\n     * @param {string} mode - edit,create or clone\n     * @param {object} util - the utility object\n     */\n    constructor(globalConfig, serviceName, state, mode, util, groupName) {\n        this.globalConfig = globalConfig;\n        this.serviceName = serviceName;\n        this.state = state;\n        this.mode = mode;\n        this.util = util;\n        this.groupName = groupName;\n        this._debouncedNameChange = this.debounce(this._nameChange.bind(this), 200);\n        console.log('Inside Hook mode: ', mode);\n    }\n\n    onCreate() {\n        if (this.mode == \"create\") {\n            console.log('in Hook: onCreate');\n            // This is an example of how to store groupName value for a particular form field.\n            this.util.setState((prevState) =&gt; {\n                let data = { ...prevState.data };\n                data.test_field.value = this.groupName;\n                return { data };\n            });\n        }\n    }\n\n    debounce(func, wait) {\n        let timeout;\n        // This is the function that is returned and will be executed many times\n        // We spread (...args) to capture any number of parameters we want to pass\n        return function executedFunction(...args) {\n            // The callback function to be executed after\n            // the debounce time has elapsed\n            // This will reset the waiting every function execution.\n            // This is the step that prevents the function from\n            // being executed because it will never reach the\n            // inside of the previous setTimeout\n            clearTimeout(timeout);\n\n            // Restart the debounce waiting period.\n            // setTimeout returns a truthy value\n            timeout = setTimeout(() =&gt; {func(...args)}, wait);\n        }\n    }\n\n    onChange(field, value, dataDict) {\n        console.log('in Hook: onChange ', field, ' value : ', value);\n        console.log('in Hook: onChange state: ', this.state);\n        if (field === \"name\") {\n          this._debouncedNameChange(dataDict)\n        }\n    }\n\n    onRender() {\n        console.log('in Hook: onRender');\n    }\n\n    /* \n        Put form validation logic here.\n        Return true if validation pass, false otherwise.\n        Call displayErrorMsg when validation failed.\n    */\n    onSave(dataDict) {\n        console.log('in Hook: onSave with data: ', dataDict);\n        var accountname = dataDict.name;\n        var auth_type = dataDict.auth_type;\n        var endpoint = dataDict.url;\n\n        this.util.setState((prevState) =&gt; {\n            /*\n            Example usage of util.clearAllErrorMsg. It just returns the modified state object after clearing the error messages.\n            It won't update the UI.\n            */\n            let new_state = this.util.clearAllErrorMsg(prevState);\n            return new_state\n        });\n\n        if (accountname === null || accountname.trim().length === 0) {\n            var msg = \"Field account name is required\";\n            this.util.setErrorMsg(msg);\n            return false;\n        } else if (endpoint === null || endpoint.trim().length === 0) {\n            var msg = \"Field URL is required\";\n            this.util.setErrorMsg(msg);\n            return false;\n        } else if (endpoint.indexOf(\"https://\") !== 0) {\n            var msg =\n            \"URL should start with 'https://' as only secure URLs are supported.\";\n            this.util.setErrorFieldMsg(\"url\", msg);\n            return false;\n        } else if (auth_type == \"oauth\") {\n            endpoint = endpoint.replace(\"https://\", \"\"); //removing the https schema from the endpoint\n            this.util.setState((prevState) =&gt; {\n            let data = { ...prevState.data };\n            data.endpoint.value = endpoint;\n            return { data };\n            });\n        }\n        return true;\n    }\n\n    onSaveSuccess() {\n        console.log('in Hook: onSaveSuccess');\n    }\n\n    onSaveFail() {\n        console.log('in Hook: onSaveFail');\n    }\n\n    /*\n    Put logic here to execute javascript after loading edit UI.\n    */\n    onEditLoad() {\n        console.log('in Hook: onEditLoad');\n    }\n\n    _nameChange(dataDict) {\n        console.log('in Hook: _nameChange');            \n    }\n}\n\nexport default Hook;\n</code></pre> <p>Note: The Javascript file for the custom control should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/standard/custom_row/","title":"Custom Row","text":"<p>When a row is expanded on the Inputs table or Configuration Table, Custom Row is utilized to incorporate a customized element. By clicking on the icon provided on the left side of each row, the input-specific details are displayed.</p>"},{"location":"custom_ui_extensions/standard/custom_row/#properties","title":"Properties","text":"Property Description globalConfig is a hierarchical object that contains the globalConfig file\u2019s properties and values. el is used to render a customized element on the Inputs table when a row is expanded. serviceName is the name of the service/tab specified in the globalConfig file. row is the object of the record for which the CustomRowInput constructor is called."},{"location":"custom_ui_extensions/standard/custom_row/#methods","title":"Methods","text":"Property Description render is a method which contains the logic to display the custom row component. This method is automatically executed when the row is expanded getDLRows is a method which contains the logic to update the custom row values, return a key-value pair. <p>Note</p> <ul> <li>Atleast one method should be present</li> <li>If both method is present then the getDLRows method have the high priority.</li> </ul>"},{"location":"custom_ui_extensions/standard/custom_row/#usage","title":"Usage","text":"<pre><code>\"inputs\": {\n    \"title\": \"Inputs\",\n    \"description\": \"Manage your data inputs\",\n    \"services\": [],\n    \"table\": {\n        \"actions\": [\"edit\", \"delete\", \"clone\"],\n        \"header\": [],\n        \"customRow\": {\n            \"src\": \"custom_input_row\",\n            \"type\": \"external\"\n        }\n    }\n}\n</code></pre>"},{"location":"custom_ui_extensions/standard/custom_row/#example","title":"Example","text":"<pre><code>class CustomInputRow {\n  /**\n   * Custom Row Cell\n   * @constructor\n   * @param {Object} globalConfig - Global configuration.\n   * @param {string} serviceName - Input service name.\n   * @param {element} el - The element of the custom cell.\n   * @param {Object} row - custom row object,\n   *     use this.row.&lt;field_name&gt;, where &lt;field_name&gt; is a field name\n   */\n  constructor(globalConfig, serviceName, el, row) {\n    this.globalConfig = globalConfig;\n    this.serviceName = serviceName;\n    this.el = el;\n    this.row = row;\n  }\n\n  getDLRows() {\n    return Object.fromEntries(\n      Object.entries(this.row).map(([key, value]) =&gt; [\n        key,\n        key === \"interval\" ? `${value} sec` : value,\n      ])\n    );\n  }\n\n  render() {\n    const content_html_template = \"Custom Input Row\";\n    this.el.innerHTML = content_html_template;\n    return this;\n  }\n}\n\nexport default CustomInputRow;\n</code></pre> <p>Note:</p> <ul> <li>The content should be included in the JavaScript file named by customRow.src property in globalConfig (see usage for details).</li> <li>The Javascript file for the custom control should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</li> </ul>"},{"location":"custom_ui_extensions/standard/custom_row/#output","title":"Output","text":"<p>This is how it looks in the UI:</p> <p></p>"},{"location":"custom_ui_extensions/standard/custom_tab/","title":"Custom Tab","text":"<p>Custom Tab feature can be used to render any customized UI component in the Configuration tabs. With this feature, you can design and render any complex input with ease. This is an advanced feature and can be leveraged with limitless functionalities. Modern add-ons are receiving complex use cases and this feature will allow you to design the UI perfectly for your case without having to depend on newer releases of UCC for support.</p>"},{"location":"custom_ui_extensions/standard/custom_tab/#properties","title":"Properties","text":"Property Description tab is an object with the properties and values of a custom tab object from the global config file. el is used to render a customized component on the Configuration tabs."},{"location":"custom_ui_extensions/standard/custom_tab/#methods","title":"Methods","text":"Property Description render is a method which should have logic for the custom component, and it will be executed automatically when the configuration page is rendered."},{"location":"custom_ui_extensions/standard/custom_tab/#usage","title":"Usage","text":"<pre><code>\"configuration\": {\n    \"title\": \"Configuration\",\n    \"descriptions\": \"Set up your add-on\",\n    \"tabs\": [\n        {\n            \"name\": \"account\",\n            \"title\": \"Account\",\n            \"entity\": [],\n            \"table\": {}\n        },\n        {\n            \"name\": \"custom_tab\",\n            \"title\": \"Custom_tab without entity\",\n            \"customTab\": {\n                \"src\": \"custom_tab\",\n                \"type\": \"external\"\n            }\n        },\n        {\n            \"type\": \"proxyTab\"\n        },\n        {\n            \"type\": \"loggingTab\"\n        }\n    ]\n}\n</code></pre>"},{"location":"custom_ui_extensions/standard/custom_tab/#example","title":"Example","text":"<pre><code>class CustomTab {\n\n    /**\n    * Custom Tab\n    * @constructor\n    * @param {Object} tab - Tab details.\n    * @param {element} el - The element of the custom tab.\n    */\n    constructor(tab, el) {\n        this.tab = tab;\n        this.el = el;\n    }\n\n    render() {\n        this.el.innerHTML = `&lt;h1 style=\"margin-top: 20px\"&gt;${this.tab.title} - This is a custom component rendered from the TA&lt;/h1&gt;`\n    }\n}\nexport default CustomTab;\n</code></pre> <p>Note: The Javascript file for the custom tab should be saved in the custom folder at <code>appserver/static/js/build/custom/</code>.</p>"},{"location":"custom_ui_extensions/standard/custom_tab/#output","title":"Output","text":"<p>This is how it looks in the UI:</p> <p></p>"},{"location":"custom_ui_extensions/standard/overview/","title":"Overview","text":"<p>The UCC package simplifies the deployment of React applications featuring the Splunk UI by eliminating the need for NodeJS, Yarn, or front-end dependencies installation. The core requirement for deployment is a <code>globalConfig.json</code> file. While UCC is designed to support a broad spectrum of use cases, there may be scenarios where the provided API options do not fully meet your needs.</p> <p>For such instances, UCC has a runtime custom JavaScript loading mechanism. This feature allows for the invocation of specific functionalities at pivotal moments within the application lifecycle, including <code>onChange</code> and <code>onRender</code> events.</p>"},{"location":"custom_ui_extensions/standard/overview/#integrating-custom-javascript","title":"Integrating Custom JavaScript","text":"<p>Example <code>globalConfig.json</code> configuration for custom JS files located at:</p> <pre><code>appserver/static/js/build/custom/CustomHookJSFile.js\nappserver/static/js/build/custom/CustomInputJSFile.js\n</code></pre> <pre><code>{\n  \"inputs\": {\n    \"title\": \"Inputs\",\n    \"description\": \"Manage your data inputs\",\n    \"services\": [\n      {\n        \"name\": \"example_input_one\",\n        \"title\": \"Example Input One\",\n        \"hook\": {\n          \"src\": \"CustomHookJSFile\",\n          \"type\": \"external\"\n        },\n        \"entity\": [{\n          \"field\": \"custom_input_field\",\n          \"label\": \"My Custom Input\",\n          \"type\": \"custom\",\n          \"options\": {\n            \"src\": \"CustomInputJSFile\",\n            \"type\": \"external\"\n          }\n        }]\n      }\n    ]\n  }\n}\n</code></pre> <p>Note: Specify the <code>type</code> key as <code>external</code> to indicate that these scripts should use the ESM syntax for module exporting and importing. Additionally, custom JavaScript files and their modules will not be processed by Webpack.</p>"},{"location":"custom_ui_extensions/standard/overview/#react-component-extension","title":"React Component Extension","text":"<p>While UCC does not directly support React components due to its design choices, it\u2019s possible to integrate React through JavaScript:</p>"},{"location":"custom_ui_extensions/standard/overview/#customcomponentjs","title":"CustomComponent.js","text":"<pre><code>export default class CustomComponent {\n  constructor (globalConfig, el) {\n  }\n\n  render () {\n    ReactDOM.render(\n      &lt;CustomReactInputComponent /&gt;,\n      this.el\n    )\n    return this\n  }\n}\n</code></pre> <p>You might also need to adjust webpack/rollup config to output files without chunking:</p> <pre><code>module.exports = {\n    //...\n    output: {\n        path: path.join(__dirname, '../output/Splunk_TA_Name/appserver/static/js/build/custom/'),\n        filename: '[name].js',\n    },\n}\n</code></pre>"},{"location":"entity/","title":"Entity","text":""},{"location":"entity/#entity-properties","title":"Entity Properties","text":"Property Type Description Default Value field* string To define a particular entity field. - label* string It represents a caption for a field in a user interface. - type* string To specify the type of entity to be rendered in inputs or configuration form. - help string or help object Help text gives context about a fields input, such as how the input will be used. It is displayed directly below an input field. Use <code>\\n</code> for line break. To include links use help object structure. - tooltip string Displays a tooltip beside the label. - defaultValue string, number or boolean The initial input value. - options object To specify an additional attribute for a particular type of entity, such as <code>items</code> for a radio bar. - required boolean To specify whether the field is required or not. false encrypted boolean To encrypt that particular field. false validators array It is used to validate the values of fields using various validators. It is strongly advised to specify validators for every entity. - modifyFieldsOnValue array It is used to specify values and parameters that will influence visually other entities. -"},{"location":"entity/#common-options","title":"Common Options","text":"<p>This section describes common options that can be used within the <code>options</code> object in entity properties.</p> Property Type Description Default Value display boolean It chooses whether or not to display the field. true disableonEdit boolean When the form is in edit mode, the field becomes unable to be edited. false enable boolean The enable property sets whether a field is enabled or not. true requiredWhenVisible boolean It makes the field required on the UI when it appears. It is used only for visibility. false hideForPlatform string Defines for which platform element should be hidden from UI perspective. Currently only two platforms are supported <code>cloud</code> or <code>enterprise</code>. -"},{"location":"entity/components/","title":"Components supported by UCC","text":"<p>Components are used by UCC to render the Inputs and Configuration pages. See the following list of the supported components.</p> <p>For a detailed look at our component implementations and to interact with them in a live environment, visit our Storybook library.</p>"},{"location":"entity/components/#text","title":"<code>Text</code>","text":"<p>See the underlying <code>@splunk/react-ui</code> component: <code>Text</code>.</p> <p>See the following example usage:</p> <pre><code>{\n    \"type\": \"text\",\n    \"label\": \"Name\",\n    \"validators\": [\n        {\n            \"type\": \"string\",\n            \"errorMsg\": \"Length of Name should be between 1 to 50 characters.\",\n            \"minLength\": 1,\n            \"maxLength\": 50\n        },\n        {\n            \"type\": \"regex\",\n            \"errorMsg\": \"Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n            \"pattern\": \"^[a-zA-Z]\\\\w*$\"\n        }\n    ],\n    \"field\": \"name\",\n    \"help\": \"Enter a unique name for this account.\",\n    \"required\": true\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#text-area","title":"<code>Text Area</code>","text":"<p>See the underlying <code>@splunk/react-ui</code> component: <code>TextArea</code>.</p> <p>The <code>textarea</code> component is very similar to the <code>text</code> component, but allows you to have a multi-line input for text.</p>"},{"location":"entity/components/#options","title":"Options","text":"Property Type Description Default Value rowsMax number Maximum number of rows to display. 12 rowsMin number Minimum number of rows to display. 8 <p>See the following example:</p> <pre><code>{\n    \"type\": \"textarea\",\n    \"label\": \"Textarea Field\",\n    \"field\": \"textarea_field\",\n    \"help\": \"Help message\",\n    \"options\": {\n        \"rowsMin\": 3,\n        \"rowsMax\": 15\n    },\n    \"required\": true\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#single-select","title":"<code>Single Select</code>","text":"<p>A <code>singleSelect</code> is a feature that combines a drop-down box, and/or editable text field, giving the user multiple ways to input or select the desired information.</p> <p>See the underlying <code>@splunk/react-ui</code> components: <code>Select</code> or <code>Combo Box</code> depending on the <code>createSearchChoice</code> option.</p> <p>When the <code>createSearchChoice</code> option is set to true, the Singleselect component becomes a text input with auto-complete.</p> <p>A clear button is visible to the right of the dropdown when this field is marked as required.</p>"},{"location":"entity/components/#options_1","title":"Options","text":"Property Type Description Default Value disableSearch boolean It determines whether to show the filter box. When false, the children are automatically filtered based on the label. false createSearchChoice boolean It allows the user to add arbitrary values. false referenceName string Dropdown options will be generated via an API call to the service\u2019s restHandler. - endpointUrl string Dropdown options will be generated via an API call to that endpoint. - allowList string It only accepts options that match the regex based on the name attribute when received via an API call using <code>endpointUrl</code> and <code>referenceName</code>. It is applied before denyList. - denyList string It filters options that don\u2019t match the regex based on the name attribute when received via an API call using <code>endpointUrl</code> and <code>referenceName</code>. - labelField string If you use endpointUrl and your data are not simple text data, you can specify here which property of retrieved object should be used as label for each item.<code>item.content?.[labelField]</code> - valueField string If you use endpointUrl and your data are not simple text data, you can specify here which property of retrieved object should be used as value for each item.<code>item.content?.[valueField]</code> - dependencies array It is used to update the options via an API call when the value of any field in the dependencies list is updated. - <p>When using Boolean values on any form inside configuration page, consider that inside splunk values like \u2018TRUE\u2019, \u2018T\u2019, \u2018Y\u2019, \u2018YES\u2019, true will be converted into \u20181\u2019 and values like \u2018FALSE\u2019, \u2018F\u2019, \u2018N\u2019, \u2018NO\u2019, \u2018NONE\u2019, false will be converted into \u20180\u2019.</p> <p>Consider using values \u20180\u2019 and \u20181\u2019 as false and true values.</p>"},{"location":"entity/components/#see-the-following-example-usage","title":"See the following example usage","text":""},{"location":"entity/components/#using-referencename-option","title":"Using referenceName option","text":"<pre><code>{\n    \"type\": \"singleSelect\",\n    \"label\": \"Example Account\",\n    \"options\": {\n        \"referenceName\": \"account\",\n        \"allowList\": \"^[a-zA-Z]\\\\w*$\"\n    },\n    \"help\": \"\",\n    \"field\": \"account\",\n    \"required\": true\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#using-autocompletefields-options","title":"Using autoCompleteFields Options","text":"<pre><code>{\n    \"type\": \"singleSelect\",\n    \"label\": \"Proxy Type\",\n    \"options\": {\n        \"disableSearch\": true,\n        \"autoCompleteFields\": [\n            {\n                \"value\": \"http\",\n                \"label\": \"http\"\n            },\n            {\n                \"value\": \"socks5\",\n                \"label\": \"socks5\"\n            }\n        ]\n    },\n    \"defaultValue\": \"http\",\n    \"field\": \"proxy_type\"\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#using-createsearchchoice-option","title":"Using createSearchChoice option","text":"<pre><code>{\n    \"type\": \"singleSelect\",\n    \"label\": \"Index\",\n    \"validators\": [\n        {\n            \"type\": \"string\",\n            \"errorMsg\": \"Length of index name should be between 1 to 80 characters.\",\n            \"minLength\": 1,\n            \"maxLength\": 80\n        }\n    ],\n    \"defaultValue\": \"default\",\n    \"options\": {\n        \"endpointUrl\": \"data/indexes\",\n        \"denyList\": \"^_.*$\",\n        \"createSearchChoice\": true\n    },\n    \"field\": \"index\",\n    \"required\": true\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#using-autocompletefields-option-with-groups","title":"Using autoCompleteFields option with groups","text":"<pre><code>{\n    \"field\": \"singleSelectTest\",\n    \"label\": \"Single Select Group Test\",\n    \"type\": \"singleSelect\",\n    \"options\": {\n        \"createSearchChoice\": true,\n        \"autoCompleteFields\": [\n            {\n                \"label\": \"Group1\",\n                \"children\": [\n                    {\n                        \"value\": \"one\",\n                        \"label\": \"One\"\n                    },\n                    {\n                        \"value\": \"two\",\n                        \"label\": \"Two\"\n                    }\n                ]\n            },\n            {\n                \"label\": \"Group2\",\n                \"children\": [\n                    {\n                        \"value\": \"three\",\n                        \"label\": \"Three\"\n                    },\n                    {\n                        \"value\": \"four\",\n                        \"label\": \"Four\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#checkbox","title":"<code>Checkbox</code>","text":"<p>See the underlying <code>@splunk/react-ui</code> component: <code>Switch</code>.</p> <p>See the following example usage:</p> <pre><code>{\n    \"type\": \"checkbox\",\n    \"label\": \"Enable\",\n    \"field\": \"proxy_enabled\"\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#checkboxgroup","title":"<code>CheckboxGroup</code>","text":""},{"location":"entity/components/#options_2","title":"Options","text":"Property Type Description Default Value rows* array rows defines each individual row within the checkboxGroup control. - groups array groups logically organize related checkboxes under a common label within the checkboxGroup control. - delimiter string Values are combined into a single field using a predefined delimiter. Assuming the delimiter is \\ (backslash character), the combined value would look like: <code>rowUnderGroup1/1200\\requiredField/10</code> comma(<code>,</code>) <p>See the following example usage:</p> <pre><code>{\n  \"type\": \"checkboxGroup\",\n  \"label\": \"CheckboxGroupTitle\",\n  \"field\": \"api3\",\n  \"options\": {\n    \"groups\": [\n      {\n        \"label\": \"Group 1\",\n        \"options\": {\n          \"isExpandable\": true,\n          \"expand\": true\n        },\n        \"fields\": [\"rowUnderGroup1\"]\n      },\n      {\n        \"label\": \"Group 3\",\n        \"options\": {\n          \"isExpandable\": true,\n          \"expand\": true\n        },\n        \"fields\": [\"field223\", \"160validation\"]\n      }\n    ],\n    \"rows\": [\n      {\n        \"field\": \"rowWithoutGroup\",\n        \"input\": {\n          \"defaultValue\": 1,\n          \"required\": true\n        }\n      },\n      {\n        \"field\": \"rowUnderGroup1\",\n        \"checkbox\": {\n          \"label\": \"Row under Group 1\",\n          \"defaultValue\": true\n        },\n        \"input\": {\n          \"defaultValue\": 1200,\n          \"required\": false\n        }\n      },\n      {\n        \"field\": \"field223\",\n        \"checkbox\": {\n          \"label\": \"Required field\",\n          \"defaultValue\": true\n        },\n        \"input\": {\n          \"required\": true\n        }\n      },\n      {\n        \"field\": \"160validation\",\n        \"checkbox\": {\n          \"label\": \"from 1 to 60 validation\"\n        },\n        \"input\": {\n          \"validators\": [\n            {\n              \"type\": \"number\",\n              \"range\": [1, 60]\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p> <p>The component maps and unmaps values into a single field in the format <code>fieldName1/fieldValue1,fieldName2/fieldValue2</code>, but only for checked rows. For the given example, it emits the following value: <code>rowUnderGroup1/1200,requiredField/10</code>.</p>"},{"location":"entity/components/#checkboxtree","title":"<code>CheckboxTree</code>","text":""},{"location":"entity/components/#options_3","title":"Options","text":"Property Type Description Default Value rows* array rows defines each individual row within the checkboxTree control. - groups array groups logically organize related checkboxes under a common label within the checkboxTree control. - delimiter string Values are combined into a single field using a predefined delimiter. Assuming the delimiter is \\ (backslash character), the combined value would look like: <code>rowWithoutGroup\\rowUnderGroup1\\firstRowUnderGroup3</code> comma(<code>,</code>) <p>See the following example usage:</p> <pre><code> {\n    \"type\": \"checkboxTree\",\n    \"label\": \"CheckboxTreeTitle\",\n    \"field\": \"api3\",\n    \"options\": {\n    \"groups\": [\n        {\n            \"label\": \"Group 1\",\n            \"options\": {\n                \"isExpandable\": true,\n                \"expand\": true\n            },\n            \"fields\": [\"rowUnderGroup1\"]\n        },\n        {\n            \"label\": \"Group 3\",\n            \"options\": {\n                \"isExpandable\": true,\n                \"expand\": true\n            },\n            \"fields\": [\"firstRowUnderGroup3\", \"secondRowUnderGroup3\", \"thirdRowUnderGroup3\"]\n        }\n    ],\n    \"rows\": [\n        {\n            \"field\": \"rowWithoutGroup\",\n            \"checkbox\": {\n                \"label\": \"Row without group\",\n                \"defaultValue\": true\n            }\n        },\n        {\n            \"field\": \"rowUnderGroup1\",\n            \"checkbox\": {\n                \"label\": \"Row under Group 1\",\n                \"defaultValue\": true\n            }\n        },\n        {\n            \"field\": \"firstRowUnderGroup3\",\n            \"checkbox\": {\n                \"label\": \"first row under group 3\",\n                \"defaultValue\": true\n            }\n        },\n        {\n            \"field\": \"secondRowUnderGroup3\",\n            \"checkbox\": {\n                \"label\": \"second row under group 3\"\n            }\n        },\n        {\n            \"field\": \"thirdRowUnderGroup3\",\n            \"checkbox\": {\n                \"label\": \"third row checked under group 3\",\n                \"defaultValue\": true\n            }\n        }\n    ]\n    }\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p> <p>The component maps and unmaps values into a single field in the format <code>fieldName1,fieldName2,fieldName3</code>, but only for checked rows. For the given example, it emits the following value: <code>rowWithoutGroup,rowUnderGroup1,firstRowUnderGroup3</code>.</p>"},{"location":"entity/components/#multiple-select","title":"<code>Multiple Select</code>","text":"<p>See the underlying <code>@splunk/react-ui</code> component: <code>Multiselect</code>.</p> <p>Multiselect allows the user to select multiple options at once.</p>"},{"location":"entity/components/#options_4","title":"Options","text":"Property Type Description Default Value items array An array of options with a label and a value. - delimiter string It delimits each value of the field with a predefined character. For example, In the data option_a|option_b, a vertical bar (the pipe character) delimits the two data items option_a and option_b. comma(<code>,</code>) createSearchChoice boolean It allows the user to add arbitrary values. false referenceName string Dropdown options will be generated via an API call to the service\u2019s restHandler. - endpointUrl string Dropdown options will be generated via an API call to that endpoint. - allowList string It only accepts options that match the regex based on the name attribute when received via API call using <code>endpointUrl</code> and <code>referenceName</code>. It is applied before denyList. - denyList string It filters options that don\u2019t match the regex based on the name attribute when received via API call using <code>endpointUrl</code> and <code>referenceName</code>. - labelField string If you use endpointUrl and your data are not simple text data, you can specify here which property of retrieved object should be used as label for each item.<code>item.content?.[labelField]</code> - valueField string If you use endpointUrl and your data are not simple text data, you can specify here which property of retrieved object should be used as value for each item.<code>item.content?.[valueField]</code> - dependencies array It is used to update options via an API call when the value of any field in the dependencies list is updated. - autoCompleteFields array It is used to add options in the Single select or Multiple select component. - <p>See the following example usage:</p> <pre><code>{\n    \"type\": \"multipleSelect\",\n    \"field\": \"test_multiselect\",\n    \"label\": \"Test Multiselect\",\n    \"options\": {\n        \"delimiter\": \"|\",\n        \"items\": [\n            {\n                \"value\": \"option_a\",\n                \"label\": \"Option A\"\n            },\n            {\n                \"value\": \"option_b\",\n                \"label\": \"Option B\"\n            }\n        ]\n    }\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#radio-bar","title":"<code>Radio Bar</code>","text":"<p>See the underlying <code>@splunk/react-ui</code> component: <code>RadioBar</code>.</p> <p>RadioBar is a component that provides the ability to select one option out of a group. It can be used when we need to select a field value from a few options.</p>"},{"location":"entity/components/#options_5","title":"Options","text":"Property Type Description Default Value items* array This property is an array of options with a label and a value. - <p>See the following example usage:</p> <pre><code>{\n    \"field\": \"test_radio\",\n    \"label\": \"Test Radio\",\n    \"type\": \"radio\",\n    \"defaultValue\": \"Yes\",\n    \"required\": false,\n    \"options\": {\n        \"items\": [\n            {\n                \"value\": \"yes\",\n                \"label\": \"Yes\"\n            },\n            {\n                \"value\": \"no\",\n                \"label\": \"No\"\n            }\n        ],\n        \"display\": true\n    }\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p> <p>When using Boolean values on any form inside configuration page, consider that inside splunk values like \u2018TRUE\u2019, \u2018T\u2019, \u2018Y\u2019, \u2018YES\u2019, true will be converted into \u20181\u2019 and values like \u2018FALSE\u2019, \u2018F\u2019, \u2018N\u2019, \u2018NO\u2019, \u2018NONE\u2019, false will be converted into \u20180\u2019.</p> <p>Consider using values \u20180\u2019 and \u20181\u2019 as false and true values.</p>"},{"location":"entity/components/#help-link","title":"<code>Help Link</code>","text":"<p>See the underlying <code>@splunk/react-ui</code> component: <code>Link</code>.</p> <p>It will open the link in a new tab.</p>"},{"location":"entity/components/#options_6","title":"Options","text":"Property Type Description Default Value text* string It is a message to be displayed. - link string It is a link where the user will be redirected. - links array It is array of objects to add into text -"},{"location":"entity/components/#links","title":"Links","text":"Property Type Description slug* string is used to identify the place for the link to appear. Put it inside the text, surrounded by 2 squared brackets. link* string is the link to be used. linkText* string is the text to be inserted, instead of slug. <p>See the following example usage:</p> <pre><code>{\n    \"field\": \"example_help_link\",\n    \"label\": \"\",\n    \"type\": \"helpLink\",\n    \"options\": {\n        \"text\": \"Help Link\",\n        \"link\": \"https://docs.splunk.com/Documentation\",\n    }\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#file","title":"<code>File</code>","text":"<p>See the underlying <code>@splunk/react-ui</code> component: <code>File</code>.</p> <p>By default it supports files that can be opened in text mode or with a text editor, which are files with extensions such as txt, json, xml, yaml, pem, key, crt, etc.</p> <p>It only sends file content to the server by reading it using the readAsArrayBuffer method of the FileReader class, and then decoding it into UTF-8 format, using the decode method of the TextDecoder class.</p> <p>If <code>options</code> property contains useBase64Encoding is set up as true, then readAsArrayBuffer method is replaced with readAsDataURL and obtained data are correctly proceeded to store only file content (beggining of result is removed, as it contains unwanted informations and pure encoded file content is saved). With that approach any file is stored in Base64 format.</p> <p>The file content can be validated using in-built validators such as string and regex, and a custom validator can also be implemented using a custom hook and saveValidator.</p> <p>This feature allows you to upload a single file.</p>"},{"location":"entity/components/#options_7","title":"Options","text":"Property Type Description Default Value fileSupportMessage string It displays a message inside a file component. - supportedFileTypes* array It is a list of the file types that the user can upload. - maxFileSize number It sets the maximum file size in KB that a user can upload. 500KB useBase64Encoding boolean It defines used encoding for files. If true base64 will be used, if false utf-8 is applied. false <p>See the following example usage:</p> <pre><code>{\n    \"type\": \"file\",\n    \"label\": \"SA certificate\",\n    \"help\": \"Upload service account's certificate\",\n    \"field\": \"service_account\",\n    \"options\": {\n        \"fileSupportMessage\": \"Support message\",\n        \"supportedFileTypes\": [\"pem\", \"txt\"],\n        \"maxFileSize\": 100,\n        \"useBase64Encoding\": false\n    },\n    \"validators\": [\n        {\n            \"type\": \"regex\",\n            \"pattern\": \"(-----BEGIN CERTIFICATE-----(\\n|\\r|\\r\\n)([0-9a-zA-Z\\+\\/=]{64}(\\n|\\r|\\r\\n))*([0-9a-zA-Z\\+\\/=]{1,63}(\\n|\\r|\\r\\n))?-----END CERTIFICATE-----)\"\n        }\n    ],\n    \"encrypted\": true,\n    \"required\": true\n}\n</code></pre> <p>This is how it looks in the UI:</p> <p></p>"},{"location":"entity/components/#oauth","title":"<code>OAuth</code>","text":"<p>The Oauth type entity enables us to use Oauth2.0 for user authentication. Visit the Oauth Support page to learn more.</p>"},{"location":"entity/components/#interval","title":"<code>Interval</code>","text":"<p>A Text field used to specify interval value, i.e. a number greater than or equal to 0, CRON interval or -1.</p>  Options  Property Type Description range list of numbers (2 elements) Range of allowed values <p>Supported CRON schedule:</p> <ul> <li><code>&lt;minute&gt; &lt;hour&gt; &lt;day of month&gt; &lt;month&gt; &lt;day of week&gt;</code></li> <li>Cron special characters are acceptable.  (<code>\"*\", \",\", \"/\", \"-\"</code>)</li> </ul> <p>Names of months or days are not supported.</p> <p>Note: Range option is not supposed to be used with CRON interval.</p> <p>See the following example:</p> <pre><code>{\n    \"type\": \"interval\",\n    \"label\": \"Interval\",\n    \"field\": \"interval\",\n    \"options\": {\n      \"range\": [10, 20]\n    }\n}\n</code></pre>"},{"location":"entity/components/#index","title":"<code>Index</code>","text":"<p>A field used to specify index.</p>  Attributes  Property Type Description type* string To specify the type of entity to be rendered in inputs or configuration form. field* string To define a particular entity field. label* string Text displayed next to entity field. defaultValue string The initial input value. help string Help text gives context about a fields input, such as how the input will be used. It is displayed directly below an input field. required string To specify whether the field is required or not. <p>See the following examples:</p> <p>Only required attributes provided:</p> <pre><code>{\n    \"type\": \"index\",\n    \"field\": \"index\",\n    \"label\": \"Index\"\n}\n</code></pre> <p>All attributes provided:</p> <pre><code>{\n    \"type\": \"index\",\n    \"field\": \"index\",\n    \"label\": \"Index\",\n    \"help\": \"An index is a type of data repository. Select the index in which you want to collect the events.\",\n    \"defaultValue\": \"main\",\n    \"required\": true\n}\n</code></pre> <p>Index field has two internal validators:</p> <ol> <li>REGEX that forces index names to start with a letter or digit and can only contain letters, numbers, underscores or hyphens.</li> <li>LENGTH which allows for an index name to have of 1 to 80 characters.</li> </ol> <p><code>endpointUrl</code> for that entity is <code>data/indexes?search=isInternal=0+disabled=0</code></p> <p>During the build process, new index field will be converted to a full definition and saved in the globalConfig in the output directory.</p>"},{"location":"entity/components/#custom","title":"<code>Custom</code>","text":"<p>Custom type entity enables us to create our own custom inputs within the Form components. As a result, we may include our own custom input fields on the form. Visit the Custom Control page to learn more.</p>"},{"location":"entity/help_message/","title":"Help message","text":"<p>This property allows to pass a structured description under the entity component. You can use it as a simple string text or create a string with link references for more context.</p> <p>You can also use <code>\\n</code> to start new line.</p>"},{"location":"entity/help_message/#help-properties","title":"Help Properties","text":"Property Type Description text* string is text displayed directly below input. links array array of links objects, enables including links inside text. link string if present whole text is used as a single link."},{"location":"entity/help_message/#links","title":"Links","text":"Property Type Description slug* string is used to identify the place for the link to appear. Put it inside the text, surrounded by 2 squared brackets (for <code>example_slug</code> put <code>[[example_slug]]</code> in text). link* string is the link to be used. linkText* string is the text to be inserted, instead of slug."},{"location":"entity/help_message/#usage","title":"Usage","text":"<pre><code>{\n  \"field\": \"url\",\n  \"label\": \"URL\",\n  \"type\": \"text\",\n  \"help\": {\n    \"text\": \"Enter the URL, for example \\n you can use https://splunk.github.io/addonfactory-ucc-generator/ \\n also see [[docs_link]] for more reference\",\n    \"links\":[{\n      \"slug\": \"docs_link\",\n      \"link\": \"https://splunk.github.io/addonfactory-ucc-generator/\",\n      \"linkText\": \"reference\",\n    }]\n  },\n  \"required\": true,\n}\n</code></pre>"},{"location":"entity/modifyFieldsOnValue/","title":"Modify Fields On Change","text":"<p>This feature allows to specify conditions to modify other fields based on current field value change.</p>"},{"location":"entity/modifyFieldsOnValue/#modification-object-properties","title":"Modification Object Properties","text":"Property Type Description fieldValue* string |  <code>{</code><code>pattern: string</code><code>}</code> The value of the current field that will trigger the modification. Use <code>[[any_other_value]]</code> to apply modifications for any value other than those explicitly specified.Alternatively, you can provide an object with a <code>pattern</code> property to validate the value against a regular expression. mode string Mode that adds possibility to use modification only on certain mode. One of ( <code>create</code> / <code>edit</code> / <code>clone</code> / <code>config</code> ) fieldsToModify array List of fields modifications that will be applied after com ponent value will match."},{"location":"entity/modifyFieldsOnValue/#fieldstomodify-properties","title":"fieldsToModify Properties","text":"Property Type Description fieldId* string Used to identify field that modifications will be applied to display boolean Declares display property of target component value string, number or boolean Declares current value of target component disabled boolean Declares if component should be disabled (enable = false) required boolean Declares if component should be required help string Declares help text label string Declares label text markdownMessage object Declares markdown message to display"},{"location":"entity/modifyFieldsOnValue/#markdownmessage-properties","title":"markdownMessage Properties","text":"Property Type Description markdownType* string Declare type of markdown. Accepts: \u201ctext\u201d, \u201chybrid\u201d, \u201clink\u201d text* string Used for all types to declare message content color string Used for \u201ctext\u201d type to specify color of displayied text. Accepts all CSS colors token string Used for \u201chybrid\u201d type to declare string that will be swapped into link linkText string Used for \u201chybrid\u201d type to declare string that will put in place of token link string Used for \u201chybrid\u201d and \u201clink\u201d types to declare url that will use for redirection"},{"location":"entity/modifyFieldsOnValue/#usage","title":"Usage","text":"Checkbox <pre><code>{\n    \"type\": \"checkbox\",\n    \"label\": \"Example Checkbox\",\n    \"field\": \"account_checkbox\",\n    \"help\": \"This is an example checkbox for the account entity\",\n    \"modifyFieldsOnValue\": [\n        {\n            \"fieldValue\": 1,\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"account_radio\",\n                    \"disabled\": false\n                },\n                {\n                    \"fieldId\": \"endpoint\",\n                    \"display\": true\n                }\n            ]\n        },\n        {\n            \"fieldValue\": 0,\n            \"mode\": \"edit\",\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"account_radio\",\n                    \"disabled\": true\n                },\n                {\n                    \"fieldId\": \"endpoint\",\n                    \"display\": false\n                }\n            ]\n        }\n    ]\n},\n</code></pre> Text input <pre><code>{\n    \"label\": \"Username\",\n    \"type\": \"text\",\n    \"help\": \"Enter the username for this account.\",\n    \"field\": \"username\",\n    \"modifyFieldsOnValue\": [\n        {\n            \"fieldValue\": \"[[any_other_value]]\",\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"some_other_field\",\n                    \"disabled\": false,\n                    \"display\": true,\n                    \"label\": \"New label for other values\",\n                    \"value\": \"New value for other values\",\n                    \"help\": \"New help for other values\",\n                    \"markdownMessage\": {\n                        \"markdownType\": \"text\",\n                        \"text\": \"New markdown message for other values\",\n                        \"color\": \"red\"\n                    },\n                    \"required\": false\n                }\n            ]\n        },\n        {\n            \"fieldValue\": \"a\",\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"some_other_field\",\n                    \"display\": true,\n                    \"disabled\": true,\n                    \"label\": \"New label for value 'a' as username\",\n                    \"value\": \"New value for value 'a' as username\",\n                    \"help\": \"New help for value 'a' as username\",\n                    \"markdownMessage\": {\n                        \"markdownType\": \"link\",\n                        \"text\": \"New markdown message for value 'a' as username\",\n                        \"link\": \"https://splunk.github.io/addonfactory-ucc-generator/\"\n                    },\n                    \"required\": true\n                }\n            ]\n        },\n        {\n            \"fieldValue\": \"aa\",\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"some_other_field\",\n                    \"disabled\": false,\n                    \"display\": false,\n                    \"label\": \"New label for value 'aa' as username\",\n                    \"value\":\"New value for value 'aa' as username\",\n                    \"help\": \"New help for value 'aa' as username\",\n                    \"required\": true\n                }\n            ]\n        },\n        {\n            \"fieldValue\": \"aaa\",\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"some_other_field\",\n                    \"disabled\": true,\n                    \"display\": true,\n                    \"label\": \"New label for value 'aaa' as username\",\n                    \"value\": \"New value for value 'aaa' as username\",\n                    \"help\":  \"New help for value 'aaa' as username\",\n                    \"markdownMessage\": {\n                        \"markdownType\": \"hybrid\",\n                        \"text\": \"New markdown message token 'aaa' as username\",\n                        \"link\": \"https://splunk.github.io/addonfactory-ucc-generator/\",\n                        \"token\": \"token\",\n                        \"linkText\": \"for value\"\n                    },\n                    \"required\": true\n                }\n            ]\n        },\n        {\n            \"fieldValue\": \"aaaa\",\n            \"mode\": \"edit\",\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"some_other_field\",\n                    \"disabled\": false,\n                    \"display\": false,\n                    \"label\": \"New label for value 'aaaa' as username used only when editing entity\",\n                    \"value\": \"New value for value 'aaaa' as username used only when editing entity\",\n                    \"help\":  \"New help for value 'aaaa' as username used only when editing entity\",\n                    \"markdownMessage\": {\n                        \"markdownType\": \"text\",\n                        \"text\": \"markdown message plain text used only when editing entity\"\n                    },\n                    \"required\": false\n                }\n            ]\n        }\n    ]\n},\n</code></pre>"},{"location":"entity/modifyFieldsOnValue/#troubleshooting","title":"Troubleshooting","text":"<p>Examples of issue you might encounter</p> Usage Modification with Checkbox component <p>Make sure the fieldValue fields are declared as <code>1</code> for any <code>truthy</code>(checked) value and <code>0</code> for any <code>falsy</code>(unchecked) value as it is mapped considering those values. Checkbox by default do not have any value at all, so if you want to consider also this state use <code>[[any_other_value]]</code> as it will also consider basic state.</p> <pre><code>{\n    \"type\": \"checkbox\",\n    \"label\": \"Example Checkbox\",\n    \"field\": \"account_checkbox\",\n    \"help\": \"This is an example checkbox for the account entity\",\n    \"modifyFieldsOnValue\": [\n        {\n            \"fieldValue\": 1,\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"account_radio\",\n                    \"disabled\": false\n                },\n                {\n                    \"fieldId\": \"endpoint\",\n                    \"display\": true\n                }\n            ]\n        },\n        {\n            \"fieldValue\": 0,\n            \"mode\": \"edit\",\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"account_radio\",\n                    \"disabled\": true\n                },\n                {\n                    \"fieldId\": \"endpoint\",\n                    \"display\": false\n                }\n            ]\n        },\n        {\n            \"fieldValue\": \"[[any_other_value]]\",\n            \"fieldsToModify\": [\n                {\n                    \"fieldId\": \"account_radio\",\n                    \"disabled\": true,\n                    \"display\": true\n                },\n                {\n                    \"fieldId\": \"endpoint\",\n                    \"display\": true,\n                    \"display\": true\n                }\n            ]\n        }\n    ]\n},\n</code></pre>"},{"location":"entity/userPlayground/","title":"User Playground","text":"<p>This is a live, interactive environment where you can preview and validate different entities that are used in Splunk UCC.</p> <p>The Storybook playground is designed to:</p> <ul> <li>Preview UCC form components as they would appear in the actual app.</li> <li>Provide a code editor panel where you can tweak the entities in real-time.</li> <li>Validate the structure and content of each entity.</li> </ul> <p>You can find the playground live here</p>"},{"location":"entity/userPlayground/#how-to-use-playground","title":"How to use Playground","text":"<p>Navigate to <code>Users Playground &gt; Custom Entity &gt; Code Panel</code> and replace the entity array with your own entity to check if any unknown key-value pair is present.</p> <p>This story accepts a single <code>args</code> prop in the following format:</p> <pre><code>{\n  entity: [\n    {\n      type: \"text\",\n      label: \"Username\",\n      field: \"username\",\n      required: true,\n    },\n    // Add more entities as needed\n  ];\n}\n</code></pre> <p>Note: If the output does not appear or fails to update after changes, try clicking the refresh button in the top-left corner of the Storybook UI to reload the playground or again copy-paste your updated code in the editor.</p>"},{"location":"entity/userPlayground/#real-time-validation","title":"Real-Time Validation","text":"<p>Each entity is validated against schema. If validation fails:</p> <ul> <li>You\u2019ll see a custom UI error.</li> <li>The form will not render that entity.</li> </ul> <p></p>"},{"location":"entity/userPlayground/#json-syntax-warnings","title":"JSON Syntax Warnings","text":"<p>Since Storybook accepts already-parsed objects, you won\u2019t get syntax errors like trailing commas.</p> <p>When editing args in the Storybook UI:</p> <ul> <li>Do not add trailing commas (JavaScript may allow it, but JSON doesn\u2019t).</li> <li>Use standard JSON syntax (quoted keys, double quotes for strings, etc.).</li> </ul>"},{"location":"entity/validators/","title":"Validators","text":"<p>Validators define acceptable values for fields.</p> <p>Specifying validators for all applicable entities is strongly recommended. Omitting validators can expose forms to security risks and cause unexpected behavior. If the value is validated and encapsulated downstream, add an empty array to suppress the warning: <pre><code>\"validators\": []\n</code></pre></p>"},{"location":"entity/validators/#common-properties","title":"Common Properties","text":"<ul> <li><code>type</code>* specifies which validator type to use.</li> <li><code>errorMsg</code> is an optional parameter used to specify a custom error message that displays when validation fails. UCC provides default error messages.</li> </ul>"},{"location":"entity/validators/#string","title":"String Properties","text":"<ul> <li><code>minLength</code>* specifies the minimum number of characters allowed.</li> <li><code>maxLength</code>* specifies the maximum number of characters allowed.</li> </ul> <p>See the following example usage:</p> <pre><code>{\n  \"type\": \"text\",\n  \"label\": \"Index Name\",\n  \"validators\": [\n      {\n        \"type\": \"string\",\n        \"errorMsg\": \"Length of index name should be between 1 to 80 characters.\",\n        \"minLength\": 1,\n        \"maxLength\": 80\n      }\n  ],\n  \"field\": \"index_name\"\n}\n</code></pre>"},{"location":"entity/validators/#regex","title":"Regex Properties","text":"<ul> <li><code>pattern</code>* is a Regex pattern.</li> </ul> <p>See the following example usage:</p> <pre><code>{\n  \"type\": \"text\",\n  \"label\": \"Name\",\n  \"validators\": [\n      {\n        \"type\": \"regex\",\n        \"errorMsg\": \"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n        \"pattern\": \"^[a-zA-Z]\\\\w*$\"\n      }\n  ],\n  \"field\": \"name_field\"\n}\n</code></pre>"},{"location":"entity/validators/#number","title":"Number Properties","text":"<ul> <li><code>range</code>* is the range within which the target value should fall.</li> <li><code>isInteger</code> is the boolean which target only integer value if sets true. Default value is false</li> </ul> <p>See the following example usage:</p> <pre><code>{\n  \"type\": \"text\",\n  \"label\": \"Port\",\n  \"validators\": [\n      {\n        \"type\": \"number\",\n        \"range\": [1, 65535],\n        \"isInteger\": true\n      }\n  ],\n  \"field\": \"port\"\n}\n</code></pre>"},{"location":"entity/validators/#url","title":"URL","text":"<p>No parameters are needed.</p> <p>If you\u2019re using a regexp internally, this regex checks whether a field value is a URL or not.</p> <p>See the following example usage:</p> <pre><code>{\n  \"type\": \"text\",\n  \"label\": \"Url\",\n  \"validators\": [\n      {\n        \"type\": \"url\",\n      }\n  ],\n  \"field\": \"url\"\n}\n</code></pre>"},{"location":"entity/validators/#email","title":"Email","text":"<p>No parameters are needed.</p> <p>Using a regexp internally is recommended by WHATWG.</p> <p>See the following example usage:</p> <pre><code>{\n  \"type\": \"text\",\n  \"label\": \"Email\",\n  \"validators\": [\n      {\n        \"type\": \"email\",\n      }\n  ],\n  \"field\": \"email\"\n}\n</code></pre>"},{"location":"entity/validators/#ipv4","title":"IPV4","text":"<p>No parameters are needed.</p> <p>Internally, it checks the IPV4 address using this regex.</p> <p>See the following example usage:</p> <pre><code>{\n    \"field\": \"testIpv4\",\n    \"label\": \"Test Ipv4\",\n    \"type\": \"text\",\n    \"validators\": [\n        {\n            \"type\": \"ipv4\"\n        }\n    ]\n}\n</code></pre>"},{"location":"entity/validators/#date","title":"Date","text":"<p>No parameters are needed.</p> <p>It is validated if the field\u2019s value is a date in the ISO 8601 format. It uses the regex from moment.js.</p> <p>See the following example usage:</p> <pre><code>{\n    \"field\": \"testDate\",\n    \"label\": \"Test Date\",\n    \"type\": \"text\",\n    \"validators\": [\n        {\n            \"type\": \"date\"\n        }\n    ]\n}\n</code></pre>"},{"location":"entity/validators/#combinations","title":"Combinations","text":"<p>You can combine multiple validators in a single array.</p> <p>Example:</p> <pre><code>{\n    \"field\": \"https_url\",\n    \"label\": \"HTTPS only URL\",\n    \"type\": \"text\",\n    \"validators\": [\n        {\n            \"type\": \"url\"\n        },\n        {\n          \"type\": \"regex\",\n          \"errorMsg\": \"HTTPS only\",\n          \"pattern\": \"^https:\\/\\/\"\n        }\n    ]\n}\n</code></pre>"},{"location":"inputs/","title":"Inputs","text":"<p>The input page stores configuration information for data collection. Multiple inputs can be created on the Inputs page.</p> <p>Developers are required to add services in the global config file to create a new Input. If multiple services are provided, a dropdown field will appear on the Inputs page. In contrast, a button will be displayed for a single service.</p>"},{"location":"inputs/#properties","title":"Properties","text":"Property Type Description title* string - description string It provides a brief summary of an inputs page. subDescription object It provides broader description of an inputs page. table object It displays input stanzas in a tabular format. groupsMenu array This property allows you to enable the multi-level menu feature. services* array It specifies a list of modular inputs. capabilities object Specifies the capabilities required for the given methods. The provided capabilities will be generated in restmap.conf. For more information, refer to the Splunk documentation on restmap.conf. readonlyFieldId string A field of the boolean entity that UCC checks for each input. If the field\u2019s value is truthful, the corresponding input cannot be edited from the UI. There is no way to change this from the UI; it is supposed to be changed via REST. hideFieldId string A field of the boolean entity that UCC checks for each input. If the field\u2019s value is truthful, the corresponding input is hidden from the UI. There is no way to change this from the UI; it is supposed to be changed via REST. Check out an example below. useInputToggleConfirmation boolean When true, displays a confirmation modal before toggling an input\u2019s status between active and inactive."},{"location":"inputs/#services-properties","title":"Services Properties","text":"Property Type Description name* string It defines the particular service name. title* string It shows the title of the service. subTitle string It shows the subtitle (or additional information) of the service. entity* array It is a list of fields and their properties. groups array It is used to divide forms into distinct sections, each comprising relevant fields. style string By specifying this property in the global configuration file, the forms can either be opened as a new page or in a dialog. Supported values are \u201cpage\u201d or \u201cdialog\u201d.  The default value is dialog. options object This property allows you to enable the saveValidator feature. hook object It is used to add custom behaviour to forms. Visit the Custom Hook page to learn more. warning object It is used to add the custom warning message for each of the modes of \u2018create\u2019, \u2018edit\u2019, \u2018config\u2019, and \u2018clone\u2019. The message is displayed on the form. inputHelperModule string A module that contains <code>validate_input</code> and <code>stream_events</code> methods. By default it is not used. conf string Configuration name for a rest handler. restHandlerName string It specify name of the REST handler script, that provides fields, models and validators for the fields supported under the specified input and any specific actions to be performed on CRUD operations for the given input. (Do NOT use with restHandlerModule or restHandlerClass) restHandlerModule string It specify name of the REST handler script that implements the custom actions to be performed on CRUD operations for the given input. (Use with restHandlerClass) restHandlerClass string It specify name of the class present in the restHandlerModule, which implements methods like handleCreate, handleEdit, handleList, handleDelete and is child class of splunktaucclib.rest_handler.admin_external.AdminExternalHandler. (Use with restHandlerModule) hideForPlatform string Defines for which platform element should be hidden from UI perspective. Currently only two platforms are supported <code>cloud</code> or <code>enterprise</code>. disableNewInput boolean Specifies whether a service\u2019s new input should be disabled on creation or not. If set to <code>True</code>, any new input created from the service will remain disabled until manually enabled by the user. Default: false formTitle string When provided, the <code>formTitle</code> parameter will override the default modal title format of <code>\"Add serviceName\"</code>. The modal will display <code>Add</code> followed by the value of formTitle, allowing for a custom, context-specific title. This customization also applies to modals for <code>Clone</code>, <code>Edit</code>, and <code>Delete</code> actions."},{"location":"inputs/#usage","title":"Usage","text":"<p>This is how the global configuration looks like without tabs</p> Expand to see full json code  <pre><code>{\n  \"pages\": {\n    \"configuration\": {\n      \"title\": \"\",\n      \"tabs\": [\n        {\n          \"name\": \"a\",\n          \"title\": \"\",\n          \"entity\": []\n        }\n      ]\n    },\n    \"inputs\": {\n      \"services\": [\n        {\n          \"name\": \"demo_input\",\n          \"conf\": \"some_conf\",\n          \"entity\": [\n            {\n              \"type\": \"text\",\n              \"label\": \"Name\",\n              \"validators\": [\n                {\n                  \"type\": \"regex\",\n                  \"errorMsg\": \"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n                  \"pattern\": \"^[a-zA-Z]\\\\w*$\"\n                },\n                {\n                  \"type\": \"string\",\n                  \"errorMsg\": \"Length of input name should be between 1 and 100\",\n                  \"minLength\": 1,\n                  \"maxLength\": 100\n                }\n              ],\n              \"field\": \"name\",\n              \"help\": \"A unique name for the data input.\",\n              \"required\": true\n            },\n            {\n              \"type\": \"text\",\n              \"label\": \"Interval\",\n              \"validators\": [\n                {\n                  \"type\": \"regex\",\n                  \"errorMsg\": \"Interval must be an integer.\",\n                  \"pattern\": \"^\\\\-[1-9]\\\\d*$|^\\\\d*$\"\n                }\n              ],\n              \"defaultValue\": \"300\",\n              \"field\": \"interval\",\n              \"help\": \"Time interval of the data input, in seconds.\",\n              \"required\": true\n            },\n            {\n              \"type\": \"singleSelect\",\n              \"field\": \"select1\",\n              \"label\": \"Select 1\",\n              \"help\": \"Default value is Numeric 1\",\n              \"defaultValue\": 1,\n              \"options\": {\n                \"autoCompleteFields\": [\n                  {\n                    \"value\": 1,\n                    \"label\": \"Numeric 1\"\n                  }\n                ]\n              }\n            },\n            {\n              \"type\": \"singleSelect\",\n              \"field\": \"select2\",\n              \"label\": \"Select 2\",\n              \"help\": \"Default value is Numeric 3\",\n              \"defaultValue\": 3,\n              \"options\": {\n                \"autoCompleteFields\": [\n                  {\n                    \"value\": 3,\n                    \"label\": \"Numeric 3\"\n                  }\n                ]\n              }\n            },\n            {\n              \"type\": \"multipleSelect\",\n              \"field\": \"multipleselect1\",\n              \"label\": \"MultiSelect 1\",\n              \"help\": \"Default value is Numeric 1\",\n              \"defaultValue\": \"1\",\n              \"options\": {\n                \"items\": [\n                  {\n                    \"value\": 1,\n                    \"label\": \"Numeric 1\"\n                  }\n                ]\n              }\n            },\n            {\n              \"type\": \"singleSelect\",\n              \"label\": \"Account to use\",\n              \"options\": {\n                \"autoCompleteFields\": [\n                  {\n                    \"value\": \"value1\",\n                    \"label\": \"Value1\"\n                  },\n                  {\n                    \"value\": \"value2\",\n                    \"label\": \"Value2\"\n                  }\n                ]\n              },\n              \"help\": \"Account to use for this input.\",\n              \"field\": \"account\",\n              \"required\": true\n            },\n            {\n              \"type\": \"text\",\n              \"label\": \"sometext\",\n              \"validators\": [\n                {\n                  \"type\": \"string\",\n                  \"errorMsg\": \"Length of input name should be between 1 and 100\",\n                  \"minLength\": 1,\n                  \"maxLength\": 1000\n                }\n              ],\n              \"field\": \"sometext\",\n              \"help\": \"A unique text for the data input.\",\n              \"required\": true\n            },\n            {\n              \"type\": \"singleSelect\",\n              \"label\": \"Some Select Dropdown\",\n              \"options\": {\n                \"disableSearch\": true,\n                \"autoCompleteFields\": [\n                  {\n                    \"value\": \"DEBUG\",\n                    \"label\": \"DEBUG\"\n                  },\n                  {\n                    \"value\": \"INFO\",\n                    \"label\": \"INFO\"\n                  },\n                  {\n                    \"value\": \"WARN\",\n                    \"label\": \"WARN\"\n                  },\n                  {\n                    \"value\": \"ERROR\",\n                    \"label\": \"ERROR\"\n                  },\n                  {\n                    \"value\": \"CRITICAL\",\n                    \"label\": \"CRITICAL\"\n                  }\n                ]\n              },\n              \"defaultValue\": \"INFO\",\n              \"field\": \"someselectdropdown\"\n            },\n            {\n              \"type\": \"checkboxGroup\",\n              \"label\": \"CheckboxGroupTitle\",\n              \"field\": \"api3\",\n              \"options\": {\n                \"groups\": [\n                  {\n                    \"label\": \"Group 1\",\n                    \"options\": {\n                      \"isExpandable\": true,\n                      \"expand\": true\n                    },\n                    \"fields\": [\n                      \"rowUnderGroup1\"\n                    ]\n                  },\n                  {\n                    \"label\": \"Group 3\",\n                    \"options\": {\n                      \"isExpandable\": true,\n                      \"expand\": true\n                    },\n                    \"fields\": [\n                      \"field223\", \"160validation\"\n                    ]\n                  }\n                ],\n                \"rows\": [\n                  {\n                    \"field\": \"rowWithoutGroup\",\n                    \"input\": {\n                      \"defaultValue\": 1,\n                      \"required\": true\n                    }\n                  },\n                  {\n                    \"field\": \"rowUnderGroup1\",\n                    \"checkbox\": {\n                      \"label\": \"Row under Group 1\",\n                      \"defaultValue\": true\n                    },\n                    \"input\": {\n                      \"defaultValue\": 1200,\n                      \"required\": false\n                    }\n                  },\n                  {\n                    \"field\": \"field223\",\n                    \"checkbox\": {\n                      \"label\": \"Required field\",\n                      \"defaultValue\": true\n                    },\n                    \"input\": {\n                      \"required\": true\n                    }\n                  },\n                  {\n                    \"field\": \"160validation\",\n                    \"checkbox\": {\n                      \"label\": \"from 1 to 60 validation\"\n                    },\n                    \"input\": {\n                      \"validators\": [\n                        {\n                          \"type\": \"number\",\n                          \"range\": [1, 60]\n                        }\n                      ]\n                    }\n                  }\n                ]\n              }\n            }\n          ],\n          \"title\": \"demo_input\",\n          \"subTitle\": \" This is a demo input\"\n        },\n        {\n          \"name\": \"demo_input_page\",\n          \"style\": \"page\",\n          \"entity\": [\n            {\n              \"type\": \"text\",\n              \"label\": \"Name\",\n              \"validators\": [\n                {\n                  \"type\": \"regex\",\n                  \"errorMsg\": \"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n                  \"pattern\": \"^[a-zA-Z]\\\\w*$\"\n                },\n                {\n                  \"type\": \"string\",\n                  \"errorMsg\": \"Length of input name should be between 1 and 100\",\n                  \"minLength\": 1,\n                  \"maxLength\": 100\n                }\n              ],\n              \"field\": \"name\",\n              \"help\": \"A unique name for the data input.\",\n              \"required\": true\n            },\n            {\n              \"field\": \"config2_help_link\",\n              \"label\": \"\",\n              \"type\": \"helpLink\",\n              \"options\": {\n                \"text\": \"SSL configuration documentation\",\n                \"link\": \"https://ta-jira-service-desk-simple-addon.readthedocs.io/en/latest/configuration.html\"\n              }\n            },\n            {\n              \"type\": \"checkbox\",\n              \"label\": \"Hide in UI boolean value\",\n              \"field\": \"hide_in_ui\",\n              \"options\": {\n                \"display\": false\n              }\n            },\n            {\n              \"type\": \"checkbox\",\n              \"label\": \"Is input readonly?\",\n              \"field\": \"hard_disabled\",\n              \"options\": {\n                \"display\": false\n              }\n            },\n            {\n              \"type\": \"text\",\n              \"label\": \"Interval\",\n              \"validators\": [\n                {\n                  \"type\": \"regex\",\n                  \"errorMsg\": \"Interval must be an integer.\",\n                  \"pattern\": \"^\\\\-[1-9]\\\\d*$|^\\\\d*$\"\n                }\n              ],\n              \"defaultValue\": \"300\",\n              \"field\": \"interval\",\n              \"help\": \"Time interval of the data input, in seconds.\",\n              \"required\": true\n            },\n            {\n              \"type\": \"singleSelect\",\n              \"label\": \"Account to use\",\n              \"options\": {\n                \"autoCompleteFields\": [\n                  {\n                    \"value\": \"value1\",\n                    \"label\": \"Value1\"\n                  },\n                  {\n                    \"value\": \"value2\",\n                    \"label\": \"Value2\"\n                  }\n                ]\n              },\n              \"help\": \"Account to use for this input.\",\n              \"field\": \"account\",\n              \"required\": true\n            },\n            {\n              \"type\": \"text\",\n              \"label\": \"sometext\",\n              \"validators\": [\n                {\n                  \"type\": \"string\",\n                  \"errorMsg\": \"Length of input name should be between 1 and 100\",\n                  \"minLength\": 1,\n                  \"maxLength\": 1000\n                }\n              ],\n              \"field\": \"sometext\",\n              \"help\": \"A unique text for the data input.\",\n              \"required\": true\n            },\n            {\n              \"type\": \"singleSelect\",\n              \"label\": \"Some Select Dropdown\",\n              \"options\": {\n                \"disableSearch\": true,\n                \"autoCompleteFields\": [\n                  {\n                    \"value\": \"DEBUG\",\n                    \"label\": \"DEBUG\"\n                  },\n                  {\n                    \"value\": \"INFO\",\n                    \"label\": \"INFO\"\n                  },\n                  {\n                    \"value\": \"WARN\",\n                    \"label\": \"WARN\"\n                  },\n                  {\n                    \"value\": \"ERROR\",\n                    \"label\": \"ERROR\"\n                  },\n                  {\n                    \"value\": \"CRITICAL\",\n                    \"label\": \"CRITICAL\"\n                  }\n                ]\n              },\n              \"defaultValue\": \"INFO\",\n              \"field\": \"someselectdropdown\"\n            },\n            {\n              \"type\": \"checkboxGroup\",\n              \"label\": \"CheckboxGroupTitle\",\n              \"field\": \"api3\",\n              \"options\": {\n                \"groups\": [\n                  {\n                    \"label\": \"Group 1\",\n                    \"options\": {\n                      \"isExpandable\": true,\n                      \"expand\": true\n                    },\n                    \"fields\": [\n                      \"rowUnderGroup1\"\n                    ]\n                  },\n                  {\n                    \"label\": \"Group 3\",\n                    \"options\": {\n                      \"isExpandable\": true,\n                      \"expand\": true\n                    },\n                    \"fields\": [\n                      \"field223\", \"160validation\"\n                    ]\n                  }\n                ],\n                \"rows\": [\n                  {\n                    \"field\": \"rowWithoutGroup\",\n                    \"input\": {\n                      \"defaultValue\": 1,\n                      \"required\": true\n                    }\n                  },\n                  {\n                    \"field\": \"rowUnderGroup1\",\n                    \"checkbox\": {\n                      \"label\": \"Row under Group 1\",\n                      \"defaultValue\": true\n                    },\n                    \"input\": {\n                      \"defaultValue\": 1200,\n                      \"required\": false\n                    }\n                  },\n                  {\n                    \"field\": \"field223\",\n                    \"checkbox\": {\n                      \"label\": \"Required field\",\n                      \"defaultValue\": true\n                    },\n                    \"input\": {\n                      \"required\": true\n                    }\n                  },\n                  {\n                    \"field\": \"160validation\",\n                    \"checkbox\": {\n                      \"label\": \"from 1 to 60 validation\"\n                    },\n                    \"input\": {\n                      \"validators\": [\n                        {\n                          \"type\": \"number\",\n                          \"range\": [1, 60]\n                        }\n                      ]\n                    }\n                  }\n                ]\n              }\n            }\n          ],\n          \"title\": \"Demo input page\"\n        },\n        {\n          \"name\": \"demo_input_custom\",\n          \"entity\": [\n            {\n              \"type\": \"text\",\n              \"label\": \"Name\",\n              \"validators\": [\n                {\n                  \"type\": \"regex\",\n                  \"errorMsg\": \"Input Name must begin with a letter and consist exclusively of alphanumeric characters and underscores.\",\n                  \"pattern\": \"^[a-zA-Z]\\\\w*$\"\n                },\n                {\n                  \"type\": \"string\",\n                  \"errorMsg\": \"Length of input name should be between 1 and 100\",\n                  \"minLength\": 1,\n                  \"maxLength\": 100\n                }\n              ],\n              \"field\": \"name\",\n              \"help\": \"A unique name for the data input.\",\n              \"required\": true\n            },\n            {\n              \"type\": \"text\",\n              \"label\": \"Interval\",\n              \"validators\": [\n                {\n                  \"type\": \"regex\",\n                  \"errorMsg\": \"Interval must be an integer.\",\n                  \"pattern\": \"^\\\\-[1-9]\\\\d*$|^\\\\d*$\"\n                }\n              ],\n              \"defaultValue\": \"300\",\n              \"field\": \"interval\",\n              \"help\": \"Time interval of the data input, in seconds.\",\n              \"required\": true\n            }\n          ],\n          \"title\": \"demo_input_custom\",\n          \"formTitle\": \"custom header\"\n        }\n      ],\n      \"title\": \"Inputs\",\n      \"description\": \"Manage your data inputs\",\n      \"table\": {\n        \"actions\": [\"edit\", \"delete\", \"search\", \"clone\"],\n        \"header\": [\n          {\n            \"label\": \"Name\",\n            \"field\": \"name\"\n          },\n          {\n            \"label\": \"Interval\",\n            \"field\": \"interval\"\n          },\n          {\n            \"label\": \"Index\",\n            \"field\": \"index\"\n          },\n          {\n            \"label\": \"Status\",\n            \"field\": \"disabled\"\n          },\n          {\n            \"label\": \"Select Dropdown\",\n            \"field\": \"someselectdropdown1\"\n          }\n        ],\n        \"moreInfo\": [\n          {\n            \"label\": \"Name\",\n            \"field\": \"name\"\n          },\n          {\n            \"label\": \"Interval\",\n            \"field\": \"interval\"\n          },\n          {\n            \"label\": \"Index\",\n            \"field\": \"index\"\n          },\n          {\n            \"label\": \"Status\",\n            \"field\": \"disabled\",\n            \"mapping\": {\n              \"1\": \"Disabled\",\n              \"true\": \"Disabled\",\n              \"false\": \"Enabled\"\n            }\n          },\n          {\n            \"label\": \"Exported\",\n            \"field\": \"hard_disabled\",\n            \"mapping\": {\n              \"1\": \"Yes\",\n              \"0\": \"No\",\n              \"f\": \"No\"\n            }\n          },\n          {\n            \"label\": \"Select Dropdown\",\n            \"field\": \"someselectdropdown2\"\n          }\n        ]\n      },\n      \"readonlyFieldId\": \"hard_disabled\",\n      \"hideFieldId\": \"hide_in_ui\"\n    },\n    \"dashboard\": {\n      \"panels\": [\n        {\n          \"name\": \"default\"\n        }\n      ]\n    }\n  },\n  \"meta\": {\n    \"name\": \"demo_addon_for_splunk\",\n    \"restRoot\": \"demo_addon_for_splunk\",\n    \"version\": \"5.32.0R0e2087fe\",\n    \"displayName\": \"Demo Add-on for Splunk\",\n    \"schemaVersion\": \"0.0.3\"\n  }\n}\n</code></pre>"},{"location":"inputs/#output","title":"Output","text":""},{"location":"inputs/helper/","title":"Input Helper Module","text":"<p>Input scripts are regenerated during every build step, in order to keep the arguments and options up to date with the global config. To not discard changes made by developers, additional helper modules were introduced. Those modules must contain <code>validate_input</code> and <code>stream_events</code> methods (see example below). They are created if they do not exist, but they are not updated by UCC. A script then imports such a module and calls the two methods.</p> <p>Helper files are placed in the <code>bin</code> directory. In order to use helper files, specify <code>inputHelperModule</code> parameter. This will create a new file: <code>{inputHelperModule}.py</code>.</p>"},{"location":"inputs/helper/#usage","title":"Usage","text":"<pre><code>\"pages\": {\n    \"inputs\": {\n        \"services\": [\n            {\n                \"name\": \"example_input_one\",\n                \"title\": \"Example Input\",\n                \"entity\": [],\n                \"inputHelperModule\": \"my_module\"\n            }\n        ]\n    }\n},\n</code></pre> <p>This will create <code>my_module.py</code> (if it does not exist) file in the <code>bin</code> directory. The input script <code>example_input_one</code> will import this module and call its methods.</p>"},{"location":"inputs/helper/#module-content","title":"Module content","text":"<p>The file must contain the following two functions:</p> <ul> <li><code>validate_input(definition: smi.ValidationDefinition)</code></li> <li><code>stream_events(inputs: smi.InputDefinition, event_writer: smi.EventWriter)</code></li> </ul> <pre><code>from splunklib import modularinput as smi\n\n\ndef validate_input(definition: smi.ValidationDefinition):\n    ...\n\n\ndef stream_events(inputs: smi.InputDefinition, event_writer: smi.EventWriter):\n    ...\n</code></pre> <p>The two methods\u2019 bodies should be filled by the developer.</p> <p>Alternatively, if you want to have access to the instance of the input script class, you can also add the <code>self</code> parameter to the methods:</p> <pre><code>from splunklib import modularinput as smi\n\n\ndef validate_input(self, definition: smi.ValidationDefinition):\n    ...\n\n\ndef stream_events(self, inputs: smi.InputDefinition, event_writer: smi.EventWriter):\n    ...\n</code></pre> <p>Instead of <code>self</code>, you can also use any other name, but it must be the first parameter.</p>"},{"location":"inputs/multilevel_menu/","title":"Multi-level Menu","text":"<p>This feature allows us to organize the input services into different categories. As a result, each group/category will have a separate sub-menu that can include numerous types of input services. Inputs services can also belong to multiple groups/categories.</p> <p>Using the Custom Hook, <code>groupName</code> can be saved in any form field for a specific inputs service stanza.</p> <p><code>Tabs</code> and <code>Multi-level menu</code> feature cannot be used together.</p>"},{"location":"inputs/multilevel_menu/#usage","title":"Usage","text":"<pre><code>\"inputs\": {\n    \"title\": \"Inputs\",\n    \"table\": {},\n    \"groupsMenu\": [\n        {\n            \"groupName\": \"group_one\",\n            \"groupTitle\": \"Group One\",\n            \"groupServices\": [\"example_input_one\", \"example_input_two\"]\n        },\n        {\n            \"groupName\": \"example_input_three\", \n            \"groupTitle\": \"Example Input Three\"\n        },\n        {\n            \"groupName\": \"group_two\",\n            \"groupTitle\": \"Group Two\",\n            \"groupServices\": [\"example_input_two\", \"example_input_four\"]\n        }\n    ],\n    \"services\": [\n        {\n            \"name\": \"example_input_one\",\n            \"title\": \"Distinct Input One\"\n            \"entity\": []\n        },\n        {\n            \"name\": \"example_input_two\",\n            \"title\": \"Common Input Service\"\n            \"entity\": []\n        },\n        {\n            \"name\": \"example_input_three\",\n            \"title\": \"Example Input Three\"\n            \"entity\": []\n        },\n        {\n            \"name\": \"example_input_four\",\n            \"title\": \"Distinct Input Two\"\n            \"entity\": []\n        }\n    ]\n}\n</code></pre> <p>If <code>groupServices</code> is provided under a group, then all services listed in the array will be displayed in the sub-menu. If it is not provided, then that group will be considered as a service.</p>"},{"location":"inputs/multilevel_menu/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p> <p></p>"},{"location":"inputs/tabs/","title":"Tabs","text":"<p>This feature allows you to separate inputs based on their service name. Use the tabs feature when multiple inputs services are provided in the global configuration file, and you want to display each input service in a separate tab (and table).</p> <p>The <code>table</code> property must be present in the services to use the tabs feature.</p> <p>If <code>title</code> and <code>description</code> are provided in the global configuration file, then it would change when changing the tab.</p>"},{"location":"inputs/tabs/#usage","title":"Usage","text":"<pre><code>\"pages\": {\n    \"inputs\": {\n        \"title\": \"Inputs\",\n        \"services\": [\n            {\n                \"name\": \"example_input_one\",\n                \"description\": \"This is a description for Input One\",\n                \"title\": \"Example Input\",\n                \"entity\": [],\n                \"table\": {\n                    \"actions\": [\n                        \"edit\",\n                        \"delete\",\n                        \"clone\"\n                    ],\n                    \"header\": [],\n                    \"moreInfo\": []\n                },\n                \"warning\": {\n                    \"create\": \"Warning text for create mode\",\n                    \"edit\": \"Warning text for edit mode\",\n                    \"clone\": \"Warning text for clone mode\",\n                    \"config\": \"Warning text for config mode\",\n                }\n            },\n            {\n                \"name\": \"example_input_two\",\n                \"description\": \"This is a description for Input Two\",\n                \"title\": \"Example Input Two\",\n                \"entity\": [],\n                \"table\": {\n                    \"actions\": [\n                        \"edit\",\n                        \"delete\",\n                        \"clone\"\n                    ],\n                    \"header\": [],\n                    \"moreInfo\": [],\n                    \"customRow\":{\n                        \"type\": \"external\",\n                        \"src\": \"custom_row\"\n                    }\n                }\n            }\n        ]\n    }\n},\n</code></pre> <p>Note:</p> <p>When using the Tabs feature, if the <code>table</code>  or <code>description</code> property is provided in the <code>inputs</code>, the error <code>instance.pages.inputs is not one of [subschema 0], [subschema 1]</code> will be displayed. </p>"},{"location":"inputs/tabs/#output","title":"Output","text":"<p>This is how it looks like in the UI:</p> <p></p>"},{"location":"options/","title":"Options","text":"<p>The options object in <code>globalConfig</code> is used to configure additional parameters for the TA.</p> <pre><code>{\n  ...\n  \"options\": {\n    \"restHandlers\": {...}\n  }\n}\n</code></pre>"},{"location":"options/#available-options","title":"Available Options","text":"<ul> <li>restHandlers</li> </ul>"},{"location":"options/rest_handlers/","title":"Rest Handlers","text":"<p>This option is used to define the rest handlers that are not generated by UCC, i.e. custom handlers developed by the user.</p>"},{"location":"options/rest_handlers/#example","title":"Example","text":"<pre><code>{\n  \"options\": {\n    \"restHandlers\": [\n      {\n        \"name\": \"StorageBuckets\",\n        \"endpoint\": \"Splunk_TA_Example_buckets\",\n        \"handlerType\": \"EAI\",\n        \"resourcePresent\": true,\n        \"registerHandler\": {\n          \"file\": \"storage_buckets.py\",\n          \"actions\": [\"list\", \"create\", \"remove\", \"edit\"]\n        },\n        \"capabilities\": {\n          \"put\": \"admin_all_objects\",\n          \"post\": \"list_storage_passwords\"\n        },\n        \"parentResource\": \"splunk_ta_uccexample\",\n        \"requestParameters\": {\n          \"create\": {\n            \"param_name\": {\n              \"required\": true,\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"edit\": {...},\n          \"remove\": {...},\n          \"list\": {...}\n        },\n        \"responseParameters\": {...}\n      }\n    ]\n  }\n}\n</code></pre> <p>The example above defines an <code>EAI</code> rest handler named <code>StorageBuckets</code> with the endpoint <code>Splunk_TA_Example_buckets</code>. UCC will modify the <code>web.conf</code> and <code>restmap.conf</code> files to register the handler. The handler file location is <code>bin/storage_buckets.py</code> and it will allow the actions <code>list</code>, <code>create</code>, <code>remove</code>, and <code>edit</code>. OpenApi entries will be generated for the handler with the specified request and response parameters. For example, <code>POST</code> requests to <code>.../Splunk_TA_Example_buckets</code> require a <code>param_name</code> parameter.</p>"},{"location":"options/rest_handlers/#required-properties","title":"Required properties","text":"Property Description name Name of the rest handler. Used in descriptions in the OpenApi specification. Only letters, digits and underscore. endpoint Endpoint of the rest handler: <code>https://&lt;SPLUNK_URL&gt;:&lt;MGMT_PORT&gt;/servicesNS/-/&lt;app_name&gt;/&lt;meta.restRoot&gt;/&lt;ENDPOINT&gt;</code>. Only letters, digits and underscore. handlerType Type of the handler. At the moment only <code>EAI</code> (read more) is supported."},{"location":"options/rest_handlers/#eai-properties-optional","title":"EAI properties (optional)","text":"Property Description registerHandler If it is specified, UCC will add proper lines to <code>web.conf</code> and <code>restmap.conf</code>. You need to specify handler file name and EAI actions. Example: <code>{\"file\": \"handler.py\", \"actions\" [\"create\", \"list\"]}</code> requestParameters Request parameters for each action. The parameters are used in the OpenApi specification. See below. resourcePresent Specifies whether the collection should expose its resources as well via web.conf or not. Default value is False. capabilities Specifies the capabilities required for the given methods. The provided capabilities will be generated in restmap.conf. For more information, refer to the Splunk documentation on restmap.conf. parentResource Specifies parent Resource for the given endpoint, it will get added in the <code>match</code> attribute of restmap.conf. Default value is \u201c/. responseParameters Response parameters for each action. The parameters are used in the OpenApi specification. See below. <p><code>registerHandler</code> is needed to register the handler in the <code>web.conf</code> and <code>restmap.conf</code> files.</p> <p><code>requestParameters</code> and <code>responseParameters</code> are used to define the parameters in OpenApi specification.</p>"},{"location":"options/rest_handlers/#request-and-response-parameters","title":"Request and Response parameters","text":"<p>The <code>requestParameters</code> and <code>responseParameters</code> objects are used to define the parameters for each action.</p> <p>Allowed actions are: <code>list</code>, <code>create</code>, <code>edit</code>, <code>remove</code>.</p>"},{"location":"options/rest_handlers/#format","title":"Format","text":"<pre><code>{\n  \"&lt;action_name&gt;\": {\n    \"&lt;param_name&gt;\": {\n      \"required\": true,\n      \"schema\": {...}\n    }\n  }\n}\n</code></pre> Property Description required If <code>true</code>, the parameter is required. Optional, default is <code>false</code> schema Required parameter - OpenAPI schema for the parameter, as described in OAS Data Types."},{"location":"options/rest_handlers/#example-parameters","title":"Example parameters","text":"<pre><code>{\n  \"create\": {\n    \"param_str_required\": {\n      \"required\": true,\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    },\n    \"param_number\": {\n      \"schema\": {\"type\": \"number\"}\n    },\n    \"param_object\": {\n      \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key1\": {\"type\": \"string\"},\n          \"key2\": {\"type\": \"number\"}\n        }\n      }\n    }\n  },\n  \"remove\": {\n    \"param_str_2\": {\n      \"schema\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n</code></pre> <p>The example above creates the following entries in the OpenApi specification:</p> <ol> <li><code>POST</code> requests to <code>.../Splunk_TA_Example_buckets</code> with the following body parameters:    - <code>param_str_required</code> is required and must be a string,    - <code>param_number</code> is optional and must be a number,    - <code>param_object</code> is optional and must be an object with keys <code>key1</code> and <code>key2</code> (e.g. <code>{\"key1\": \"a\", \"key2\": 1}</code>),    - as it is an <code>EAI</code> handler, <code>name</code> is also required.</li> <li><code>DELETE</code> requests to <code>.../Splunk_TA_Example_buckets/{name}</code> with the following query parameters:    - <code>param_str_2</code> is optional and must be a string.</li> </ol>"}]}