from unittest.mock import patch, mock_open, MagicMock
from splunk_add_on_ucc_framework.generators import doc_generator
from os.path import join
from splunk_add_on_ucc_framework.generators.file_const import FileClass


MOCKED_GEN_FILE_LIST = [
    FileClass("file1.conf", MagicMock(), "some/path", "Conf file"),
    FileClass("file2.xml", MagicMock(), ["xml", "path"], "XML file"),
]


@patch(
    "splunk_add_on_ucc_framework.generators.doc_generator.realpath",
    return_value="/fake/dir",
)
@patch(
    "splunk_add_on_ucc_framework.generators.doc_generator.dirname",
    return_value="/fake/dir",
)
@patch("builtins.open", new_callable=mock_open)
@patch.object(doc_generator, "GEN_FILE_LIST", MOCKED_GEN_FILE_LIST)
def test_generate_docs(mock_open, mock_dirname, mock_realpath):
    doc_generator.generate_docs()

    # Verify the correct file path is being opened
    expected_path = join("/fake/dir", "docs", "generated_files.md")
    mock_open.assert_called_once_with(expected_path, "w")

    # Check the content written to the file
    written_content = "\n".join(
        [
            "---",
            "title: UCC framework generated files",
            "---",
            "",
            "Below table describes the files generated by UCC framework",
            "",
            "## File Description",
            "",
            "| File Name  | File Location | File Description |",
            "| ------------ | ------------ | ----------------- |",
            "| file1.conf | output/&lt;YOUR_ADDON_NAME&gt;/some/path | Conf file |",
            "| file2.xml | output/&lt;YOUR_ADDON_NAME&gt;/xml/path | XML file |",
            "\n",
        ]
    )

    mock_open().write.assert_called_once_with(written_content)


@patch(
    "splunk_add_on_ucc_framework.generators.doc_generator.realpath",
    return_value="/fake/dir",
)
@patch(
    "splunk_add_on_ucc_framework.generators.doc_generator.dirname",
    return_value="/fake/dir",
)
@patch("builtins.open", new_callable=mock_open)
@patch.object(doc_generator, "GEN_FILE_LIST", [])
def test_generate_docs_empty_list(mock_open_file, mock_dirname, mock_realpath):
    doc_generator.generate_docs()

    # Verify the correct file path is being opened
    expected_path = join("/fake/dir", "docs", "generated_files.md")
    mock_open_file.assert_called_once_with(expected_path, "w")

    # Check the content written to the file
    written_content = "\n".join(
        [
            "---",
            "title: UCC framework generated files",
            "---",
            "",
            "Below table describes the files generated by UCC framework",
            "",
            "## File Description",
            "",
            "| File Name  | File Location | File Description |",
            "| ------------ | ------------ | ----------------- |",
            "\n",
        ]
    )

    mock_open_file().write.assert_called_once_with(written_content)


# Test main function
@patch("splunk_add_on_ucc_framework.generators.doc_generator.generate_docs")
def test_main(mock_generate_docs):
    doc_generator.main()
    mock_generate_docs.assert_called_once()
