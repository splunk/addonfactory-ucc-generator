from splunk_add_on_ucc_framework.auto_gen_comparator import (
    remove_xml_comments,
    CodeGeneratorDiffChecker,
)
from pathlib import Path
from splunk_add_on_ucc_framework.commands import build


CONF_FILE_CONTENT = """
[install]
build = 123
is_configured = false
state = enabled

[launcher]
version = 1.0
description = Example description

[id]
version = 2.0
"""

XML_CONTENT = """<?xml version="1.0" encoding="UTF-8"?>
<root>
    <child name="a">value</child>
</root>
"""


def create_file(path: Path, content: str) -> int:
    path.parent.mkdir(parents=True, exist_ok=True)
    return path.write_text(content, encoding="utf-8")


def test_deduce_common_conf_xml_file(tmp_path, caplog):
    src_dir = tmp_path / "src"
    dst_dir = tmp_path / "dst"

    # Identical .conf file in both
    src_conf_file = src_dir / "app.conf"
    dst_conf_file = dst_dir / "app.conf"
    create_file(src_conf_file, CONF_FILE_CONTENT)
    create_file(dst_conf_file, CONF_FILE_CONTENT)

    # Identical .xml file in both
    src_xml_file = src_dir / "test.xml"
    dst_xml_file = dst_dir / "test.xml"
    create_file(src_xml_file, XML_CONTENT)
    create_file(dst_xml_file, XML_CONTENT)

    comparator = CodeGeneratorDiffChecker(str(src_dir), str(dst_dir))
    comparator.deduce_gen_and_custom_content(build.logger, ignore_file_list=[])

    expected_lines = [
        "Below are the file(s) that are auto generated by the UCC framework",
        str(src_conf_file),
        str(src_xml_file),
        "Please refer UCC framework documentation for the latest features",
    ]

    for line in expected_lines:
        assert line in caplog.text


def test_deduce_different_conf_xml_file(tmp_path):
    src_dir = tmp_path / "src"
    dst_dir = tmp_path / "dst"

    # Different .conf files in src and dst
    src_file = src_dir / "app.conf"
    dst_file = dst_dir / "restmap.conf"
    create_file(src_file, CONF_FILE_CONTENT)
    create_file(dst_file, CONF_FILE_CONTENT)

    # Different .xml files in src and dst
    src_xml_file = src_dir / "test.xml"
    dst_xml_file = dst_dir / "test2.xml"
    create_file(src_xml_file, XML_CONTENT)
    create_file(dst_xml_file, XML_CONTENT)

    comparator = CodeGeneratorDiffChecker(str(src_dir), str(dst_dir))
    comparator.deduce_gen_and_custom_content(build.logger, ignore_file_list=[])
    assert len(comparator.common_files) == 0


def test_deduce_different_content_in_conf_file(tmp_path):
    src_dir = tmp_path / "src"
    dst_dir = tmp_path / "dst"

    # Different conf content than that present in src app.conf
    dst_conf = """
    [install]
    build = 123
    state = enabled
    """

    # Identical .conf file in both
    src_file = src_dir / "app.conf"
    dst_file = dst_dir / "app.conf"
    create_file(src_file, CONF_FILE_CONTENT)
    create_file(dst_file, dst_conf)

    comparator = CodeGeneratorDiffChecker(str(src_dir), str(dst_dir))
    comparator.deduce_gen_and_custom_content(build.logger, ignore_file_list=[])
    assert len(comparator.common_files) == 0


def test_xml_invalid_detection(tmp_path, caplog):
    src_dir = tmp_path / "src"
    dst_dir = tmp_path / "dst"

    # Invalid XML in destination
    valid_xml = """<?xml version="1.0"?><root><tag>value</tag></root>"""
    invalid_xml = """ # This is a invalid comment
    <?xml version="1.0"?>
    <root>
        <tag>value</tag>
    </root>
    """

    src_xml_file = src_dir / "test.xml"
    dst_xml_file = dst_dir / "test.xml"
    create_file(src_xml_file, valid_xml)
    create_file(dst_xml_file, invalid_xml)
    comparator = CodeGeneratorDiffChecker(str(src_dir), str(dst_dir))
    comparator.deduce_gen_and_custom_content(build.logger, ignore_file_list=[])

    expected_lines = [
        f"1) {src_xml_file}\n"
        "\tSource: [unverified], Generated: invalid XML generated from globalConfig. "
        "Ensure necessary characters are escaped.\n"
    ]

    for line in expected_lines:
        assert line in caplog.text
    assert len(comparator.common_files) == 0


def test_remove_comments():
    input_xml = """
<!--
SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>
SPDX-License-Identifier: LicenseRef-Splunk-8-2021

// jscpd:ignore-start
-->
<form version="1.1" script="MultiSelectHelper.js">
    <label>Health Overview</label>
    <fieldset submitButton="false">

        <input type="multiselect" token="host" searchWhenChanged="true">
            <label>Host</label>
            <fieldForValue>host</fieldForValue>
        </input>
    </fieldset>
</form>
<!--
// jscpd:ignore-end
-->
"""

    expected_xml = """

<form version="1.1" script="MultiSelectHelper.js">
    <label>Health Overview</label>
    <fieldset submitButton="false">

        <input type="multiselect" token="host" searchWhenChanged="true">
            <label>Host</label>
            <fieldForValue>host</fieldForValue>
        </input>
    </fieldset>
</form>

"""
    xml_without_comments = remove_xml_comments(input_xml)
    assert expected_xml == xml_without_comments
