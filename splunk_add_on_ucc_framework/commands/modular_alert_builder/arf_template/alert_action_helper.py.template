# encoding = utf-8

def process_event(helper, *args, **kwargs):
    """
    # IMPORTANT
    # Do not remove the anchor macro:start and macro:end lines.
    # These lines are used to generate sample code. If they are
    # removed, the sample code will not be updated when configurations
    # are updated.

    [sample_code_macro:start]
    {% if global_settings %}
    {% for type, setting in global_settings.items() %}
        {% if type == 'log_settings' %}

    # The following example gets and sets the log level
    helper.set_log_level(helper.log_level)
        {% elif type == 'proxy_settings' %}

    # The following example sends rest requests to some endpoint
    # response is a response object in python requests library
    response = helper.send_http_request("http://www.splunk.com", "GET", parameters=None,
                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)
    # get the response headers
    r_headers = response.headers
    # get the response body as text
    r_text = response.text
    # get response body as json. If the body text is not a json string, raise a ValueError
    r_json = response.json()
    # get response cookies
    r_cookies = response.cookies
    # get redirect history
    historical_responses = response.history
    # get response status code
    r_status = response.status_code
    # check the response status, if the status is not sucessful, raise requests.HTTPError
    response.raise_for_status()

        {% elif type == 'credential_settings' %}

    # The following example gets account information
    user_account = helper.get_user_credential("<account_name>")
        {% elif type == 'customized_settings' and setting %}

    # The following example gets the setup parameters and prints them to the log
             {% for param in setting %}
    {{ param.name }} = helper.get_global_setting("{{ param.name }}")
    helper.log_info("{{ param.name }}={}".format({{ param.name }}))
             {% endfor %}
         {% endif %}
    {% endfor %}
    {% endif %}
    {% if mod_alert.get("parameters") %}

    # The following example gets the alert action parameters and prints them to the log
        {% for param in mod_alert.parameters %}
    {{ param.name }} = helper.get_param("{{ param.name }}")
    helper.log_info("{{ param.name }}={}".format({{ param.name }}))

        {% endfor %}
    {% endif %}

    # The following example adds two sample events ("hello", "world")
    # and writes them to Splunk
    # NOTE: Call helper.writeevents() only once after all events
    # have been added
    {% if mod_alert.get("active_response") and mod_alert.active_response.get("sourcetype") %}
    helper.addevent("hello", sourcetype="{{ mod_alert.active_response.sourcetype }}")
    helper.addevent("world", sourcetype="{{ mod_alert.active_response.sourcetype }}")
    {% else %}
    helper.addevent("hello", sourcetype="sample_sourcetype")
    helper.addevent("world", sourcetype="sample_sourcetype")
    {% endif %}
    helper.writeevents(index="summary", host="localhost", source="localhost")

    # The following example gets the events that trigger the alert
    events = helper.get_events()
    for event in events:
        helper.log_info("event={}".format(event))

    # helper.settings is a dict that includes environment configuration
    # Example usage: helper.settings["server_uri"]
    helper.log_info("server_uri={}".format(helper.settings["server_uri"]))
    [sample_code_macro:end]
    """

    helper.log_info("Alert action {{ mod_alert.short_name }} started.")

    # TODO: Implement your alert action logic here
    return 0
