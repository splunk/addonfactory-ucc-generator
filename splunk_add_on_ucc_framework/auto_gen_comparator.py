from os import walk
from os.path import sep
from typing import List, Dict
from logging import Logger


class CodeGeneratorDiffChecker:
    def __init__(self, src_dir: str, dst_dir: str) -> None:
        self.source_directory = src_dir
        self.target_directory = dst_dir
        self.common_files: Dict[str, str] = {}

    def find_common_files(self, ingore_file_list: List[str] = []) -> None:
        # we add these two files as they are required to be present in source code
        ingore_file_list.extend(["app.manifest", "README.txt"])

        src_all_files = {}
        for root, _, files in walk(self.source_directory):
            for file in files:
                src_all_files[file] = sep.join([root, file])

        dest_all_files = {}
        for root, _, files in walk(self.target_directory):
            for file in files:
                dest_all_files[file] = sep.join([root, file])
        dest_all_files["default.meta"] = sep.join([self.target_directory, "metadata"])

        for file_name, file_path in dest_all_files.items():
            if file_name in src_all_files.keys():
                if file_name in ingore_file_list:
                    continue
                self.common_files[file_name] = src_all_files[file_name]

    def print_files(self, logger: Logger) -> None:
        if not self.common_files:
            # nothing to print if there are no common files
            return

        messages: List[str] = []
        messages.append("-" * 120)
        messages.append(
            "Below are the file(s) that are auto generated by the UCC framework. "
            "The below files can be removed from your repository:"
        )
        messages.extend(
            [f"{idx}) {f}" for idx, f in enumerate(self.common_files.values())]
        )
        messages.append(
            "Please refer UCC framework documentation for the latest "
            "features that ables you to remove the above files."
        )
        messages.append("-" * 120)
        logger.warning("\n".join(messages))
