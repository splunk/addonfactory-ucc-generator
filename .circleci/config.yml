version: 2.1
orbs:
  go: circleci/go@0.2.0
jobs:
  build:
    docker:
      - image: circleci/python:3.7-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Get UI
          command: |
            ./get-ucc-ui.sh
            # Puts package and schema subdirs
            tar -zxf splunk-ucc-ui.tgz -C splunk_add_on_ucc_framework/
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            poetry install
            poetry run poetry-dynamic-versioning
            poetry build
      - save_cache:
          key: poetry-cache-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/poetry
      - store_artifacts:
          path: dist
      - store_artifacts:
          path: output
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist
            - output

  test:
    docker:
      - image: circleci/python:3.7-node
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install Tools
          command: |
            pip install /tmp/workspace/dist/* --use-deprecated=legacy-resolver

  semgrep:
    environment:
      SEMGREP_REPO_URL: << pipeline.project.git_url >>
      SEMGREP_BRANCH: << pipeline.git.branch >>
    docker:
      - image: returntocorp/semgrep-agent:v1
        user: root
    resource_class: large
    steps:
      - checkout
      - run:
          name: "Install Dependencies"
          command: |
            pip3 install --upgrade semgrep
      - run:
          name: "Semgrep Scan"
          no_output_timeout: 2h
          command: |
            export SEMGREP_REPO_NAME=splunk/${CIRCLE_PROJECT_REPONAME}
            python -m semgrep_agent --publish-deployment ${SEMGREP_DEPLOYMENT_ID} --publish-token ${SEMGREP_PUBLISH_TOKEN}
            # Generate the Semgrep Dashboard URL
            export REPO_BRANCH=$(echo "<< pipeline.git.branch >>")
            DASHBOARD_URL=$(python3 -c "from urllib.parse import quote; import os; print('https://semgrep.dev/manage/findings?repo=' + quote(os.environ['SEMGREP_REPO_NAME'], safe='') + '&tab=findings&ref_type=branch&ref=' + quote(os.environ['REPO_BRANCH'], safe=''))")
            echo "View Result at Semgrep Dashboard: $DASHBOARD_URL"

            # Semgrep Exclude files
            dos2unix .semgrepignore
            SEMGREP_EXCLUDE=$(sed "/^#/d" .semgrepignore | sed "/^:/d" | sed -r '/^\s*$/d' | sed ':a;N;$!ba;s/\n/ --exclude /g')
            echo "Excluding Semgrep Files: --exclude $SEMGREP_EXCLUDE"
            # Generate xml file
            semgrep --config="p/r2c-ci" --config="p/r2c-security-audit" --config="p/bandit" --error --strict --timeout=0 --junit-xml -o /root/project/test-results/semgrep-scan.xml --exclude $SEMGREP_EXCLUDE
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  release:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run: npx semantic-release

  publish-pypi:
    docker:
      - image: circleci/python:3.7-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - restore_cache:
          keys:
            - yarn-packages-{{ checksum "splunk_add_on_ucc_framework/ucc_ui_lib/yarn.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Get UI
          command: |
            ./get-ucc-ui.sh
            mkdir -p splunk_add_on_ucc_framework/package || true
            tar -zxf splunk-ucc-ui.tgz -C splunk_add_on_ucc_framework/package
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            poetry install
            poetry run poetry-dynamic-versioning
            poetry publish --build -u $PYPI_USERNAME -p $PYPI_TOKEN
      - save_cache:
          key: poetry-cache-{{ checksum "poetry.lock" }}
          paths:
            - ~/.poetry
      - store_artifacts:
          path: dist
      - store_artifacts:
          path: output
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist
            - output

workflows:
  version: 2
  build_test:
    jobs:
      - build
      - semgrep:
          context:
            - gdi-semgrep
          filters:
            branches:
              only: /.*/
      - test:
          requires:
            - build
      - release:
          requires:
            - test
          context:
            - gdi-github
  release:
    jobs:
      - publish-pypi:
          context:
            - gdi-pypi
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/
