name: TAs Regression Test

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
    inputs:
      target_repo:
        description: "TA repository (leave empty to test all TAs)"
        required: false
        default: ""
      target_branch:
        description: "TA repository branch"
        required: false
        default: "main"
      splunktaucclib_branch:
        description: "Branch of splunk/addonfactory-ucc-library to use (leave empty to use latest from PyPI)"
        required: false
        default: ""
      run_pipelines:
        description: "Run pipelines for all TAs (true/false)"
        required: false
        default: "false"

jobs:
  build-ucc:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout UCC Framework Repository
        uses: actions/checkout@v4
        with:
          path: UCC

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.7"

      - name: Install Poetry 1.5.1
        run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1

      - name: Install Poetry Dependencies
        working-directory: UCC
        run: poetry install

      - name: Build UCC Framework Package
        working-directory: UCC
        run: poetry build

      - name: Upload UCC Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ucc-package-whl
          path: UCC/dist/*.whl

  determine-repos:
    # This job determines the repositories to run tests on based on the event type and inputs
    runs-on: ubuntu-22.04
    outputs:
      repos: ${{ steps.set-repos.outputs.repos }}
    steps:
      - id: set-repos
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.target_repo }}" ]]; then
            echo "repos=[\"${{ github.event.inputs.target_repo }}\"]" >> $GITHUB_OUTPUT
          else
            echo "repos<<EOF" >> $GITHUB_OUTPUT
            echo '[
              "splunk/splunk-add-on-for-amazon-web-services",
              "splunk/splunk-add-on-for-google-cloud-platform",
              "splunk/splunk-add-on-for-google-workspace",
              "splunk/splunk-add-on-for-microsoft-cloud-services",
              "splunk/splunk-add-on-for-microsoft-office-365",
              "splunk/splunk-add-on-for-salesforce",
              "splunk/splunk-add-on-for-servicenow",
              "splunk/splunk-add-on-for-mysql"
            ]' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

  test-addons:
    needs: [ build-ucc, determine-repos ]
    strategy:
      matrix:
        target_repo: ${{ fromJSON(needs.determine-repos.outputs.repos) }}
    continue-on-error: true
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Target Add-on Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.target_repo }}
          path: TA
          token: ${{ secrets.GH_TOKEN_ADMIN }}
          ref: ${{ github.event.inputs.target_branch }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.7"

      - name: Install Poetry 1.5.1
        run: curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1

      - name: Download UCC Artifact
        uses: actions/download-artifact@v4
        with:
          name: ucc-package-whl
          path: UCC

      - name: Prepare the Target Add-on
        id: prepare
        working-directory: TA
        run: |
          cp ../UCC/*.whl ./
          UCC_WHL=$(ls *.whl)
          
          # https://github.com/python-poetry/poetry/issues/7491#issuecomment-1423763839
          git config --global --add url."https://${{ secrets.GH_TOKEN_ADMIN }}@github.com".insteadOf https://github.com
          git config --global --add url."https://${{ secrets.GH_TOKEN_ADMIN }}@github.com".insteadOf ssh://git@github.com
          
          # Use the special branch
          if [[ "${{ github.event.inputs.run_pipelines }}" == "true" ]]; then
            GIT_BRANCH="ucc/ci_tests_trigger_pipeline"
            # delete the branch from remote
            git push origin --delete "$GIT_BRANCH" || true
          
            git fetch origin
          
            if git ls-remote --exit-code --heads origin "$GIT_BRANCH"; then
              echo "Branch $GIT_BRANCH already exists, checking it out"
              git checkout "$GIT_BRANCH"
              git pull origin main --no-ff --no-edit  # Merge main into the branch
              echo "branch-created=false" >> "$GITHUB_OUTPUT"
            else
              echo "Branch $GIT_BRANCH does not exist, creating it"
              git checkout -b "$GIT_BRANCH" "origin/main"
              echo "branch-created=true" >> "$GITHUB_OUTPUT"
            fi
          
            echo "GIT_BRANCH=$GIT_BRANCH" >> "$GITHUB_ENV"
          fi
          
          # Retry logic for poetry install
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          until [ $RETRY_COUNT -ge $MAX_RETRIES ]
          do
            echo "Installing UCC package $UCC_WHL"
            poetry add "./$UCC_WHL" --group dev && break
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Poetry install failed, retry attempt $RETRY_COUNT of $MAX_RETRIES"
            sleep 5
          done
          
          # Install splunktaucclib with retries
          RETRY_COUNT=0
          until [ $RETRY_COUNT -ge $MAX_RETRIES ]
          do
            if [[ -n "${{ github.event.inputs.splunktaucclib_branch }}" ]]; then
              echo "Installing splunktaucclib from branch ${{ github.event.inputs.splunktaucclib_branch }}"
              poetry add git+https://github.com/splunk/addonfactory-ucc-library.git@${{ github.event.inputs.splunktaucclib_branch }} && break
            else
              echo "Installing latest splunktaucclib from PyPI"
              poetry add splunktaucclib@latest && break
            fi
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "splunktaucclib install failed, retry attempt $RETRY_COUNT of $MAX_RETRIES"
            sleep 5
          done
          
          mkdir -p package/lib
          poetry export --without-hashes -o package/lib/requirements.txt
          
          # Add to commit
          if [[ "${{ github.event.inputs.run_pipelines }}" == "true" ]]; then
            echo "Adding UCC, pyproject.toml and poetry.lock to commit"
            git add pyproject.toml poetry.lock $UCC_WHL
          fi
      - name: Run ucc-gen build in Target Add-on
        working-directory: TA
        run: |
          poetry run ucc-gen build
      - name: Importing GPG key
        if: success() && github.event.inputs.run_pipelines == 'true'
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          git_committer_name: ${{ secrets.SA_GH_USER_NAME }}
          git_committer_email: ${{ secrets.SA_GH_USER_EMAIL }}
          gpg_private_key: ${{ secrets.SA_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.SA_GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          workdir: TA
      - name: Push changes to a temporary branch in order to trigger the pipeline
        if: success() && github.event.inputs.run_pipelines == 'true'
        working-directory: TA
        run: |
          git config --global user.name "${{ secrets.SA_GH_USER_NAME }}"
          git config --global user.email "${{ secrets.SA_GH_USER_EMAIL }}"
          git commit -S -m "CI: UCC build for ${{ github.event_name }} event"
          git push origin $GIT_BRANCH
      - name: Create PR to trigger tests
        if: success() && github.event.inputs.run_pipelines == 'true' && steps.prepare.outputs.branch-created == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          branch: ${{ env.GIT_BRANCH }}
          title: "UCC: Trigger CI tests"
          body: "This PR is automatically created to trigger CI tests for the UCC framework."
          draft: true
          path: TA
