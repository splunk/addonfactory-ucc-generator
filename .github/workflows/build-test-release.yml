name: CI

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [main, develop]

jobs:
  compliance-dependencies:
    name: Compliance Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: ort-action
        uses: splunk/addonfactory-ort-action@v1
        id: ort-action
        with:
          WorkDir: .
          UsePython3: "3.7"        
      - name: ort-action-artifacts-reports
        uses: actions/upload-artifact@v3
        with:
          name: analysis-reports
          path: |
            .ort/reports/*
        if: always()
      - name: ort-action-artifacts-analyzer
        uses: actions/upload-artifact@v3
        with:
          name: analysis-analyzer
          path: |
            .ort/analyzer/*
        if: always()
  compliance-copyrights:
    name: Compliance Copyright Headers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check License Header
        uses: apache/skywalking-eyes@v0.3.0
  test-unit:
    name: Test Unit Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.7"
    steps:
      - uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and build
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          ./get-ucc-ui.sh
          # Puts package and schema subdirs along with NOTICE (THIRDPARTY.npm)
          tar -zxf splunk-ucc-ui.tgz -C splunk_add_on_ucc_framework/
          poetry install
          poetry build
      - name: Ensure all UCC UI files are in the final package
        run: ./.github/workflows/check_ucc_ui_files.sh
      - name: Run Pytest with coverage
        run: |
          poetry run pytest --cov=./splunk_add_on_ucc_framework --cov-report=xml --junitxml=test-results/junit.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          directory: ./coverage/reports/
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true
      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: test-results-unit-python_${{ matrix.python-version }}
          path: test-results/*
  appinspect-for-expected-outputs:
    name: Appinspect ${{ matrix.tags }} tests/expected_output_global_config_inputs_configuration_alerts/Splunk_TA_UCCExample
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        tags:
          - "cloud"
          - "appapproval"
          - "deprecated_feature"
          - "developer_guidance"
          - "future"
          - "self-service"
          - "splunk_appinspect"
    steps:
      - uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: "3.7"
      - name: Install slim
        run: pip install splunk-packaging-toolkit
      - name: Slim tests/expected_output_global_config_inputs_configuration_alerts/Splunk_TA_UCCExample
        run: mkdir tests/slimmed; slim package tests/expected_output_global_config_inputs_configuration_alerts/Splunk_TA_UCCExample -o tests/slimmed
      - uses: splunk/appinspect-cli-action@v1
        with:
          app_path: tests/slimmed
          included_tags: ${{ matrix.tags }}
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.7"
      - uses: pre-commit/action@v3.0.0
  semgrep:
    runs-on: ubuntu-latest
    name: security-sast-semgrep
    if: github.actor != 'dependabot[bot]'
    steps:
      - uses: actions/checkout@v3
      - name: Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}
  build:
    name: Build Release
    needs:
      - test-unit
      - compliance-copyrights
      - compliance-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Very important: semantic-release won't trigger a tagged
          # build if this is not set false
          persist-credentials: false
      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: "3.7"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          ./get-ucc-ui.sh
          # Puts package and schema subdirs along with NOTICE (THIRDPARTY.npm)
          tar -zxf splunk-ucc-ui.tgz -C splunk_add_on_ucc_framework/
          poetry build
      - name: Ensure all UCC UI files are in the final package
        run: ./.github/workflows/check_ucc_ui_files.sh
      - uses: actions/download-artifact@v3
        with:
          name: analysis-reports
          path: /tmp/analysis-reports
      - name: Update Notices
        run: cp -f /tmp/analysis-reports/NOTICE_summary NOTICE
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3.0.0
        with:
          semantic_version: 19.0.2
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/changelog
            @google/semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
