name: CI

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [main, develop]

jobs:
  fossa-scan:
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: run fossa analyze and create report
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa analyze --debug
          fossa report attribution --format text > /tmp/THIRDPARTY
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      - name: upload THIRDPARTY file
        uses: actions/upload-artifact@v3
        with:
          name: THIRDPARTY
          path: /tmp/THIRDPARTY
      - name: run fossa test
        run: |
          fossa test --debug
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}

  compliance-copyrights:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check License Header
        uses: apache/skywalking-eyes@v0.4.0

  test-smoke:
    name: test-smoke ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and build
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          ./get-ucc-ui.sh
          # Puts package and schema subdirs along with NOTICE (THIRDPARTY.npm)
          tar -zxf splunk-ucc-ui.tgz -C splunk_add_on_ucc_framework/
          poetry install
          poetry build
      - name: Ensure all UCC UI files are in the final package
        run: ./.github/workflows/check_ucc_ui_files.sh
      - run: poetry run pytest tests/smoke

  test-unit:
    name: test-unit ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and build
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          ./get-ucc-ui.sh
          # Puts package and schema subdirs along with NOTICE (THIRDPARTY.npm)
          tar -zxf splunk-ucc-ui.tgz -C splunk_add_on_ucc_framework/
          poetry install
          poetry build
      - name: Ensure all UCC UI files are in the final package
        run: ./.github/workflows/check_ucc_ui_files.sh
      - run: poetry run pytest tests/unit

  test-ui:
    name: test-ui -m ${{ matrix.test-mark }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        test-mark:
          - "default"
          - "logging_page and not default"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - name: Install Poetry and Python dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
      - name: Link chromedriver
        # Use installed chromedriver https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
        run: |
          export PATH=$PATH:$CHROMEWEBDRIVER
          chromedriver --version
      - name: Build UCC
        run: |
          ./get-ucc-ui.sh
          tar -zxf splunk-ucc-ui.tgz -C splunk_add_on_ucc_framework/
          poetry build
      - name: Create Example TA
        run: poetry run ucc-gen --source tests/testdata/test_addons/package_global_config_configuration/package
      - name: Run Splunk in docker
        run: |
          ./run_splunk.sh
          until curl -Lsk "https://localhost:8088/services/collector/health" &>/dev/null ; do echo -n "Waiting for HEC-" && sleep 5 ; done
        timeout-minutes: 5
      - name: Run Pytest
        run: poetry run pytest tests/ui -m "${{ matrix.test-mark }}" --headless --junitxml=test-results/junit.xml
      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: test-results-ui-${{ matrix.test-mark }}
          path: test-results/*

  appinspect-for-expected-outputs:
    name: splunk-appinspect ${{ matrix.tags }} tests/testdata/expected_addons/expected_output_global_config_inputs_configuration_alerts/Splunk_TA_UCCExample
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        tags:
          - "cloud"
          - "appapproval"
          - "deprecated_feature"
          - "developer_guidance"
          - "future"
          - "self-service"
          - "splunk_appinspect"
    steps:
      - uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - name: Install slim
        run: pip install splunk-packaging-toolkit
      - name: Slim tests/expected_output_global_config_inputs_configuration_alerts/Splunk_TA_UCCExample
        run: mkdir tests/slimmed; slim package tests/testdata/expected_addons/expected_output_global_config_inputs_configuration_alerts/Splunk_TA_UCCExample -o tests/slimmed
      - uses: splunk/appinspect-cli-action@v1
        with:
          app_path: tests/slimmed
          included_tags: ${{ matrix.tags }}

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - uses: pre-commit/action@v3.0.0

  semgrep:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
      - uses: actions/checkout@v3
      - name: Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}

  build:
    needs:
      - test-unit
      - test-smoke
      - pre-commit
      - appinspect-for-expected-outputs
      - semgrep
      - compliance-copyrights
      - fossa-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Very important: semantic-release won't trigger a tagged
          # build if this is not set false
          persist-credentials: false
      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          ./get-ucc-ui.sh
          # Puts package and schema subdirs along with NOTICE (THIRDPARTY.npm)
          tar -zxf splunk-ucc-ui.tgz -C splunk_add_on_ucc_framework/
          poetry build
      - name: Ensure all UCC UI files are in the final package
        run: ./.github/workflows/check_ucc_ui_files.sh
      - uses: actions/download-artifact@v3
        with:
          name: THIRDPARTY
      - name: Update Notices
        run: cp -f THIRDPARTY NOTICE
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3.2.0
        with:
          semantic_version: 19.0.2
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/changelog
            @google/semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
